// Auto-generated from problems/ directory
// DO NOT EDIT THIS FILE DIRECTLY - Edit problems/*.json instead
// Generated at: 2025-08-24T04:06:45.720Z

const generatedTestDefinitions = new Map();


// Problem 1: Hello World - Multi-File Kernel Module
generatedTestDefinitions.set(1, {
    "name": "Hello World - Multi-File Kernel Module",
    "category": "foundations",
    "description": "Create your first multi-file kernel module with a separate header file. This introduces you to kernel module structure with proper file organization. Note: Module init/exit functions are static and don't need header declarations.",
    "exactRequirements": {
        "functionNames": [
            "hello_init",
            "hello_exit"
        ],
        "outputMessages": [
            "Hello from multi-file kernel module!",
            "Goodbye from multi-file kernel module!"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "printk",
            "KERN_INFO"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "header_structure",
            "name": "Header File Structure",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "#ifndef HELLO_H",
                "#define HELLO_H",
                "#endif"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_declarations",
            "name": "Function Declarations in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [],
            "prohibitedSymbols": [
                "static.*hello_init",
                "static.*hello_exit"
            ]
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "static int __init hello_init(void)",
                "static void __exit hello_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Messages",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Hello from multi-file kernel module!",
                    "exact": true
                },
                {
                    "pattern": "Goodbye from multi-file kernel module!",
                    "exact": true
                }
            ]
        },
        {
            "id": "module_info",
            "name": "Module Information",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "MODULE_LICENSE",
                "MODULE_AUTHOR",
                "MODULE_DESCRIPTION"
            ],
            "prohibitedSymbols": []
        }
    ]
});


// Problem 2: Create Your First Variable
generatedTestDefinitions.set(2, {
    "name": "Create Your First Variable",
    "category": "foundations",
    "description": "Learn to create variables in kernel modules using proper file structure. You'll work with separate header and C files - a fundamental practice in professional kernel development that builds good coding habits from day one.",
    "exactRequirements": {
        "functionNames": [
            "variables_init",
            "variables_exit"
        ],
        "variables": [
            {
                "name": "my_number",
                "type": "int",
                "value": 42
            }
        ],
        "outputMessages": [
            "Variables module loaded"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "#ifndef VARIABLES_H",
            "#define VARIABLES_H",
            "extern int my_number",
            "int my_number = 42",
            "#include \"variables.h\""
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "header_guards",
            "name": "Proper Header Guards",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "#ifndef VARIABLES_H",
                "#define VARIABLES_H",
                "#endif"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "variable_declaration",
            "name": "Variable Declaration in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "extern int my_number"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "variable_definition",
            "name": "Variable Definition in C File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int my_number = 42"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "header_inclusion",
            "name": "Include Own Header First",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "#include \"variables.h\""
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "static int __init variables_init(void)",
                "static void __exit variables_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Message",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Variables module loaded",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 3: Use Your Variable
generatedTestDefinitions.set(3, {
    "name": "Use Your Variable",
    "category": "foundations",
    "description": "Learn to use variables by printing them with proper format specifiers. Build on your knowledge of header/C file structure while introducing printk formatting - a crucial skill for kernel debugging.",
    "exactRequirements": {
        "functionNames": [
            "use_vars_init",
            "use_vars_exit",
            "print_my_number"
        ],
        "variables": [
            {
                "name": "my_number",
                "type": "int",
                "value": 42
            }
        ],
        "outputMessages": [
            "Variable usage module loaded",
            "My number is: 42"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "void print_my_number(void)",
            "printk(KERN_INFO \"My number is: %d\\n\", my_number)",
            "print_my_number()"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_implementation",
            "name": "Function Implementation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_my_number(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "format_specifier",
            "name": "Correct Format Specifier Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "%d",
                "my_number"
            ],
            "prohibitedSymbols": [
                "%s",
                "%c"
            ]
        },
        {
            "id": "function_call",
            "name": "Function Call in Init",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "print_my_number()"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_my_number(void)",
                "static int __init use_var_init(void)",
                "static void __exit use_var_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Messages",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Variable usage module loaded",
                    "exact": true
                },
                {
                    "pattern": "My number is: 42",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 4: Multiple Variables - Study Complete Example
generatedTestDefinitions.set(4, {
    "name": "Multiple Variables - Study Complete Example",
    "category": "foundations",
    "description": "Study a complete working example with multiple data types. See how int, char, and bool variables work together with proper format specifiers. This example includes advanced module parameter support that will be used in later problems.",
    "exactRequirements": {
        "functionNames": [
            "multi_vars_init",
            "multi_vars_exit",
            "print_student_info"
        ],
        "variables": [
            {
                "name": "student_id",
                "type": "int",
                "value": 12345
            },
            {
                "name": "student_grade",
                "type": "char",
                "value": "'A'"
            },
            {
                "name": "student_passed",
                "type": "bool",
                "value": true
            }
        ],
        "outputMessages": [
            "Multi-variable module loaded",
            "Student ID: 12345",
            "Student Grade: A",
            "Student Passed: 1"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h"
        ],
        "mustContain": [
            "extern int student_id",
            "extern char student_grade",
            "extern bool student_passed",
            "int student_id = 12345",
            "char student_grade = 'A'",
            "bool student_passed = true"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "multiple_declarations",
            "name": "Multiple Variable Declarations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "extern int student_id",
                "extern char student_grade",
                "extern bool student_passed"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "multiple_definitions",
            "name": "Multiple Variable Definitions",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int student_id = 12345",
                "char student_grade = 'A'",
                "bool student_passed = true"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_structure",
            "name": "Print Function Implementation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_student_info(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_student_info(void)",
                "static int __init multi_vars_init(void)",
                "static void __exit multi_vars_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Basic Output Messages",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Multi-variable module loaded",
                    "exact": true
                },
                {
                    "pattern": "Student Information",
                    "exact": true
                },
                {
                    "pattern": "Student ID: 12345",
                    "exact": true
                },
                {
                    "pattern": "Student Grade: A",
                    "exact": true
                },
                {
                    "pattern": "Student Passed: 1",
                    "exact": true
                }
            ]
        },
        {
            "id": "demonstration_test",
            "name": "Study Example with Dynamic Testing",
            "type": "kernel_project_test",
            "critical": false,
            "testScenario": {
                "userspaceApps": [
                    {
                        "name": "demo_tester",
                        "source": "#include <stdio.h>\\n#include <stdlib.h>\\n\\nint main() {\\n    printf(\"=== Part A Demo Test ===\\\\n\");\\n    printf(\"Demonstrating dynamic module parameters\\\\n\");\\n    \\n    printf(\"Test: Loading with student_id=99999\\\\n\");\\n    system(\"rmmod multi_vars 2>/dev/null\");\\n    system(\"insmod /lib/modules/multi_vars.ko student_id=99999\");\\n    \\n    printf(\"SUCCESS: Demo completed\\\\n\");\\n    return 0;\\n}"
                    }
                ],
                "setupCommands": [
                    "echo 'Demonstrating module parameter functionality'"
                ],
                "testCommands": [
                    "/bin/demo_tester",
                    "echo 'Check: Module parameter works'",
                    "dmesg | grep 'Student ID: 99999' && echo 'DEMO: Parameter worked!' || echo 'INFO: Using default value'"
                ],
                "expected": {
                    "dmesg": [
                        "Multi-variable module loaded"
                    ],
                    "stdout": [
                        "Part A Demo Test",
                        "SUCCESS: Demo completed"
                    ]
                },
                "timeout": 30
            }
        }
    ]
});


// Problem 5: Multiple Variables - Guided Practice
generatedTestDefinitions.set(5, {
    "name": "Multiple Variables - Guided Practice",
    "category": "foundations",
    "description": "Build on Problem 4 by completing a partially implemented solution. Fill in strategic gaps while working with module parameters for dynamic testing. This bridges complete examples to independent creation.",
    "exactRequirements": {
        "functionNames": [
            "practice_vars_init",
            "practice_vars_exit",
            "print_employee_info"
        ],
        "variables": [
            {
                "name": "employee_id",
                "type": "int",
                "value": 67890
            },
            {
                "name": "performance_grade",
                "type": "char",
                "value": "'A'"
            },
            {
                "name": "is_promoted",
                "type": "bool",
                "value": true
            }
        ],
        "outputMessages": [
            "Practice variables module loaded",
            "Employee Information",
            "Employee ID: 67890",
            "Grade: A",
            "Promoted: 1"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h"
        ],
        "mustContain": [
            "extern int employee_id",
            "extern char performance_grade",
            "extern bool is_promoted",
            "int employee_id = 67890",
            "char performance_grade = 'A'",
            "bool is_promoted = true"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "variable_completion",
            "name": "Variable Value Completion",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int employee_id = 67890",
                "char performance_grade = 'A'",
                "bool is_promoted = true"
            ],
            "prohibitedSymbols": [
                "_____"
            ]
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_employee_info(void)",
                "static int __init practice_vars_init(void)",
                "static void __exit practice_vars_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Basic Output Messages",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Practice variables module loaded",
                    "exact": true
                },
                {
                    "pattern": "Employee Information",
                    "exact": true
                },
                {
                    "pattern": "Employee ID: 67890",
                    "exact": true
                },
                {
                    "pattern": "Grade: A",
                    "exact": true
                },
                {
                    "pattern": "Promoted: 1",
                    "exact": true
                }
            ]
        },
        {
            "id": "guided_dynamic_testing",
            "name": "Guided Dynamic Testing",
            "type": "kernel_project_test",
            "critical": true,
            "testScenario": {
                "userspaceApps": [
                    {
                        "name": "practice_tester",
                        "source": "#include <stdio.h>\\n#include <stdlib.h>\\n\\nint main() {\\n    printf(\"=== Part B Practice Test ===\\\\n\");\\n    printf(\"Testing guided completion with dynamic values\\\\n\");\\n    \\n    printf(\"Test: Loading with employee_id=88888\\\\n\");\\n    system(\"rmmod practice_vars 2>/dev/null\");\\n    system(\"insmod /lib/modules/practice_vars.ko employee_id=88888\");\\n    \\n    printf(\"SUCCESS: Practice test completed\\\\n\");\\n    printf(\"PASS: Variable completion works\\\\n\");\\n    return 0;\\n}"
                    }
                ],
                "setupCommands": [
                    "echo 'Starting guided practice testing'"
                ],
                "testCommands": [
                    "/bin/practice_tester",
                    "echo 'Checking dynamic value'",
                    "dmesg | grep 'Employee ID: 88888' && echo 'PASS: Dynamic employee_id worked' || echo 'FAIL: Must use variables, not hardcoded values'"
                ],
                "expected": {
                    "dmesg": [
                        "Practice variables module loaded",
                        "Employee ID: 88888"
                    ],
                    "stdout": [
                        "Part B Practice Test",
                        "SUCCESS: Practice test completed",
                        "PASS: Variable completion works"
                    ]
                },
                "timeout": 30
            }
        }
    ]
});


// Problem 6: Multiple Variables - Advanced Dynamic Testing
generatedTestDefinitions.set(6, {
    "name": "Multiple Variables - Advanced Dynamic Testing",
    "category": "foundations",
    "description": "Master advanced variable usage with dynamic testing! Create a complete solution that works with changing values - the system will test your code with different inputs to ensure you're using variables correctly, not hardcoding values.",
    "exactRequirements": {
        "functionNames": [
            "create_vars_init",
            "create_vars_exit",
            "print_server_status"
        ],
        "variables": [
            {
                "name": "server_id",
                "type": "int",
                "value": 1001
            },
            {
                "name": "status_code",
                "type": "char",
                "value": "'R'"
            },
            {
                "name": "temperature",
                "type": "int",
                "value": 68
            },
            {
                "name": "online",
                "type": "bool",
                "value": true
            }
        ],
        "outputMessages": [
            "Variable creation module loaded",
            "Server 1001: Status R, Temp 68, Online: 1"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h"
        ],
        "mustContain": [
            "extern int server_id",
            "extern char status_code",
            "extern int temperature",
            "extern bool online",
            "int server_id = 1001",
            "char status_code = 'R'",
            "int temperature = 68",
            "bool online = true",
            "module_param(server_id, int, 0644)",
            "module_param(temperature, int, 0644)"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "variable_declarations",
            "name": "Variable Declarations in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "extern int server_id",
                "extern char status_code",
                "extern int temperature",
                "extern bool online"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "variable_definitions",
            "name": "Variable Definitions in Source",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int server_id = 1001",
                "char status_code = 'R'",
                "int temperature = 68",
                "bool online = true"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "module_parameters",
            "name": "Module Parameter Infrastructure",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "module_param(server_id, int, 0644)",
                "module_param(temperature, int, 0644)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_server_status(void)",
                "static int __init create_vars_init(void)",
                "static void __exit create_vars_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "dynamic_variable_testing",
            "name": "Dynamic Variable Testing",
            "type": "kernel_project_test",
            "critical": true,
            "testScenario": {
                "userspaceApps": [
                    {
                        "name": "variable_tester",
                        "source": "#include <stdio.h>\\n#include <stdlib.h>\\n\\nint main() {\\n    printf(\"=== Dynamic Variable Test ===\\\\n\");\\n    \\n    printf(\"Test 1: Testing server_id=2001, temperature=85\\\\n\");\\n    system(\"rmmod create_vars 2>/dev/null\");\\n    system(\"insmod /lib/modules/create_vars.ko server_id=2001 temperature=85\");\\n    \\n    printf(\"Test 2: Testing server_id=3001, temperature=92\\\\n\");\\n    system(\"rmmod create_vars\");\\n    system(\"insmod /lib/modules/create_vars.ko server_id=3001 temperature=92\");\\n    \\n    printf(\"SUCCESS: Dynamic test completed\\\\n\");\\n    printf(\"PASS: Variable usage detected\\\\n\");\\n    printf(\"PASS: Module parameters work\\\\n\");\\n    return 0;\\n}"
                    }
                ],
                "setupCommands": [
                    "echo 'Starting dynamic variable testing'"
                ],
                "testCommands": [
                    "/bin/variable_tester",
                    "echo 'Checking kernel output for dynamic values'",
                    "dmesg | grep 'Server 2001' && echo 'PASS: 2001 test worked' || echo 'FAIL: 2001 test failed'",
                    "dmesg | grep 'Temp 85' && echo 'PASS: 85 test worked' || echo 'FAIL: 85 test failed'",
                    "dmesg | grep 'Server 3001' && echo 'PASS: 3001 test worked' || echo 'FAIL: 3001 test failed'",
                    "dmesg | grep 'Temp 92' && echo 'PASS: 92 test worked' || echo 'FAIL: 92 test failed'"
                ],
                "expected": {
                    "dmesg": [
                        "Variable creation module loaded",
                        "Server 2001: Status R, Temp 85, Online: 1",
                        "Server 3001: Status R, Temp 92, Online: 1"
                    ],
                    "stdout": [
                        "Dynamic Variable Test",
                        "SUCCESS: Dynamic test completed",
                        "PASS: Variable usage detected",
                        "PASS: Module parameters work"
                    ]
                },
                "timeout": 45
            }
        }
    ]
});


// Problem 7: Function Parameters - Advanced Dynamic Testing
generatedTestDefinitions.set(7, {
    "name": "Function Parameters - Advanced Dynamic Testing",
    "category": "foundations",
    "description": "Master function parameters and return values with dynamic testing! Create functions that work with changing input values - the system will test your functions with different parameters to ensure they work correctly, not just with hardcoded values.",
    "exactRequirements": {
        "functionNames": [
            "functions_init",
            "functions_exit",
            "add_numbers",
            "print_calculation",
            "is_even"
        ],
        "variables": [
            {
                "name": "first",
                "type": "int",
                "value": 15
            },
            {
                "name": "second",
                "type": "int",
                "value": 25
            }
        ],
        "outputMessages": [
            "Function parameters module loaded",
            "15 + 25 = 40",
            "Sum is even: 1"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h"
        ],
        "mustContain": [
            "int add_numbers(int a, int b)",
            "void print_calculation(int num1, int num2, int result)",
            "bool is_even(int number)",
            "return a + b",
            "number % 2 == 0",
            "add_numbers(first, second)"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_declarations",
            "name": "Function Declarations in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int add_numbers(int a, int b)",
                "void print_calculation(int num1, int num2, int result)",
                "bool is_even(int number)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_implementations",
            "name": "Function Implementations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "return a + b",
                "return (number % 2 == 0)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_calls",
            "name": "Proper Function Calls",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "add_numbers(first, second)",
                "print_calculation(first, second, sum)",
                "is_even(sum)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "modulo_operator",
            "name": "Modulo Operator Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "number % 2"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "return_values",
            "name": "Proper Return Value Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "sum = add_numbers",
                "even_check = is_even"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int add_numbers(int a, int b)",
                "void print_calculation(int num1, int num2, int result)",
                "bool is_even(int number)",
                "static int __init functions_init(void)",
                "static void __exit functions_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Basic Output Messages",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Function parameters module loaded",
                    "exact": true
                },
                {
                    "pattern": "15 + 25 = 40",
                    "exact": true
                },
                {
                    "pattern": "Sum is even: 1",
                    "exact": true
                }
            ]
        },
        {
            "id": "advanced_function_testing",
            "name": "Advanced Function Parameter Testing",
            "type": "kernel_project_test",
            "critical": true,
            "testScenario": {
                "userspaceApps": [
                    {
                        "name": "function_tester",
                        "source": "#include <stdio.h>\\n#include <stdlib.h>\\n\\nint main() {\\n    printf(\"=== Dynamic Function Test ===\\\\n\");\\n    printf(\"Test 1: Testing first=10, second=30 (sum=40, even)\\\\n\");\\n    system(\"rmmod functions 2>/dev/null\");\\n    system(\"insmod /lib/modules/functions.ko first=10 second=30\");\\n    printf(\"Test 2: Testing first=7, second=8 (sum=15, odd)\\\\n\");\\n    system(\"rmmod functions\");\\n    system(\"insmod /lib/modules/functions.ko first=7 second=8\");\\n    printf(\"SUCCESS: Dynamic test completed\\\\n\");\\n    printf(\"PASS: Function parameters detected\\\\n\");\\n    printf(\"PASS: Module parameters work\\\\n\");\\n    return 0;\\n}"
                    }
                ],
                "setupCommands": [
                    "echo 'Starting comprehensive validation'",
                    "cp /lib/modules/functions.h /lib/modules/ 2>/dev/null"
                ],
                "testCommands": [
                    "echo 'Phase 1: Ultra-Fast TCC Header Validation'",
                    "echo 'Creating minimal kernel header stubs for TCC...'",
                    "mkdir -p /tmp/linux",
                    "echo '#define KERN_INFO' > /tmp/linux/kernel.h",
                    "echo '#define MODULE_LICENSE(x)' > /tmp/linux/module.h",
                    "echo '#define MODULE_AUTHOR(x)' >> /tmp/linux/module.h",
                    "echo '#define MODULE_DESCRIPTION(x)' >> /tmp/linux/module.h",
                    "echo '#define module_init(x)' >> /tmp/linux/module.h",
                    "echo '#define module_exit(x)' >> /tmp/linux/module.h",
                    "echo '#define __init' > /tmp/linux/init.h",
                    "echo '#define __exit' >> /tmp/linux/init.h",
                    "echo 'typedef int bool;' > /tmp/linux/types.h",
                    "echo 'Creating test file that includes student header...'",
                    "echo '#include \"/lib/modules/functions.h\"' > /tmp/test.c",
                    "echo 'int main() { add_numbers(1,2); print_calculation(1,2,3); is_even(4); return 0; }' >> /tmp/test.c",
                    "echo 'Running TCC validation...'",
                    "/usr/bin/tcc -I/tmp -Wimplicit-function-declaration -Werror -c /tmp/test.c -o /tmp/test.o 2>/tmp/tcc_error.log",
                    "TCC_EXIT_CODE=$?",
                    "if [ $TCC_EXIT_CODE -ne 0 ]; then echo 'FAIL: Function declarations missing or commented in header'; echo 'TCC Error Details:'; cat /tmp/tcc_error.log; exit 1; fi",
                    "echo 'PASS: All function declarations found in header file'",
                    "echo 'Phase 2: Dynamic Parameter Testing'",
                    "echo 'Marking start of dynamic tests for validation...'",
                    "echo 'DYNAMIC_TEST_START' > /tmp/test_marker",
                    "/bin/function_tester",
                    "echo 'Phase 3: Context-Aware Logic Validation'",
                    "echo 'Validating Test 1: first=10, second=30 (sum=40, should be even)'",
                    "dmesg | grep '10 + 30 = 40' && echo 'PASS: add_numbers(10,30) calculation correct' || { echo 'FAIL: add_numbers(10,30) calculation wrong or missing'; exit 1; }",
                    "dmesg | grep -A1 '10 + 30 = 40' | grep 'Sum is even: 1' && echo 'PASS: is_even(40) correctly identifies even number' || { echo 'FAIL: is_even(40) wrong - should return 1 for even number 40'; exit 1; }",
                    "echo 'Validating Test 2: first=7, second=8 (sum=15, should be odd)'",
                    "dmesg | grep '7 + 8 = 15' && echo 'PASS: add_numbers(7,8) calculation correct' || { echo 'FAIL: add_numbers(7,8) calculation wrong or missing'; exit 1; }",
                    "dmesg | grep -A1 '7 + 8 = 15' | grep 'Sum is even: 0' && echo 'PASS: is_even(15) correctly identifies odd number' || { echo 'FAIL: is_even(15) wrong - should return 0 for odd number 15'; exit 1; }",
                    "echo 'Phase 4: Cross-Validation (ensuring test-specific results are correct)'",
                    "echo 'Checking that 40 (even) produces Sum is even: 1'",
                    "TEST1_CORRECT=$(dmesg | grep -A1 '10 + 30 = 40' | grep -c 'Sum is even: 1')",
                    "echo 'Checking that 15 (odd) produces Sum is even: 0'",
                    "TEST2_CORRECT=$(dmesg | grep -A1 '7 + 8 = 15' | grep -c 'Sum is even: 0')",
                    "echo 'Test 1 correct results: '$TEST1_CORRECT' (expected: 1)'",
                    "echo 'Test 2 correct results: '$TEST2_CORRECT' (expected: 1)'",
                    "if [ $TEST1_CORRECT -eq 1 ] && [ $TEST2_CORRECT -eq 1 ]; then echo 'PASS: Both tests show correct even/odd logic'; else echo 'FAIL: Logic validation failed - Test 1: '$TEST1_CORRECT', Test 2: '$TEST2_CORRECT' (expected 1 each)'; exit 1; fi"
                ],
                "expected": {
                    "dmesg": [
                        "Function parameters module loaded",
                        "10 \\+ 30 = 40",
                        "Sum is even: 1",
                        "7 \\+ 8 = 15",
                        "Sum is even: 0"
                    ],
                    "stdout": [
                        "PASS: All function declarations found in header file",
                        "SUCCESS: Dynamic test completed",
                        "PASS: Both tests show correct even/odd logic"
                    ]
                },
                "timeout": 25
            }
        }
    ]
});


// Problem 8: Conditional Logic - Making Decisions
generatedTestDefinitions.set(8, {
    "name": "Conditional Logic - Making Decisions",
    "category": "foundations",
    "description": "Learn to make decisions in your code using if/else statements and comparison operators. This introduces logical thinking and decision-making patterns essential for kernel development where conditions determine code flow.",
    "exactRequirements": {
        "functionNames": [
            "conditions_init",
            "conditions_exit",
            "check_number_status"
        ],
        "variables": [
            {
                "name": "test_number",
                "type": "int",
                "value": 42
            }
        ],
        "outputMessages": [
            "Conditional logic module loaded",
            "Number 42 is positive",
            "Number -15 is negative",
            "Number 0 is zero"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h"
        ],
        "mustContain": [
            "int test_number = 42",
            "void check_number_status(int number)",
            "if (number > 0)",
            "else if (number < 0)",
            "else"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_declarations",
            "name": "Function Declarations in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void check_number_status(int number)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void check_number_status(int number)",
                "static int __init conditions_init(void)",
                "static void __exit conditions_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "advanced_conditional_testing",
            "name": "Advanced Conditional Logic with TCC Header Validation",
            "type": "kernel_project_test",
            "critical": true,
            "testScenario": {
                "userspaceApps": [
                    {
                        "name": "conditional_tester",
                        "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <time.h>\\n\\nint main() {\\n    printf(\"=== Dynamic Conditional Test ===\\\\n\");\\n    \\n    // Seed random number generator with current time\\n    srand(time(NULL));\\n    \\n    // Generate random test values within -100 to 100\\n    int positive_val = (rand() % 90) + 10;  // 10 to 99\\n    int negative_val = -((rand() % 90) + 10); // -99 to -10\\n    int zero_val = 0;  // Always test zero\\n    \\n    printf(\"Test 1: Testing positive number (%d)\\\\n\", positive_val);\\n    char cmd1[256];\\n    snprintf(cmd1, sizeof(cmd1), \"insmod /lib/modules/conditions.ko test_number=%d\", positive_val);\\n    system(\"rmmod conditions 2>/dev/null\");\\n    system(cmd1);\\n    \\n    printf(\"Test 2: Testing negative number (%d)\\\\n\", negative_val);\\n    char cmd2[256];\\n    snprintf(cmd2, sizeof(cmd2), \"insmod /lib/modules/conditions.ko test_number=%d\", negative_val);\\n    system(\"rmmod conditions\");\\n    system(cmd2);\\n    \\n    printf(\"Test 3: Testing zero (%d)\\\\n\", zero_val);\\n    system(\"rmmod conditions\");\\n    system(\"insmod /lib/modules/conditions.ko test_number=0\");\\n    \\n    printf(\"SUCCESS: Dynamic test completed\\\\n\");\\n    return 0;\\n}"
                    }
                ],
                "setupCommands": [
                    "echo 'Starting comprehensive conditional logic validation'"
                ],
                "testCommands": [
                    "echo 'Phase 1: Ultra-Fast TCC Header Validation'",
                    "echo 'Creating minimal kernel header stubs for TCC...'",
                    "mkdir -p /tmp/linux",
                    "echo '#define KERN_INFO' > /tmp/linux/kernel.h",
                    "echo '#define MODULE_LICENSE(x)' > /tmp/linux/module.h",
                    "echo '#define MODULE_AUTHOR(x)' >> /tmp/linux/module.h",
                    "echo '#define MODULE_DESCRIPTION(x)' >> /tmp/linux/module.h",
                    "echo '#define module_init(x)' >> /tmp/linux/module.h",
                    "echo '#define module_exit(x)' >> /tmp/linux/module.h",
                    "echo '#define __init' > /tmp/linux/init.h",
                    "echo '#define __exit' >> /tmp/linux/init.h",
                    "echo 'typedef int bool;' > /tmp/linux/types.h",
                    "echo 'Creating test file that includes student header...'",
                    "echo '#include \"/lib/modules/conditions.h\"' > /tmp/test.c",
                    "echo 'int main() { check_number_status(42); return 0; }' >> /tmp/test.c",
                    "echo 'Running TCC validation...'",
                    "/usr/bin/tcc -I/tmp -Wimplicit-function-declaration -Werror -c /tmp/test.c -o /tmp/test.o 2>/tmp/tcc_error.log",
                    "TCC_EXIT_CODE=$?",
                    "if [ $TCC_EXIT_CODE -ne 0 ]; then echo 'FAIL: Function declaration missing or commented in header'; echo 'TCC Error Details:'; cat /tmp/tcc_error.log; exit 1; fi",
                    "echo 'PASS: Function declaration found in header file'",
                    "echo 'Phase 2: Dynamic Parameter Testing'",
                    "/bin/conditional_tester > /tmp/test_output.log",
                    "cat /tmp/test_output.log",
                    "echo 'Phase 3: Dynamic Randomized Conditional Logic Validation'",
                    "echo 'Adding delay to ensure dmesg messages are written...'",
                    "sleep 1",
                    "echo 'Extracting random test values from output...'",
                    "POSITIVE_VAL=$(grep -o 'Testing positive number ([0-9]*)' /tmp/test_output.log | cut -d'(' -f2 | cut -d')' -f1)",
                    "NEGATIVE_VAL=$(grep -o 'Testing negative number (-[0-9]*)' /tmp/test_output.log | cut -d'(' -f2 | cut -d')' -f1)",
                    "echo 'Extracted positive value: '$POSITIVE_VAL",
                    "echo 'Extracted negative value: '$NEGATIVE_VAL",
                    "echo 'Random positive value: '$POSITIVE_VAL",
                    "echo 'Random negative value: '$NEGATIVE_VAL",
                    "echo 'Validating positive number logic with random value '$POSITIVE_VAL",
                    "dmesg | grep \"Number $POSITIVE_VAL is positive\" && echo 'PASS: Positive number logic correct' || echo 'FAIL: Positive number logic wrong'",
                    "echo 'Validating negative number logic with random value '$NEGATIVE_VAL",
                    "dmesg | grep \"Number $NEGATIVE_VAL is negative\" && echo 'PASS: Negative number logic correct' || echo 'FAIL: Negative number logic wrong'",
                    "echo 'Validating zero logic (0 should be zero)'",
                    "dmesg | grep 'Number 0 is zero' && echo 'PASS: Zero logic correct' || echo 'FAIL: Zero logic wrong'",
                    "echo 'All individual validations completed'",
                    "echo 'Phase 4: Dynamic Cross-Validation Consistency Check'",
                    "echo 'Checking that random test values produced correct results'",
                    "TEST_POSITIVE=$(dmesg | grep -c \"Number $POSITIVE_VAL is positive\")",
                    "TEST_NEGATIVE=$(dmesg | grep -c \"Number $NEGATIVE_VAL is negative\")",
                    "TEST_ZERO=$(dmesg | grep -c 'Number 0 is zero')",
                    "echo 'Test positive '$POSITIVE_VAL' results: '$TEST_POSITIVE' (expected: 1)'",
                    "echo 'Test negative '$NEGATIVE_VAL' results: '$TEST_NEGATIVE' (expected: 1)'",
                    "echo 'Test 0 zero results: '$TEST_ZERO' (expected: at least 1)'",
                    "if [ $TEST_POSITIVE -eq 1 ] && [ $TEST_NEGATIVE -eq 1 ] && [ $TEST_ZERO -ge 1 ]; then echo 'PASS: All conditional logic working correctly'; else echo 'FAIL: Conditional logic validation failed - Positive: '$TEST_POSITIVE', Negative: '$TEST_NEGATIVE', Zero: '$TEST_ZERO; fi"
                ],
                "expected": {
                    "dmesg": [
                        "Conditional logic module loaded",
                        "Number .* is positive",
                        "Number .* is negative",
                        "Number 0 is zero"
                    ],
                    "stdout": [
                        "PASS: Function declaration found in header file",
                        "SUCCESS: Dynamic test completed",
                        "PASS: All conditional logic working correctly"
                    ]
                },
                "timeout": 25
            }
        }
    ]
});


// Problem 9: Basic Loops - Study Loop Patterns
generatedTestDefinitions.set(9, {
    "name": "Basic Loops - Study Loop Patterns",
    "category": "foundations",
    "description": "Study complete working examples of for loops and iteration patterns. This demonstrates how loops are used in kernel development for processing data and implementing basic algorithms.",
    "exactRequirements": {
        "functionNames": [
            "loops_init",
            "loops_exit",
            "print_numbers",
            "calculate_sum"
        ],
        "variables": [
            {
                "name": "max_count",
                "type": "int",
                "value": 5
            },
            {
                "name": "sum_result",
                "type": "int",
                "value": 0
            }
        ],
        "outputMessages": [
            "Basic loops module loaded",
            "Count: 1",
            "Count: 2",
            "Count: 3",
            "Count: 4",
            "Count: 5",
            "Sum of 1 to 5 is: 15"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h"
        ],
        "mustContain": [
            "extern int max_count",
            "extern int sum_result",
            "int max_count = 5",
            "int sum_result = 0",
            "for (i = 1; i <= count; i++)",
            "for (i = 1; i <= n; i++)"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_declarations",
            "name": "Function Declarations in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_numbers(int count)",
                "int calculate_sum(int n)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_numbers(int count)",
                "int calculate_sum(int n)",
                "static int __init loops_init(void)",
                "static void __exit loops_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "advanced_loop_validation",
            "name": "Advanced Loop Pattern Validation with TCC Header Validation",
            "type": "kernel_project_test",
            "critical": true,
            "testScenario": {
                "userspaceApps": [
                    {
                        "name": "loop_tester",
                        "source": "#include <stdio.h>\\n#include <stdlib.h>\\n\\nint main() {\\n    printf(\"=== Loop Pattern Test ===\\\\n\");\\n    printf(\"SUCCESS: Loop test completed\\\\n\");\\n    return 0;\\n}"
                    }
                ],
                "setupCommands": [
                    "echo 'Starting loop pattern validation'"
                ],
                "testCommands": [
                    "echo 'Phase 1: Ultra-Fast TCC Header Validation'",
                    "echo 'Creating minimal kernel header stubs for TCC...'",
                    "mkdir -p /tmp/linux",
                    "echo '#define KERN_INFO' > /tmp/linux/kernel.h",
                    "echo '#define MODULE_LICENSE(x)' > /tmp/linux/module.h",
                    "echo '#define MODULE_AUTHOR(x)' >> /tmp/linux/module.h",
                    "echo '#define MODULE_DESCRIPTION(x)' >> /tmp/linux/module.h",
                    "echo '#define module_init(x)' >> /tmp/linux/module.h",
                    "echo '#define module_exit(x)' >> /tmp/linux/module.h",
                    "echo '#define __init' > /tmp/linux/init.h",
                    "echo '#define __exit' >> /tmp/linux/init.h",
                    "echo 'typedef int bool;' > /tmp/linux/types.h",
                    "echo 'Creating test file that includes student header...'",
                    "echo '#include \"/lib/modules/loops.h\"' > /tmp/test.c",
                    "echo 'int main() { print_numbers(5); calculate_sum(5); return 0; }' >> /tmp/test.c",
                    "echo 'Running TCC validation...'",
                    "/usr/bin/tcc -I/tmp -Wimplicit-function-declaration -Werror -c /tmp/test.c -o /tmp/test.o 2>/tmp/tcc_error.log",
                    "TCC_EXIT_CODE=$?",
                    "if [ $TCC_EXIT_CODE -ne 0 ]; then echo 'FAIL: Function declaration missing or commented in header'; echo 'TCC Error Details:'; cat /tmp/tcc_error.log; exit 1; fi",
                    "echo 'PASS: All function declarations found in header file'",
                    "echo 'Phase 2: Module Testing'",
                    "/bin/loop_tester"
                ],
                "expected": {
                    "dmesg": [
                        "Basic loops module loaded",
                        "Count: 1",
                        "Count: 2",
                        "Count: 3",
                        "Count: 4",
                        "Count: 5",
                        "Sum of 1 to 5 is: 15"
                    ],
                    "stdout": [
                        "PASS: All function declarations found in header file",
                        "SUCCESS: Loop test completed"
                    ]
                },
                "timeout": 20
            }
        }
    ]
});


// Problem 10: Basic Loops - Implement Loop Solutions
generatedTestDefinitions.set(10, {
    "name": "Basic Loops - Implement Loop Solutions",
    "category": "foundations",
    "description": "Implement your own loop-based solutions for iterative calculations and array processing. Apply the patterns you studied in Problem 9 to create functions that perform calculations and process data using loops.",
    "exactRequirements": {
        "functionNames": [
            "loops_impl_init",
            "loops_impl_exit",
            "print_reverse",
            "calculate_factorial",
            "multiply_array"
        ],
        "variables": [
            {
                "name": "numbers",
                "type": "int[]",
                "value": "{2, 4, 6, 8, 10, 12}"
            },
            {
                "name": "factorial_result",
                "type": "int",
                "value": 5
            },
            {
                "name": "product_result",
                "type": "int",
                "value": 6
            }
        ],
        "outputMessages": [
            "Loop implementation module loaded",
            "Array in reverse order:",
            "Position 5: 12",
            "Position 4: 10",
            "Position 3: 8",
            "Position 2: 6",
            "Position 1: 4",
            "Position 0: 2",
            "Factorial of 5: 120",
            "Product of array: 46080"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h"
        ],
        "mustContain": [
            "#define ARRAY_SIZE 6",
            "int numbers[ARRAY_SIZE]",
            "for.*i.*=.*size.*-.*1.*i.*>=.*0.*i--",
            "for.*i.*=.*1.*i.*<=.*n.*i\\+\\+"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_declarations",
            "name": "Function Declarations in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_reverse(int arr[], int size)",
                "int calculate_factorial(int n)",
                "int multiply_array(int arr[], int size)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_reverse(int arr[], int size)",
                "int calculate_factorial(int n)",
                "int multiply_array(int arr[], int size)",
                "static int __init loops_impl_init(void)",
                "static void __exit loops_impl_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "advanced_loop_implementation_validation",
            "name": "Advanced Loop Implementation with TCC Header Validation",
            "type": "kernel_project_test",
            "critical": true,
            "testScenario": {
                "userspaceApps": [
                    {
                        "name": "loop_impl_tester",
                        "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <time.h>\\n\\nint main() {\\n    printf(\"=== Dynamic Loop Implementation Test ===\\\\n\");\\n    \\n    // Seed random number generator\\n    srand(time(NULL));\\n    \\n    // Generate random test values\\n    int factorial_n = (rand() % 6) + 3;  // 3 to 8 for reasonable factorial\\n    int array_size = (rand() % 3) + 4;   // 4 to 6 elements\\n    \\n    printf(\"Test 1: Factorial calculation for n=%d\\\\n\", factorial_n);\\n    char cmd1[256];\\n    snprintf(cmd1, sizeof(cmd1), \"insmod /lib/modules/loops_impl.ko factorial_result=%d\", factorial_n);\\n    system(\"rmmod loops_impl 2>/dev/null\");\\n    system(cmd1);\\n    \\n    printf(\"Test 2: Array processing with %d elements\\\\n\", array_size);\\n    char cmd2[256];\\n    snprintf(cmd2, sizeof(cmd2), \"insmod /lib/modules/loops_impl.ko product_result=%d\", array_size);\\n    system(\"rmmod loops_impl\");\\n    system(cmd2);\\n    \\n    printf(\"SUCCESS: Dynamic loop test completed\\\\n\");\\n    return 0;\\n}"
                    }
                ],
                "setupCommands": [
                    "echo 'Starting advanced loop implementation validation'"
                ],
                "testCommands": [
                    "echo 'Phase 1: Ultra-Fast TCC Header Validation'",
                    "echo 'Creating minimal kernel header stubs for TCC...'",
                    "mkdir -p /tmp/linux",
                    "echo '#define KERN_INFO' > /tmp/linux/kernel.h",
                    "echo '#define MODULE_LICENSE(x)' > /tmp/linux/module.h",
                    "echo '#define MODULE_AUTHOR(x)' >> /tmp/linux/module.h",
                    "echo '#define MODULE_DESCRIPTION(x)' >> /tmp/linux/module.h",
                    "echo '#define module_init(x)' >> /tmp/linux/module.h",
                    "echo '#define module_exit(x)' >> /tmp/linux/module.h",
                    "echo '#define __init' > /tmp/linux/init.h",
                    "echo '#define __exit' >> /tmp/linux/init.h",
                    "echo 'typedef int bool;' > /tmp/linux/types.h",
                    "echo 'Creating test file that includes student header...'",
                    "echo '#include \"/lib/modules/loops_impl.h\"' > /tmp/test.c",
                    "echo 'int main() { print_reverse((int[]){1,2,3}, 3); calculate_factorial(5); multiply_array((int[]){1,2}, 2); return 0; }' >> /tmp/test.c",
                    "echo 'Running TCC validation...'",
                    "/usr/bin/tcc -I/tmp -Wimplicit-function-declaration -Werror -c /tmp/test.c -o /tmp/test.o 2>/tmp/tcc_error.log",
                    "TCC_EXIT_CODE=$?",
                    "if [ $TCC_EXIT_CODE -ne 0 ]; then echo 'FAIL: Function declaration missing or commented in header'; echo 'TCC Error Details:'; cat /tmp/tcc_error.log; exit 1; fi",
                    "echo 'PASS: All function declarations found in header file'",
                    "echo 'Phase 2: Dynamic Implementation Testing'",
                    "/bin/loop_impl_tester > /tmp/test_output.log",
                    "cat /tmp/test_output.log",
                    "echo 'Phase 3: Dynamic Value Extraction and Validation'",
                    "echo 'Adding delay to ensure dmesg messages are written...'",
                    "sleep 1",
                    "echo 'Extracting random test values from output...'",
                    "FACTORIAL_N=$(grep -o 'Factorial calculation for n=[0-9]*' /tmp/test_output.log | cut -d'=' -f2)",
                    "ARRAY_SIZE_TEST=$(grep -o 'Array processing with [0-9]* elements' /tmp/test_output.log | cut -d' ' -f4)",
                    "echo 'Random factorial value: '$FACTORIAL_N",
                    "echo 'Random array size: '$ARRAY_SIZE_TEST",
                    "echo 'Validating factorial calculation for n='$FACTORIAL_N",
                    "dmesg | grep \"Factorial of $FACTORIAL_N:\" && echo 'PASS: Factorial calculation correct' || echo 'FAIL: Factorial calculation wrong'",
                    "echo 'Validating array processing for size='$ARRAY_SIZE_TEST",
                    "dmesg | grep \"Product of first $ARRAY_SIZE_TEST elements:\" && echo 'PASS: Array processing correct' || echo 'FAIL: Array processing wrong'",
                    "echo 'Validating reverse array output'",
                    "dmesg | grep 'Array in reverse order:' && echo 'PASS: Reverse array output found' || echo 'FAIL: Reverse array output missing'",
                    "echo 'All dynamic validations completed'"
                ],
                "expected": {
                    "dmesg": [
                        "Loop implementation module loaded",
                        "Array in reverse order:",
                        "Position .* .*",
                        "Factorial of .* .*",
                        "Product of first .* elements: .*"
                    ],
                    "stdout": [
                        "PASS: All function declarations found in header file",
                        "SUCCESS: Dynamic loop test completed",
                        "PASS: Factorial calculation correct",
                        "PASS: Array processing correct",
                        "PASS: Reverse array output found"
                    ]
                },
                "timeout": 25
            }
        }
    ]
});


// Problem 11: Arrays and Collections - Study Complete Examples
generatedTestDefinitions.set(11, {
    "name": "Arrays and Collections - Study Complete Examples",
    "category": "foundations",
    "description": "Study complete array implementations to understand how to store and manage multiple values. This introduces data collection patterns essential for kernel development where you often need to manage lists of devices, buffers, or other resources. Observe the patterns before implementing them yourself.",
    "exactRequirements": {
        "functionNames": [
            "arrays_study_init",
            "arrays_study_exit",
            "print_all_devices",
            "find_max_device_id",
            "calculate_id_sum",
            "check_device_exists"
        ],
        "variables": [
            {
                "name": "device_ids",
                "type": "int[]",
                "value": "{101, 205, 150, 320, 180, 275}"
            },
            {
                "name": "device_count",
                "type": "int",
                "value": 6
            }
        ],
        "outputMessages": [
            "Arrays study module loaded",
            "Studying array operations with 6 devices",
            "Device listing:",
            "Device 1: ID 101",
            "Device 2: ID 205",
            "Device 3: ID 150",
            "Device 4: ID 320",
            "Device 5: ID 180",
            "Device 6: ID 275",
            "Highest device ID: 320",
            "Total sum of device IDs: 1231",
            "Device 205 found: Yes",
            "Device 999 found: No"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h"
        ],
        "mustContain": [
            "#define MAX_DEVICES 6",
            "int device_ids[MAX_DEVICES]",
            "module_param_array(device_ids, int, &device_count, 0644)"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_declarations",
            "name": "Function Declarations in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_all_devices(void)",
                "int find_max_device_id(void)",
                "int calculate_id_sum(void)",
                "bool check_device_exists(int)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_all_devices(void)",
                "int find_max_device_id(void)",
                "int calculate_id_sum(void)",
                "bool check_device_exists(int target_id)",
                "static int __init arrays_study_init(void)",
                "static void __exit arrays_study_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Expected Study Output",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Arrays study module loaded",
                    "exact": true
                },
                {
                    "pattern": "Studying array operations with 6 devices",
                    "exact": true
                },
                {
                    "pattern": "Device listing:",
                    "exact": true
                },
                {
                    "pattern": "Device 1: ID 101",
                    "exact": true
                },
                {
                    "pattern": "Device 6: ID 275",
                    "exact": true
                },
                {
                    "pattern": "Highest device ID: 320",
                    "exact": true
                },
                {
                    "pattern": "Total sum of device IDs: 1231",
                    "exact": true
                },
                {
                    "pattern": "Device 205 found: Yes",
                    "exact": true
                },
                {
                    "pattern": "Device 999 found: No",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 12: Arrays and Collections - Implement Solutions
generatedTestDefinitions.set(12, {
    "name": "Arrays and Collections - Implement Solutions",
    "category": "foundations",
    "description": "Implement your own array-based solutions for managing multiple values. Apply the patterns you studied in Problem 11 to create functions that process arrays, find maximum values, and calculate statistics. This builds on the complete examples you observed.",
    "exactRequirements": {
        "functionNames": [
            "arrays_init",
            "arrays_exit",
            "print_all_grades",
            "find_highest_grade",
            "calculate_average"
        ],
        "variables": [
            {
                "name": "student_grades",
                "type": "int[]",
                "value": "{85, 92, 78, 96, 88}"
            },
            {
                "name": "grade_count",
                "type": "int",
                "value": 5
            }
        ],
        "outputMessages": [
            "Arrays module loaded",
            "Student grades:",
            "Grade 1: 85",
            "Grade 2: 92",
            "Grade 3: 78",
            "Grade 4: 96",
            "Grade 5: 88",
            "Highest grade: 96",
            "Average grade: 87"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h"
        ],
        "mustContain": [
            "#define MAX_GRADES 5",
            "extern int student_grades[MAX_GRADES]",
            "extern int grade_count",
            "int student_grades[MAX_GRADES] = {85, 92, 78, 96, 88}",
            "int grade_count = MAX_GRADES"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_declarations",
            "name": "Function Declarations in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_all_grades(void)",
                "int find_highest_grade(void)",
                "int calculate_average(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_all_grades(void)",
                "int find_highest_grade(void)",
                "int calculate_average(void)",
                "static int __init arrays_init(void)",
                "static void __exit arrays_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "advanced_array_implementation_validation",
            "name": "Advanced Array Implementation with TCC Header Validation",
            "type": "kernel_project_test",
            "critical": true,
            "testScenario": {
                "userspaceApps": [
                    {
                        "name": "array_impl_tester",
                        "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <time.h>\\n\\nint main() {\\n    printf(\"=== Dynamic Array Implementation Test ===\\\\n\");\\n    \\n    // Seed random number generator\\n    srand(time(NULL));\\n    \\n    // Generate random test arrays\\n    int grades1[3] = {(rand() % 40) + 60, (rand() % 40) + 60, (rand() % 40) + 60};  // 60-99 range\\n    int grades2[4] = {(rand() % 30) + 70, (rand() % 30) + 70, (rand() % 30) + 70, (rand() % 30) + 70};  // 70-99 range\\n    \\n    printf(\"Test 1: Array with %d,%d,%d\\\\n\", grades1[0], grades1[1], grades1[2]);\\n    char cmd1[256];\\n    snprintf(cmd1, sizeof(cmd1), \"insmod /lib/modules/arrays.ko student_grades=%d,%d,%d\", grades1[0], grades1[1], grades1[2]);\\n    system(\"rmmod arrays 2>/dev/null\");\\n    system(cmd1);\\n    \\n    printf(\"Test 2: Array with %d,%d,%d,%d\\\\n\", grades2[0], grades2[1], grades2[2], grades2[3]);\\n    char cmd2[256];\\n    snprintf(cmd2, sizeof(cmd2), \"insmod /lib/modules/arrays.ko student_grades=%d,%d,%d,%d\", grades2[0], grades2[1], grades2[2], grades2[3]);\\n    system(\"rmmod arrays\");\\n    system(cmd2);\\n    \\n    printf(\"SUCCESS: Dynamic array test completed\\\\n\");\\n    return 0;\\n}"
                    }
                ],
                "setupCommands": [
                    "echo 'Starting advanced array implementation validation'"
                ],
                "testCommands": [
                    "echo 'Phase 1: Ultra-Fast TCC Header Validation'",
                    "echo 'Creating minimal kernel header stubs for TCC...'",
                    "mkdir -p /tmp/linux",
                    "echo '#define KERN_INFO' > /tmp/linux/kernel.h",
                    "echo '#define MODULE_LICENSE(x)' > /tmp/linux/module.h",
                    "echo '#define MODULE_AUTHOR(x)' >> /tmp/linux/module.h",
                    "echo '#define MODULE_DESCRIPTION(x)' >> /tmp/linux/module.h",
                    "echo '#define module_init(x)' >> /tmp/linux/module.h",
                    "echo '#define module_exit(x)' >> /tmp/linux/module.h",
                    "echo '#define module_param_array(name, type, nump, perm)' >> /tmp/linux/module.h",
                    "echo '#define MODULE_PARM_DESC(var, desc)' >> /tmp/linux/module.h",
                    "echo '#define __init' > /tmp/linux/init.h",
                    "echo '#define __exit' >> /tmp/linux/init.h",
                    "echo 'typedef int bool;' > /tmp/linux/types.h",
                    "echo '#define true 1' >> /tmp/linux/types.h",
                    "echo '#define false 0' >> /tmp/linux/types.h",
                    "echo 'Creating test file that includes student header...'",
                    "echo '#include \"/lib/modules/arrays.h\"' > /tmp/test.c",
                    "echo 'int main() { print_all_grades(); find_highest_grade(); calculate_average(); return 0; }' >> /tmp/test.c",
                    "echo 'Running TCC validation...'",
                    "/usr/bin/tcc -I/tmp -Wimplicit-function-declaration -Werror -c /tmp/test.c -o /tmp/test.o 2>/tmp/tcc_error.log",
                    "TCC_EXIT_CODE=$?",
                    "if [ $TCC_EXIT_CODE -ne 0 ]; then echo 'FAIL: Function declaration missing or commented in header'; echo 'TCC Error Details:'; cat /tmp/tcc_error.log; exit 1; fi",
                    "echo 'PASS: All function declarations found in header file'",
                    "echo 'Phase 2: Dynamic Array Implementation Testing'",
                    "/bin/array_impl_tester > /tmp/test_output.log",
                    "cat /tmp/test_output.log",
                    "echo 'Phase 3: Dynamic Value Extraction and Validation'",
                    "echo 'Adding delay to ensure dmesg messages are written...'",
                    "sleep 1",
                    "echo 'Extracting random test values from output...'",
                    "TEST1_LINE=$(grep 'Test 1: Array with' /tmp/test_output.log)",
                    "TEST2_LINE=$(grep 'Test 2: Array with' /tmp/test_output.log)",
                    "echo 'Test 1 values: '$TEST1_LINE",
                    "echo 'Test 2 values: '$TEST2_LINE",
                    "echo 'Validating array processing output'",
                    "dmesg | grep 'Student grades:' && echo 'PASS: Array output found' || echo 'FAIL: Array output missing'",
                    "dmesg | grep 'Grade.*:.*[0-9]' && echo 'PASS: Grade enumeration working' || echo 'FAIL: Grade enumeration broken'",
                    "dmesg | grep 'Highest grade:.*[0-9]' && echo 'PASS: Maximum finding working' || echo 'FAIL: Maximum finding broken'",
                    "dmesg | grep 'Average grade:.*[0-9]' && echo 'PASS: Average calculation working' || echo 'FAIL: Average calculation broken'",
                    "echo 'All dynamic validations completed'"
                ],
                "expected": {
                    "dmesg": [
                        "Arrays module loaded",
                        "Student grades:",
                        "Grade .* .*",
                        "Highest grade: .*",
                        "Average grade: .*"
                    ],
                    "stdout": [
                        "PASS: All function declarations found in header file",
                        "SUCCESS: Dynamic array test completed",
                        "PASS: Array output found",
                        "PASS: Grade enumeration working",
                        "PASS: Maximum finding working",
                        "PASS: Average calculation working"
                    ]
                },
                "timeout": 30
            }
        }
    ]
});


// Problem 13: String Handling - Working with Text in Kernel
generatedTestDefinitions.set(13, {
    "name": "String Handling - Working with Text in Kernel",
    "category": "foundations",
    "description": "Learn to work with strings and character arrays in kernel space. This introduces text processing patterns essential for handling device names, user messages, and configuration data in kernel modules.",
    "exactRequirements": {
        "functionNames": [
            "strings_init",
            "strings_exit",
            "print_device_info",
            "get_string_length",
            "copy_device_name"
        ],
        "variables": [
            {
                "name": "device_name",
                "type": "char[]",
                "value": "\"my_device\""
            },
            {
                "name": "welcome_message",
                "type": "char[]",
                "value": "\"Welcome to kernel string handling!\""
            },
            {
                "name": "name_length",
                "type": "int",
                "value": 0
            }
        ],
        "outputMessages": [
            "String handling module loaded",
            "Device Name: my_device",
            "Name Length: 9",
            "Message: Welcome to kernel string handling!",
            "After name change:",
            "Device Name: updated_device",
            "Name Length: 14"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h",
            "linux/string.h"
        ],
        "mustContain": [
            "#define MAX_NAME_LEN 32",
            "#define MAX_MESSAGE_LEN 64",
            "extern char device_name[MAX_NAME_LEN]",
            "extern char welcome_message[MAX_MESSAGE_LEN]",
            "char device_name[MAX_NAME_LEN] = \"my_device\"",
            "char welcome_message[MAX_MESSAGE_LEN] = \"Welcome to kernel string handling!\""
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "string_declarations",
            "name": "String Array Declarations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "extern char device_name\\[MAX_NAME_LEN\\]",
                "extern char welcome_message\\[MAX_MESSAGE_LEN\\]",
                "#define MAX_NAME_LEN 32",
                "#define MAX_MESSAGE_LEN 64"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "string_initialization",
            "name": "String Initialization",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "char device_name\\[MAX_NAME_LEN\\].*=.*\"my_device\"",
                "char welcome_message\\[MAX_MESSAGE_LEN\\].*=.*\"Welcome to kernel string handling!\""
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "manual_string_operations",
            "name": "Manual String Length and Copy Functions",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "while.*str\\[len\\].*!=.*'\\\\0'",
                "len\\+\\+",
                "for.*i.*<.*MAX_NAME_LEN.*-.*1.*new_name\\[i\\].*!=.*'\\\\0'",
                "device_name\\[i\\].*=.*'\\\\0'"
            ],
            "prohibitedSymbols": [
                "strlen",
                "strcpy",
                "strncpy"
            ]
        },
        {
            "id": "string_format_usage",
            "name": "Proper String Format Specifier Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "Device Name.*%s.*device_name",
                "Message.*%s.*welcome_message",
                "Name Length.*%d.*name_length"
            ],
            "prohibitedSymbols": [
                "\"my_device\"",
                "\"updated_device\"",
                "9",
                "14"
            ]
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_device_info(void)",
                "int get_string_length(const char \\*str)",
                "void copy_device_name(const char \\*new_name)",
                "static int __init strings_init(void)",
                "static void __exit strings_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Messages",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "String handling module loaded",
                    "exact": true
                },
                {
                    "pattern": "Device Name: my_device",
                    "exact": true
                },
                {
                    "pattern": "Name Length: 9",
                    "exact": true
                },
                {
                    "pattern": "Message: Welcome to kernel string handling!",
                    "exact": true
                },
                {
                    "pattern": "After name change:",
                    "exact": true
                },
                {
                    "pattern": "Device Name: updated_device",
                    "exact": true
                },
                {
                    "pattern": "Name Length: 14",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 14: Basic Structures - Organizing Related Data
generatedTestDefinitions.set(14, {
    "name": "Basic Structures - Organizing Related Data",
    "category": "foundations",
    "description": "Learn to create and use basic structures to organize related data together. This introduces simple data modeling patterns essential for kernel development where structures represent system information.",
    "exactRequirements": {
        "functionNames": [
            "structures_init",
            "structures_exit",
            "print_student_info",
            "check_student_status"
        ],
        "variables": [
            {
                "name": "my_student",
                "type": "struct student",
                "value": "{.id = 12345, .name = \"Alice Smith\", .grade = 85, .passed = true}"
            }
        ],
        "outputMessages": [
            "Basic structures module loaded",
            "Student ID: 12345",
            "Student Name: Alice Smith",
            "Student Grade: 85",
            "Student Status: Passed"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h"
        ],
        "mustContain": [
            "struct student {",
            "extern struct student my_student",
            "struct student my_student = {",
            ".id = 12345",
            ".name = \"Alice Smith\"",
            ".grade = 85",
            ".passed = true"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "structure_definition",
            "name": "Structure Type Definition",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "struct student.*\\{",
                "int id;",
                "char name\\[MAX_NAME_LEN\\];",
                "int grade;",
                "bool passed;"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "structure_initialization",
            "name": "Structure Initialization with Designated Initializers",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "struct student my_student.*=.*\\{",
                "\\.id.*=.*12345",
                "\\.name.*=.*\"Alice Smith\"",
                "\\.grade.*=.*85",
                "\\.passed.*=.*true"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "structure_member_access",
            "name": "Direct Structure Member Access",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "my_student\\.id",
                "my_student\\.name",
                "my_student\\.grade",
                "my_student\\.passed"
            ],
            "prohibitedSymbols": [
                "my_student->",
                "pointer_access"
            ]
        },
        {
            "id": "conditional_with_struct",
            "name": "Using Structure Members in Conditionals",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "if.*my_student\\.passed"
            ],
            "prohibitedSymbols": [
                "true",
                "false",
                "hardcoded"
            ]
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_student_info(void)",
                "void check_student_status(void)",
                "static int __init structures_init(void)",
                "static void __exit structures_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Messages",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Basic structures module loaded",
                    "exact": true
                },
                {
                    "pattern": "Student ID: 12345",
                    "exact": true
                },
                {
                    "pattern": "Student Name: Alice Smith",
                    "exact": true
                },
                {
                    "pattern": "Student Grade: 85",
                    "exact": true
                },
                {
                    "pattern": "Student Status: Passed",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 15: Structure Pointers - Advanced Data Manipulation
generatedTestDefinitions.set(15, {
    "name": "Structure Pointers - Advanced Data Manipulation",
    "category": "foundations",
    "description": "Learn to work with pointers to structures and modify structure data through functions. This builds on basic structures and introduces essential pointer concepts needed for advanced kernel programming.",
    "exactRequirements": {
        "functionNames": [
            "struct_pointers_init",
            "struct_pointers_exit",
            "print_student_info",
            "print_device_info",
            "update_student_grade",
            "activate_device"
        ],
        "variables": [
            {
                "name": "test_student",
                "type": "struct student",
                "value": "{.id = 12345, .name = \"Alice Smith\", .grade = 85, .passed = true}"
            },
            {
                "name": "my_device",
                "type": "struct device_info",
                "value": "{.device_name = \"sensor01\", .device_id = 1001, .is_active = false, .data_count = 0}"
            }
        ],
        "outputMessages": [
            "Structure pointers module loaded",
            "Initial Student Information:",
            "Student ID: 12345",
            "Student Name: Alice Smith",
            "Student Grade: 85",
            "Student Status: Passed",
            "Initial Device Information:",
            "Device Name: sensor01",
            "Device ID: 1001",
            "Device Active: No",
            "Data Count: 0",
            "Updated Alice Smith grade to: 95",
            "Device sensor01 activated",
            "Updated Information:",
            "Student Grade: 95",
            "Device Active: Yes",
            "Data Count: 1"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h"
        ],
        "mustContain": [
            "struct device_info {",
            "extern struct student test_student",
            "extern struct device_info my_device",
            "struct device_info my_device = {",
            "&test_student",
            "&my_device"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "structure_definitions",
            "name": "Structure Type Definitions",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "struct device_info.*\\{",
                "char device_name\\[MAX_NAME_LEN\\];",
                "int device_id;",
                "bool is_active;",
                "int data_count;"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "pointer_function_parameters",
            "name": "Function Parameters with Structure Pointers",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "struct student \\*s",
                "struct device_info \\*dev",
                "int new_grade"
            ],
            "prohibitedSymbols": [
                "struct student s",
                "struct device_info dev"
            ]
        },
        {
            "id": "arrow_operator_usage",
            "name": "Arrow Operator for Pointer Member Access",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "s->id",
                "s->name",
                "s->grade",
                "s->passed",
                "dev->device_name",
                "dev->device_id",
                "dev->is_active",
                "dev->data_count"
            ],
            "prohibitedSymbols": [
                "s.id",
                "dev.device_name",
                "dot_access"
            ]
        },
        {
            "id": "address_of_operator",
            "name": "Address-of Operator for Passing Structure Pointers",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "&test_student",
                "&my_device"
            ],
            "prohibitedSymbols": [
                "test_student",
                "my_device"
            ]
        },
        {
            "id": "structure_modification",
            "name": "Structure Modification via Pointers",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "s->grade.*=.*new_grade",
                "s->passed.*=.*new_grade.*>=.*60",
                "dev->is_active.*=.*true",
                "dev->data_count.*=.*1"
            ],
            "prohibitedSymbols": [
                "95",
                "true",
                "1",
                "hardcoded"
            ]
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_student_info(struct student \\*s)",
                "void print_device_info(struct device_info \\*dev)",
                "void update_student_grade(struct student \\*s, int new_grade)",
                "void activate_device(struct device_info \\*dev)",
                "static int __init struct_pointers_init(void)",
                "static void __exit struct_pointers_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Messages",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Structure pointers module loaded",
                    "exact": true
                },
                {
                    "pattern": "Initial Student Information:",
                    "exact": true
                },
                {
                    "pattern": "Student ID: 12345",
                    "exact": true
                },
                {
                    "pattern": "Student Name: Alice Smith",
                    "exact": true
                },
                {
                    "pattern": "Student Grade: 85",
                    "exact": true
                },
                {
                    "pattern": "Student Status: Passed",
                    "exact": true
                },
                {
                    "pattern": "Initial Device Information:",
                    "exact": true
                },
                {
                    "pattern": "Device Name: sensor01",
                    "exact": true
                },
                {
                    "pattern": "Device ID: 1001",
                    "exact": true
                },
                {
                    "pattern": "Device Active: No",
                    "exact": true
                },
                {
                    "pattern": "Data Count: 0",
                    "exact": true
                },
                {
                    "pattern": "Updated Alice Smith grade to: 95",
                    "exact": true
                },
                {
                    "pattern": "Device sensor01 activated",
                    "exact": true
                },
                {
                    "pattern": "Updated Information:",
                    "exact": true
                },
                {
                    "pattern": "Student Grade: 95",
                    "exact": true
                },
                {
                    "pattern": "Device Active: Yes",
                    "exact": true
                },
                {
                    "pattern": "Data Count: 1",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 80: Simple Driver - File Creation Challenge
generatedTestDefinitions.set(80, {
    "name": "Simple Driver - File Creation Challenge",
    "category": "drivers",
    "description": "Create a simple kernel driver by implementing missing files. You are given a partial driver structure and need to create the missing source and header files to complete the driver implementation.",
    "exactRequirements": {
        "functionNames": [
            "device_init",
            "device_cleanup",
            "simple_driver_init",
            "simple_driver_exit"
        ],
        "variables": [],
        "outputMessages": [
            "simple_driver: loaded successfully",
            "simple_driver: unloaded"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/fs.h",
            "linux/cdev.h"
        ],
        "mustContain": [
            "alloc_chrdev_region",
            "cdev_init",
            "cdev_add",
            "class_create",
            "device_create"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_declarations",
            "name": "Function Declarations in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int device_init(struct simple_driver_data *driver_data)",
                "void device_cleanup(struct simple_driver_data *driver_data)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int device_init(struct simple_driver_data *driver_data)",
                "void device_cleanup(struct simple_driver_data *driver_data)",
                "static int __init simple_driver_init(void)",
                "static void __exit simple_driver_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "driver_functionality",
            "name": "Driver Functionality Test",
            "type": "kernel_project_test",
            "critical": true,
            "testScenario": {
                "userspaceApps": [
                    {
                        "name": "device_tester",
                        "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <fcntl.h>\\n#include <unistd.h>\\n#include <string.h>\\n\\n#define DEVICE_PATH \"/dev/simpledev\"\\n\\nint main() {\\n    int fd;\\n    char buffer[256];\\n    ssize_t bytes;\\n    \\n    printf(\"=== Simple Driver Test ===\\\\n\");\\n    \\n    fd = open(DEVICE_PATH, O_RDWR);\\n    if (fd < 0) {\\n        printf(\"INFO: Device not found (this is expected in basic test)\\\\n\");\\n        return 0;\\n    }\\n    \\n    printf(\"SUCCESS: Device opened\\\\n\");\\n    \\n    bytes = write(fd, \"test\", 4);\\n    if (bytes > 0) {\\n        printf(\"SUCCESS: Written %zd bytes\\\\n\", bytes);\\n    }\\n    \\n    close(fd);\\n    printf(\"SUCCESS: Driver test completed\\\\n\");\\n    return 0;\\n}"
                    }
                ],
                "setupCommands": [
                    "echo 'Setting up simple driver test'",
                    "mkdir -p /dev"
                ],
                "testCommands": [
                    "echo 'Creating device node...'",
                    "major=$(grep simpledev /proc/devices | cut -d' ' -f1)",
                    "if [ -z \"$major\" ]; then echo 'ERROR: simpledev not found'; exit 1; fi",
                    "mknod /dev/simpledev c $major 0",
                    "chmod 666 /dev/simpledev",
                    "echo 'Running driver test'",
                    "/bin/device_tester",
                    "echo 'Checking driver registration'",
                    "grep simple_driver /proc/modules 2>/dev/null || echo 'Driver loaded successfully'"
                ],
                "expected": {
                    "dmesg": [
                        "simple_driver.*loaded successfully",
                        "simple_driver.*unloaded"
                    ],
                    "stdout": [
                        "Simple Driver Test",
                        "SUCCESS: Driver test completed"
                    ]
                },
                "timeout": 30
            }
        }
    ]
});


module.exports = generatedTestDefinitions;
