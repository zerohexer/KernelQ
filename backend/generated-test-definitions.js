// Auto-generated from problems/ directory
// DO NOT EDIT THIS FILE DIRECTLY - Edit problems/*.json instead
// Generated at: 2025-08-17T10:27:38.741Z

const generatedTestDefinitions = new Map();


// Problem 1: Hello World - Multi-File Kernel Module
generatedTestDefinitions.set(1, {
    "name": "Hello World - Multi-File Kernel Module",
    "category": "foundations",
    "description": "Create your first multi-file kernel module with a separate header file. This introduces you to kernel module structure with proper file organization. Note: Module init/exit functions are static and don't need header declarations.",
    "exactRequirements": {
        "functionNames": [
            "hello_init",
            "hello_exit"
        ],
        "outputMessages": [
            "Hello from multi-file kernel module!",
            "Goodbye from multi-file kernel module!"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "printk",
            "KERN_INFO"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "header_structure",
            "name": "Header File Structure",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "#ifndef HELLO_H",
                "#define HELLO_H",
                "#endif"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_declarations",
            "name": "Function Declarations in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [],
            "prohibitedSymbols": [
                "static.*hello_init",
                "static.*hello_exit"
            ]
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "static int __init hello_init(void)",
                "static void __exit hello_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Messages",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Hello from multi-file kernel module!",
                    "exact": true
                },
                {
                    "pattern": "Goodbye from multi-file kernel module!",
                    "exact": true
                }
            ]
        },
        {
            "id": "module_info",
            "name": "Module Information",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "MODULE_LICENSE",
                "MODULE_AUTHOR",
                "MODULE_DESCRIPTION"
            ],
            "prohibitedSymbols": []
        }
    ]
});


// Problem 2: Create Your First Variable
generatedTestDefinitions.set(2, {
    "name": "Create Your First Variable",
    "category": "foundations",
    "description": "Learn to create variables in kernel modules using proper file structure. You'll work with separate header and C files - a fundamental practice in professional kernel development that builds good coding habits from day one.",
    "exactRequirements": {
        "functionNames": [
            "variables_init",
            "variables_exit"
        ],
        "variables": [
            {
                "name": "my_number",
                "type": "int",
                "value": 42
            }
        ],
        "outputMessages": [
            "Variables module loaded"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "#ifndef VARIABLES_H",
            "#define VARIABLES_H",
            "extern int my_number",
            "int my_number = 42",
            "#include \"variables.h\""
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "header_guards",
            "name": "Proper Header Guards",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "#ifndef VARIABLES_H",
                "#define VARIABLES_H",
                "#endif"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "variable_declaration",
            "name": "Variable Declaration in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "extern int my_number"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "variable_definition",
            "name": "Variable Definition in C File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int my_number = 42"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "header_inclusion",
            "name": "Include Own Header First",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "#include \"variables.h\""
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "static int __init variables_init(void)",
                "static void __exit variables_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Message",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Variables module loaded",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 3: Use Your Variable
generatedTestDefinitions.set(3, {
    "name": "Use Your Variable",
    "category": "foundations",
    "description": "Learn to use variables by printing them with proper format specifiers. Build on your knowledge of header/C file structure while introducing printk formatting - a crucial skill for kernel debugging.",
    "exactRequirements": {
        "functionNames": [
            "use_vars_init",
            "use_vars_exit",
            "print_my_number"
        ],
        "variables": [
            {
                "name": "my_number",
                "type": "int",
                "value": 42
            }
        ],
        "outputMessages": [
            "Variable usage module loaded",
            "My number is: 42"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "void print_my_number(void)",
            "printk(KERN_INFO \"My number is: %d\\n\", my_number)",
            "print_my_number()"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_implementation",
            "name": "Function Implementation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_my_number(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "format_specifier",
            "name": "Correct Format Specifier Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "%d",
                "my_number"
            ],
            "prohibitedSymbols": [
                "%s",
                "%c"
            ]
        },
        {
            "id": "function_call",
            "name": "Function Call in Init",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "print_my_number()"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_my_number(void)",
                "static int __init use_var_init(void)",
                "static void __exit use_var_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Messages",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Variable usage module loaded",
                    "exact": true
                },
                {
                    "pattern": "My number is: 42",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 4: Multiple Variables and Data Types
generatedTestDefinitions.set(4, {
    "name": "Multiple Variables and Data Types",
    "category": "foundations",
    "description": "Work with multiple variables of different data types (int, char, bool) in a well-structured kernel module. Learn to manage different data types and their corresponding format specifiers while maintaining clean code organization.",
    "exactRequirements": {
        "functionNames": [
            "multi_vars_init",
            "multi_vars_exit",
            "print_student_info"
        ],
        "variables": [
            {
                "name": "student_id",
                "type": "int",
                "value": 12345
            },
            {
                "name": "student_grade",
                "type": "char",
                "value": "'A'"
            },
            {
                "name": "student_passed",
                "type": "bool",
                "value": true
            }
        ],
        "outputMessages": [
            "Multi-variable module loaded",
            "Student ID: 12345",
            "Student Grade: A",
            "Student Passed: 1"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h"
        ],
        "mustContain": [
            "extern int student_id",
            "extern char student_grade",
            "extern bool student_passed",
            "int student_id = 12345",
            "char student_grade = 'A'",
            "bool student_passed = true"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "multiple_declarations",
            "name": "Multiple Variable Declarations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "extern int student_id",
                "extern char student_grade",
                "extern bool student_passed"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "multiple_definitions",
            "name": "Multiple Variable Definitions",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int student_id = 12345",
                "char student_grade = 'A'",
                "bool student_passed = true"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "printk_format_usage",
            "name": "Proper printk Format Specifier Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "Student ID.*%d.*student_id",
                "Student Grade.*%c.*student_grade",
                "Student Passed.*%d.*student_passed"
            ],
            "prohibitedSymbols": [
                "12345",
                "'A'",
                "true",
                "\"%s\""
            ]
        },
        {
            "id": "function_structure",
            "name": "Print Function Implementation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_student_info(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_student_info(void)",
                "static int __init multi_vars_init(void)",
                "static void __exit multi_vars_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Messages",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Multi-variable module loaded",
                    "exact": true
                },
                {
                    "pattern": "Student ID: 12345",
                    "exact": true
                },
                {
                    "pattern": "Student Grade: A",
                    "exact": true
                },
                {
                    "pattern": "Student Passed: 1",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 5: Function Parameters and Return Values
generatedTestDefinitions.set(5, {
    "name": "Function Parameters and Return Values",
    "category": "foundations",
    "description": "Learn to create functions that accept parameters and return values. This introduces function design patterns commonly used in kernel development, building towards more complex kernel programming concepts.",
    "exactRequirements": {
        "functionNames": [
            "functions_init",
            "functions_exit",
            "add_numbers",
            "print_calculation",
            "is_even"
        ],
        "variables": [
            {
                "name": "first",
                "type": "int",
                "value": 15
            },
            {
                "name": "second",
                "type": "int",
                "value": 25
            }
        ],
        "outputMessages": [
            "Function parameters module loaded",
            "15 + 25 = 40",
            "Sum is even: 1"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h"
        ],
        "mustContain": [
            "int add_numbers(int a, int b)",
            "void print_calculation(int num1, int num2, int result)",
            "bool is_even(int number)",
            "return a + b",
            "number % 2 == 0",
            "add_numbers(first, second)"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_declarations",
            "name": "Function Declarations in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int add_numbers(int a, int b)",
                "void print_calculation(int num1, int num2, int result)",
                "bool is_even(int number)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_implementations",
            "name": "Function Implementations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "return a + b",
                "return (number % 2 == 0)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_calls",
            "name": "Proper Function Calls",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "add_numbers(first, second)",
                "print_calculation(first, second, sum)",
                "is_even(sum)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "modulo_operator",
            "name": "Modulo Operator Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "number % 2"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "return_values",
            "name": "Proper Return Value Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "sum = add_numbers",
                "even_check = is_even"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int add_numbers(int a, int b)",
                "void print_calculation(int num1, int num2, int result)",
                "bool is_even(int number)",
                "static int __init functions_init(void)",
                "static void __exit functions_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Messages",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Function parameters module loaded",
                    "exact": true
                },
                {
                    "pattern": "15 + 25 = 40",
                    "exact": true
                },
                {
                    "pattern": "Sum is even: 1",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 80: Simple Driver - File Creation Challenge
generatedTestDefinitions.set(80, {
    "name": "Simple Driver - File Creation Challenge",
    "category": "drivers",
    "description": "Create a simple kernel driver by implementing missing files. You are given a partial driver structure and need to create the missing source and header files to complete the driver implementation.",
    "exactRequirements": {
        "functionNames": [
            "device_init",
            "device_cleanup",
            "simple_driver_init",
            "simple_driver_exit"
        ],
        "variables": [],
        "outputMessages": [
            "simple_driver: loaded successfully",
            "simple_driver: unloaded"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/fs.h",
            "linux/cdev.h"
        ],
        "mustContain": [
            "alloc_chrdev_region",
            "cdev_init",
            "cdev_add",
            "class_create",
            "device_create"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_declarations",
            "name": "Function Declarations in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int device_init(struct simple_driver_data *data)",
                "void device_cleanup(struct simple_driver_data *data)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_signatures_source",
            "name": "Function Signatures in Source File",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int device_init(struct simple_driver_data *data)",
                "void device_cleanup(struct simple_driver_data *data)",
                "static int __init simple_driver_init(void)",
                "static void __exit simple_driver_exit(void)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "driver_functionality",
            "name": "Driver Functionality Test",
            "type": "kernel_project_test",
            "critical": true,
            "testScenario": {
                "userspaceApps": [
                    {
                        "name": "device_tester",
                        "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <fcntl.h>\\n#include <unistd.h>\\n#include <string.h>\\n\\n#define DEVICE_PATH \"/dev/simpledev\"\\n\\nint main() {\\n    int fd;\\n    char buffer[256];\\n    ssize_t bytes;\\n    \\n    printf(\"=== Simple Driver Test ===\\\\n\");\\n    \\n    fd = open(DEVICE_PATH, O_RDWR);\\n    if (fd < 0) {\\n        printf(\"INFO: Device not found (this is expected in basic test)\\\\n\");\\n        return 0;\\n    }\\n    \\n    printf(\"SUCCESS: Device opened\\\\n\");\\n    \\n    bytes = write(fd, \"test\", 4);\\n    if (bytes > 0) {\\n        printf(\"SUCCESS: Written %zd bytes\\\\n\", bytes);\\n    }\\n    \\n    close(fd);\\n    printf(\"SUCCESS: Driver test completed\\\\n\");\\n    return 0;\\n}"
                    }
                ],
                "setupCommands": [
                    "echo 'Setting up simple driver test'",
                    "mkdir -p /dev"
                ],
                "testCommands": [
                    "echo 'Creating device node...'",
                    "major=$(grep simpledev /proc/devices | cut -d' ' -f1)",
                    "if [ -z \"$major\" ]; then echo 'ERROR: simpledev not found'; exit 1; fi",
                    "mknod /dev/simpledev c $major 0",
                    "chmod 666 /dev/simpledev",
                    "echo 'Running driver test'",
                    "/bin/device_tester",
                    "echo 'Checking driver registration'",
                    "grep simple_driver /proc/modules 2>/dev/null || echo 'Driver loaded successfully'"
                ],
                "expected": {
                    "dmesg": [
                        "simple_driver.*loaded successfully",
                        "simple_driver.*unloaded"
                    ],
                    "stdout": [
                        "Simple Driver Test",
                        "SUCCESS: Driver test completed"
                    ]
                },
                "timeout": 30
            }
        }
    ]
});


module.exports = generatedTestDefinitions;
