// Auto-generated from problems/ directory
// DO NOT EDIT THIS FILE DIRECTLY - Edit problems/*.json instead
// Generated at: 2025-07-18T19:59:10.457Z

const generatedTestDefinitions = new Map();


// Problem 1: Hello World - Multi-File Kernel Module
generatedTestDefinitions.set(1, {
    "name": "Hello World - Multi-File Kernel Module",
    "category": "foundations",
    "description": "Create your first multi-file kernel module with a separate header file. This introduces you to kernel module structure with proper file organization. Note: Module init/exit functions are static and don't need header declarations.",
    "exactRequirements": {
        "functionNames": [
            "hello_init",
            "hello_exit"
        ],
        "outputMessages": [
            "Hello from multi-file kernel module!",
            "Goodbye from multi-file kernel module!"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "printk",
            "KERN_INFO"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "header_structure",
            "name": "Header File Structure",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "#ifndef HELLO_H",
                "#define HELLO_H",
                "#endif"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_declarations",
            "name": "Function Declarations in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "#ifndef HELLO_H",
                "#define HELLO_H"
            ],
            "prohibitedSymbols": [
                "static.*hello_init",
                "static.*hello_exit"
            ]
        },
        {
            "id": "exact_output",
            "name": "Exact Output Messages",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Hello from multi-file kernel module!",
                    "exact": true
                },
                {
                    "pattern": "Goodbye from multi-file kernel module!",
                    "exact": true
                }
            ]
        },
        {
            "id": "module_info",
            "name": "Module Information",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "MODULE_LICENSE",
                "MODULE_AUTHOR",
                "MODULE_DESCRIPTION"
            ],
            "prohibitedSymbols": []
        }
    ]
});


// Problem 2: Variables and Data Types
generatedTestDefinitions.set(2, {
    "name": "Variables and Data Types",
    "category": "foundations",
    "description": "Learn to work with different data types in kernel space. Create variables of different types, define them in a header file, and print their values using printk. This introduces kernel-space variable declaration and proper file organization.",
    "exactRequirements": {
        "functionNames": [
            "variables_init",
            "variables_exit"
        ],
        "variables": [
            {
                "name": "my_int",
                "type": "int",
                "value": 42
            },
            {
                "name": "my_char",
                "type": "char",
                "value": "'K'"
            },
            {
                "name": "my_bool",
                "type": "bool",
                "value": true
            }
        ],
        "outputMessages": [
            "Integer: 42",
            "Character: K",
            "Boolean: 1"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/types.h"
        ],
        "mustContain": [
            "printk",
            "KERN_INFO",
            "extern"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "header_declarations",
            "name": "Header Variable Declarations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "extern int my_int",
                "extern char my_char",
                "extern bool my_bool"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "source_definitions",
            "name": "Source Variable Definitions",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int my_int = 42",
                "char my_char = 'K'",
                "bool my_bool = true"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Format",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Integer: 42",
                    "exact": true
                },
                {
                    "pattern": "Character: K",
                    "exact": true
                },
                {
                    "pattern": "Boolean: 1",
                    "exact": true
                }
            ]
        },
        {
            "id": "printk_usage",
            "name": "Proper printk Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "printk",
                "KERN_INFO"
            ],
            "prohibitedSymbols": [
                "printf"
            ]
        }
    ]
});


// Problem 3: Arrays and Loops in Kernel Space
generatedTestDefinitions.set(3, {
    "name": "Arrays and Loops in Kernel Space",
    "category": "foundations",
    "description": "Learn to work with arrays and loops in kernel space. Create an array of integers, define utility functions in a header file, and use a for loop to print each element. This introduces fundamental C programming concepts in kernel context with proper multi-file organization.",
    "exactRequirements": {
        "functionNames": [
            "arrays_init",
            "arrays_exit",
            "print_array"
        ],
        "variables": [
            {
                "name": "numbers",
                "type": "int[]",
                "value": "[10, 20, 30, 40, 50]"
            }
        ],
        "outputMessages": [
            "Arrays module loaded",
            "Element 0: 10",
            "Element 1: 20",
            "Element 2: 30",
            "Element 3: 40",
            "Element 4: 50"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "for",
            "printk",
            "extern",
            "#define ARRAY_SIZE"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "header_declarations",
            "name": "Header Declarations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "extern int numbers",
                "void print_array",
                "#define ARRAY_SIZE"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "array_definition",
            "name": "Array Definition",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int numbers[ARRAY_SIZE]",
                "10, 20, 30, 40, 50"
            ],
            "prohibitedSymbols": [
                "int data[]",
                "int arr[]",
                "int values[]"
            ]
        },
        {
            "id": "function_implementation",
            "name": "Function Implementation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_array",
                "for",
                "i++",
                "i < size"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Format",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Arrays module loaded",
                    "exact": true
                },
                {
                    "pattern": "Element 0: 10",
                    "exact": true
                },
                {
                    "pattern": "Element 1: 20",
                    "exact": true
                },
                {
                    "pattern": "Element 2: 30",
                    "exact": true
                },
                {
                    "pattern": "Element 3: 40",
                    "exact": true
                },
                {
                    "pattern": "Element 4: 50",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 4: Functions and Pointers Basics
generatedTestDefinitions.set(4, {
    "name": "Functions and Pointers Basics",
    "category": "foundations",
    "description": "Learn to work with functions and basic pointers in kernel space. Create functions that take parameters, return values, and manipulate data through pointers. This introduces fundamental C programming concepts essential for kernel development.",
    "exactRequirements": {
        "functionNames": [
            "functions_init",
            "functions_exit",
            "add_numbers",
            "swap_values",
            "print_result"
        ],
        "outputMessages": [
            "Functions module loaded",
            "Addition result: 40",
            "Before swap: num1=15, num2=25",
            "After swap: num1=25, num2=15"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "int *x",
            "int *y",
            "&num1",
            "&num2",
            "return a + b"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_prototypes",
            "name": "Function Prototypes in Header",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int add_numbers",
                "void swap_values",
                "void print_result"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "pointer_usage",
            "name": "Pointer Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int *x",
                "int *y",
                "*x",
                "*y",
                "&num1",
                "&num2"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_implementations",
            "name": "Function Implementations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "return a + b",
                "int temp = *x",
                "*x = *y",
                "*y = temp"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Format",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Functions module loaded",
                    "exact": true
                },
                {
                    "pattern": "Addition result: 40",
                    "exact": true
                },
                {
                    "pattern": "Before swap: num1=15, num2=25",
                    "exact": true
                },
                {
                    "pattern": "After swap: num1=25, num2=15",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 80: Simple Driver - File Creation Challenge
generatedTestDefinitions.set(80, {
    "name": "Simple Driver - File Creation Challenge",
    "category": "drivers",
    "description": "Create a simple kernel driver by implementing missing files. You are given a partial driver structure and need to create the missing source and header files to complete the driver implementation.",
    "exactRequirements": {
        "functionNames": [
            "device_init",
            "device_cleanup",
            "simple_driver_init",
            "simple_driver_exit"
        ],
        "outputMessages": [
            "simple_driver: loaded successfully",
            "simple_driver: unloaded"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/fs.h",
            "linux/cdev.h"
        ],
        "mustContain": [
            "alloc_chrdev_region",
            "cdev_init",
            "cdev_add",
            "class_create",
            "device_create"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "driver_functionality",
            "name": "Driver Functionality Test",
            "type": "kernel_project_test",
            "critical": true,
            "testScenario": {
                "userspaceApps": [
                    {
                        "name": "device_tester",
                        "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <fcntl.h>\\n#include <unistd.h>\\n#include <string.h>\\n\\n#define DEVICE_PATH \"/dev/simpledev\"\\n\\nint main() {\\n    int fd;\\n    char buffer[256];\\n    ssize_t bytes;\\n    \\n    printf(\"=== Simple Driver Test ===\\\\n\");\\n    \\n    fd = open(DEVICE_PATH, O_RDWR);\\n    if (fd < 0) {\\n        printf(\"INFO: Device not found (this is expected in basic test)\\\\n\");\\n        return 0;\\n    }\\n    \\n    printf(\"SUCCESS: Device opened\\\\n\");\\n    \\n    bytes = write(fd, \"test\", 4);\\n    if (bytes > 0) {\\n        printf(\"SUCCESS: Written %zd bytes\\\\n\", bytes);\\n    }\\n    \\n    close(fd);\\n    printf(\"SUCCESS: Driver test completed\\\\n\");\\n    return 0;\\n}"
                    }
                ],
                "setupCommands": [
                    "echo 'Setting up simple driver test'",
                    "mkdir -p /dev"
                ],
                "testCommands": [
                    "echo 'Creating device node...'",
                    "major=$(grep simpledev /proc/devices | cut -d' ' -f1)",
                    "if [ -z \"$major\" ]; then echo 'ERROR: simpledev not found'; exit 1; fi",
                    "mknod /dev/simpledev c $major 0",
                    "chmod 666 /dev/simpledev",
                    "echo 'Running driver test'",
                    "/bin/device_tester",
                    "echo 'Checking driver registration'",
                    "grep simple_driver /proc/modules 2>/dev/null || echo 'Driver loaded successfully'"
                ],
                "expected": {
                    "dmesg": [
                        "simple_driver.*loaded successfully",
                        "simple_driver.*unloaded"
                    ],
                    "stdout": [
                        "Simple Driver Test",
                        "SUCCESS: Driver test completed"
                    ]
                },
                "timeout": 30
            }
        }
    ]
});


module.exports = generatedTestDefinitions;
