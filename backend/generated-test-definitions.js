// Auto-generated from problems/ directory
// DO NOT EDIT THIS FILE DIRECTLY - Edit problems/*.json instead
// Generated at: 2025-07-04T13:54:29.287Z

const generatedTestDefinitions = new Map();


// Problem 1: Hello Kernel World
generatedTestDefinitions.set(1, {
    "name": "Hello Kernel World",
    "category": "foundations",
    "description": "Create your first kernel module that prints a greeting message when loaded and a goodbye message when unloaded. This is the traditional 'Hello World' for kernel programming.",
    "exactRequirements": {
        "functionNames": [
            "hello_init",
            "hello_exit"
        ],
        "variables": [],
        "outputMessages": [
            "Hello from the kernel!",
            "Goodbye from the kernel!"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "exact_functions",
            "name": "Exact Function Names",
            "type": "symbol_check",
            "critical": true,
            "expected": [
                "hello_init",
                "hello_exit"
            ]
        },
        {
            "id": "exact_messages",
            "name": "Exact Output Messages",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Hello from the kernel!",
                    "exact": true
                },
                {
                    "pattern": "Goodbye from the kernel!",
                    "exact": true
                }
            ]
        },
        {
            "id": "required_includes",
            "name": "Required Header Files",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "linux/module.h",
                "linux/kernel.h",
                "linux/init.h"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "module_license",
            "name": "GPL License Required",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "MODULE_LICENSE",
                "GPL"
            ],
            "prohibitedSymbols": []
        }
    ]
});


// Problem 2: Variables and Data Types
generatedTestDefinitions.set(2, {
    "name": "Variables and Data Types",
    "category": "foundations",
    "description": "Learn to work with different data types in kernel space. Create variables of different types and print their values using printk. This introduces you to kernel-space variable declaration and printing.",
    "exactRequirements": {
        "functionNames": [
            "datatypes_init",
            "datatypes_exit"
        ],
        "variables": [
            {
                "name": "my_int",
                "type": "int",
                "value": 42
            },
            {
                "name": "my_char",
                "type": "char",
                "value": "'K'"
            },
            {
                "name": "my_bool",
                "type": "bool",
                "value": true
            }
        ],
        "outputMessages": [
            "Integer: 42",
            "Character: K",
            "Boolean: 1"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "printk",
            "KERN_INFO"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "exact_variables",
            "name": "Exact Variable Names and Values",
            "type": "variable_check",
            "critical": true,
            "expected": [
                "my_int",
                "my_char",
                "my_bool"
            ]
        },
        {
            "id": "exact_output",
            "name": "Exact Output Format",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Integer: 42",
                    "exact": true
                },
                {
                    "pattern": "Character: K",
                    "exact": true
                },
                {
                    "pattern": "Boolean: 1",
                    "exact": true
                }
            ]
        },
        {
            "id": "printk_usage",
            "name": "Proper printk Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "printk",
                "KERN_INFO"
            ],
            "prohibitedSymbols": [
                "printf"
            ]
        }
    ]
});


// Problem 3: Variable Declaration and Usage
generatedTestDefinitions.set(3, {
    "name": "Variable Declaration and Usage",
    "category": "foundations",
    "description": "Declare integer and character variables, then print their values using proper format specifiers. The system will test both compilation and runtime output with hidden test cases.",
    "exactRequirements": {
        "functionNames": [
            "variables_init",
            "variables_exit"
        ],
        "variables": [],
        "outputMessages": [
            "Integer value: 42",
            "Character value: K"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "printk",
            "module_init",
            "module_exit"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "required_functions",
            "name": "Required Function Names",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "variables_init",
                "variables_exit"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "variable_declaration",
            "name": "Variable Declaration",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int ",
                "char "
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "printk_formatting",
            "name": "printk Format Specifiers",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "printk",
                "%d",
                "%c"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "module_registration",
            "name": "Module Registration",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "module_init",
                "module_exit"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Format",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Integer value: 42",
                    "exact": true
                },
                {
                    "pattern": "Character value: K",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 4: Arrays and Loops in Kernel Space
generatedTestDefinitions.set(4, {
    "name": "Arrays and Loops in Kernel Space",
    "category": "foundations",
    "description": "Learn to work with arrays and loops in kernel space. Create an array of integers and use a for loop to print each element. This introduces fundamental C programming concepts in kernel context.",
    "exactRequirements": {
        "functionNames": [
            "arrays_init",
            "arrays_exit"
        ],
        "variables": [
            {
                "name": "numbers",
                "type": "int[]",
                "value": "[10, 20, 30, 40, 50]"
            }
        ],
        "outputMessages": [
            "Element 0: 10",
            "Element 1: 20",
            "Element 2: 30",
            "Element 3: 40",
            "Element 4: 50"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "for",
            "printk"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "array_declaration",
            "name": "Array Declaration",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int numbers[]",
                "numbers",
                "["
            ],
            "prohibitedSymbols": [
                "int data[]",
                "int arr[]",
                "int values[]"
            ]
        },
        {
            "id": "for_loop_usage",
            "name": "For Loop Implementation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "for",
                "i++",
                "i < "
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "exact_output",
            "name": "Exact Output Format",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Element 0: 10",
                    "exact": true
                },
                {
                    "pattern": "Element 1: 20",
                    "exact": true
                },
                {
                    "pattern": "Element 2: 30",
                    "exact": true
                },
                {
                    "pattern": "Element 3: 40",
                    "exact": true
                },
                {
                    "pattern": "Element 4: 50",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 5: Arithmetic and Comparison Operations
generatedTestDefinitions.set(5, {
    "name": "Arithmetic and Comparison Operations",
    "category": "foundations",
    "description": "Master arithmetic operations (+, -, *, /, %) and comparison operators in kernel programming. Learn to perform calculations and make logical comparisons essential for kernel logic.",
    "exactRequirements": {
        "functionNames": [
            "arithmetic_init",
            "arithmetic_exit"
        ],
        "variables": [
            {
                "name": "a",
                "type": "int",
                "value": 25
            },
            {
                "name": "b",
                "type": "int",
                "value": 7
            },
            {
                "name": "sum",
                "type": "int",
                "value": "calculated"
            },
            {
                "name": "diff",
                "type": "int",
                "value": "calculated"
            },
            {
                "name": "product",
                "type": "int",
                "value": "calculated"
            },
            {
                "name": "quotient",
                "type": "int",
                "value": "calculated"
            },
            {
                "name": "remainder",
                "type": "int",
                "value": "calculated"
            },
            {
                "name": "greater",
                "type": "bool",
                "value": "calculated"
            },
            {
                "name": "equal",
                "type": "bool",
                "value": "calculated"
            },
            {
                "name": "not_equal",
                "type": "bool",
                "value": "calculated"
            }
        ],
        "outputMessages": [
            "Arithmetic Results:",
            "25 \\+ 7 = 32",
            "25 - 7 = 18",
            "25 \\* 7 = 175",
            "25 / 7 = 3",
            "25 % 7 = 4",
            "Comparison Results:",
            "25 > 7: true \\(1\\)",
            "25 == 7: false \\(0\\)",
            "25 != 7: true \\(1\\)"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "a + b",
            "a - b",
            "a * b",
            "a / b",
            "a % b",
            "a > b",
            "a == b",
            "a != b"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "arithmetic_operations",
            "name": "All Arithmetic Operations Present",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "a + b",
                "a - b",
                "a * b",
                "a / b",
                "a % b"
            ],
            "prohibitedSymbols": [
                "32",
                "18",
                "175",
                "3",
                "4"
            ]
        },
        {
            "id": "comparison_operations",
            "name": "All Comparison Operations Present",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "a > b",
                "a == b",
                "a != b"
            ],
            "prohibitedSymbols": [
                "= true",
                "= false",
                "greater = 1",
                "equal = 0"
            ]
        },
        {
            "id": "correct_calculations",
            "name": "Mathematically Correct Results",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "25 \\+ 7 = 32",
                    "exact": false
                },
                {
                    "pattern": "25 - 7 = 18",
                    "exact": true
                },
                {
                    "pattern": "25 \\* 7 = 175",
                    "exact": false
                },
                {
                    "pattern": "25 / 7 = 3",
                    "exact": true
                },
                {
                    "pattern": "25 % 7 = 4",
                    "exact": true
                }
            ]
        },
        {
            "id": "logical_results",
            "name": "Correct Logical Comparison Results",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "25 > 7: true \\(1\\)",
                    "exact": false
                },
                {
                    "pattern": "25 == 7: false \\(0\\)",
                    "exact": false
                },
                {
                    "pattern": "25 != 7: true \\(1\\)",
                    "exact": false
                }
            ]
        },
        {
            "id": "no_hardcoded_results",
            "name": "No Hardcoded Results - Must Calculate",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "="
            ],
            "prohibitedSymbols": [
                "sum = 32",
                "diff = 18",
                "product = 175",
                "quotient = 3",
                "remainder = 4"
            ]
        }
    ]
});


// Problem 6: Functions and Return Values
generatedTestDefinitions.set(6, {
    "name": "Functions and Return Values",
    "category": "foundations",
    "description": "Create custom functions that perform calculations and return values. Learn function declaration, parameter passing, and return values in kernel programming context.",
    "exactRequirements": {
        "functionNames": [
            "functions_init",
            "functions_exit",
            "calculate_sum",
            "find_max"
        ],
        "variables": [
            {
                "name": "a",
                "type": "int",
                "value": 15
            },
            {
                "name": "b",
                "type": "int",
                "value": 25
            }
        ],
        "outputMessages": [
            "Sum of 15 and 25 is: 40",
            "Maximum of 15 and 25 is: 25"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "int calculate_sum",
            "int find_max",
            "return"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_declarations",
            "name": "Function Declarations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int calculate_sum",
                "int find_max"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "return_statements",
            "name": "Return Statements",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "return"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "correct_calculations",
            "name": "Correct Calculations",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Sum of 15 and 25 is: 40",
                    "exact": true
                },
                {
                    "pattern": "Maximum of 15 and 25 is: 25",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 7: Conditional Statements and Control Flow
generatedTestDefinitions.set(7, {
    "name": "Conditional Statements and Control Flow",
    "category": "foundations",
    "description": "Master if/else statements and logical operators for control flow in kernel programming. Learn to make decisions and control program execution based on conditions.",
    "exactRequirements": {
        "functionNames": [
            "conditional_init",
            "conditional_exit"
        ],
        "variables": [
            {
                "name": "temperature",
                "type": "int",
                "value": 75
            },
            {
                "name": "humidity",
                "type": "int",
                "value": 60
            },
            {
                "name": "is_summer",
                "type": "bool",
                "value": true
            },
            {
                "name": "age",
                "type": "int",
                "value": 25
            }
        ],
        "outputMessages": [
            "Temperature Check: Moderate weather",
            "Condition Check: Warm and humid",
            "Season Check: Summer conditions",
            "Age Check: Adult"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "if",
            "else",
            "&&",
            "||",
            "!",
            ">=",
            ">"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "if_else_structure",
            "name": "Proper if/else if/else Structure",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "if (",
                "else if",
                "else"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "logical_operators",
            "name": "All Logical Operators Used",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "&&",
                "||",
                "!"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "temperature_conditions",
            "name": "Temperature Range Conditions",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "temperature >= 80",
                "temperature >= 60"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "compound_conditions",
            "name": "Compound Condition Logic",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "temperature > 70 && humidity > 50",
                "is_summer ||"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "nested_conditions",
            "name": "Nested if Statements",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "age >= 18",
                "age >= 65"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "correct_logic_output",
            "name": "Correct Conditional Logic Results",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Temperature Check: Moderate weather",
                    "exact": true
                },
                {
                    "pattern": "Condition Check: Warm and humid",
                    "exact": true
                },
                {
                    "pattern": "Season Check: Summer conditions",
                    "exact": true
                },
                {
                    "pattern": "Age Check: Adult",
                    "exact": true
                }
            ]
        },
        {
            "id": "no_hardcoded_logic",
            "name": "No Hardcoded Results - Must Use Variables",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "temperature",
                "humidity",
                "is_summer",
                "age"
            ],
            "prohibitedSymbols": [
                "if (true)",
                "if (false)",
                "75 >=",
                "60 >"
            ]
        }
    ]
});


// Problem 8: Loop Structures and Iteration Control
generatedTestDefinitions.set(8, {
    "name": "Loop Structures and Iteration Control",
    "category": "foundations",
    "description": "Master different loop types (while, do-while, for) and loop control statements (break, continue) in kernel programming. Essential for iterative operations and data processing.",
    "exactRequirements": {
        "functionNames": [
            "loops_init",
            "loops_exit"
        ],
        "variables": [
            {
                "name": "i",
                "type": "int",
                "value": "iterator"
            },
            {
                "name": "sum",
                "type": "int",
                "value": "calculated"
            },
            {
                "name": "numbers",
                "type": "int[]",
                "value": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
            },
            {
                "name": "count",
                "type": "int",
                "value": "calculated"
            }
        ],
        "outputMessages": [
            "For loop sum: 55",
            "While loop even count: 5",
            "Do-while found number > 5 at index: 5",
            "Loop control: 2 4 6 8"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "for (",
            "while (",
            "do {",
            "break",
            "continue",
            "sum +=",
            "% 2"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "for_loop_implementation",
            "name": "For Loop with Sum Calculation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "for (",
                "i < 10",
                "i++",
                "sum +=",
                "numbers[i]"
            ],
            "prohibitedSymbols": [
                "sum = 55"
            ]
        },
        {
            "id": "while_loop_implementation",
            "name": "While Loop with Even Count",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "while (",
                "% 2 == 0",
                "count++"
            ],
            "prohibitedSymbols": [
                "count = 5"
            ]
        },
        {
            "id": "do_while_implementation",
            "name": "Do-While Loop Implementation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "do {",
                "} while",
                "> 5"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "break_continue_usage",
            "name": "Break and Continue Statements",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "break",
                "continue"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "correct_calculations",
            "name": "Mathematically Correct Results",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "For loop sum: 55",
                    "exact": true
                },
                {
                    "pattern": "While loop even count: 5",
                    "exact": true
                },
                {
                    "pattern": "Do-while found number > 5 at index: 5",
                    "exact": true
                },
                {
                    "pattern": "Loop control: 2 4 6 8",
                    "exact": true
                }
            ]
        },
        {
            "id": "array_processing",
            "name": "Proper Array Element Access",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "numbers[i]",
                "numbers["
            ],
            "prohibitedSymbols": [
                "numbers[0]",
                "numbers[1]",
                "numbers[2]"
            ]
        },
        {
            "id": "no_hardcoded_results",
            "name": "No Hardcoded Results - Must Calculate",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "+=",
                "++",
                "numbers["
            ],
            "prohibitedSymbols": [
                "= 55",
                "= 5",
                "index: 5\" without calculation"
            ]
        }
    ]
});


// Problem 9: Switch-Case Statements and Multi-way Branching
generatedTestDefinitions.set(9, {
    "name": "Switch-Case Statements and Multi-way Branching",
    "category": "foundations",
    "description": "Master switch-case statements for multi-way branching and understand when to use switch vs if-else. Learn proper use of break statements and default cases.",
    "exactRequirements": {
        "functionNames": [
            "switch_init",
            "switch_exit"
        ],
        "variables": [
            {
                "name": "operation",
                "type": "int",
                "value": 2
            },
            {
                "name": "a",
                "type": "int",
                "value": 15
            },
            {
                "name": "b",
                "type": "int",
                "value": 5
            },
            {
                "name": "result",
                "type": "int",
                "value": "calculated"
            },
            {
                "name": "grade",
                "type": "char",
                "value": "'B'"
            },
            {
                "name": "day",
                "type": "int",
                "value": 3
            }
        ],
        "outputMessages": [
            "Operation 2 result: 10",
            "Grade B: Good",
            "Day 3: Weekday"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "switch (",
            "case",
            "break",
            "default",
            "a + b",
            "a - b",
            "a * b",
            "a / b"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "switch_structure",
            "name": "Proper Switch Statement Structure",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "switch (",
                "case",
                "break",
                "default"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "arithmetic_switch",
            "name": "Arithmetic Operations Switch",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "switch (operation)",
                "case 1",
                "case 2",
                "case 3",
                "case 4"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "character_switch",
            "name": "Character Grade Switch",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "switch (grade)",
                "case 'A'",
                "case 'B'",
                "case 'C'"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "arithmetic_operations",
            "name": "Actual Arithmetic in Cases",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "a + b",
                "a - b",
                "a * b",
                "a / b"
            ],
            "prohibitedSymbols": [
                "result = 10",
                "result = 20",
                "result = 75",
                "result = 3"
            ]
        },
        {
            "id": "break_statements",
            "name": "Proper Break Statement Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "break;"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "default_cases",
            "name": "Default Cases Present",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "default:"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "correct_switch_results",
            "name": "Correct Switch Logic Results",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Operation 2 result: 10",
                    "exact": true
                },
                {
                    "pattern": "Grade B: Good",
                    "exact": true
                },
                {
                    "pattern": "Day 3: Weekday",
                    "exact": true
                }
            ]
        },
        {
            "id": "fall_through_weekday",
            "name": "Fall-through for Weekday Cases",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "case 1",
                "case 2",
                "case 3",
                "case 4",
                "case 5"
            ],
            "prohibitedSymbols": []
        }
    ]
});


// Problem 10: Structures Basics - Part 1: Definition and Usage
generatedTestDefinitions.set(10, {
    "name": "Structures Basics - Part 1: Definition and Usage",
    "category": "foundations",
    "description": "Learn to define and use structures in kernel programming. Understand structure declaration, member access, and initialization. This is fundamental for kernel data structures.",
    "exactRequirements": {
        "functionNames": [
            "structures_init",
            "structures_exit"
        ],
        "variables": [
            {
                "name": "stu",
                "type": "struct student",
                "value": "{101, \"Alice\", 20, 3.8}"
            }
        ],
        "outputMessages": [
            "Student ID: 101",
            "Student Name: Alice",
            "Student Age: 20",
            "Student GPA: 3"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "struct student",
            "int id",
            "char name",
            "int age",
            "float gpa",
            "stu.id",
            "stu.name"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "structure_definition",
            "name": "Structure Definition",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "struct student",
                "int id",
                "char name",
                "int age",
                "float gpa"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "member_access",
            "name": "Member Access with Dot Operator",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "stu.id",
                "stu.name",
                "stu.age",
                "stu.gpa"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "correct_output",
            "name": "Correct Member Values",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Student ID: 101",
                    "exact": true
                },
                {
                    "pattern": "Student Name: Alice",
                    "exact": true
                },
                {
                    "pattern": "Student Age: 20",
                    "exact": true
                },
                {
                    "pattern": "Student GPA: 3",
                    "exact": true
                }
            ]
        }
    ],
    "multiPart": {
        "part": 1,
        "totalParts": 3,
        "nextProblemId": 10,
        "previousProblemId": null
    }
});


// Problem 11: Enums, Constants, and Symbolic Values
generatedTestDefinitions.set(11, {
    "name": "Enums, Constants, and Symbolic Values",
    "category": "foundations",
    "description": "Learn to use enums for named constants and symbolic values. Understand const keyword, #define macros, and proper constant management in kernel programming.",
    "exactRequirements": {
        "functionNames": [
            "enums_init",
            "enums_exit"
        ],
        "variables": [
            {
                "name": "buffer_size",
                "type": "const int",
                "value": 1024
            },
            {
                "name": "driver_name",
                "type": "const char*",
                "value": "test_driver"
            },
            {
                "name": "current_state",
                "type": "enum device_state",
                "value": "DEVICE_READY"
            },
            {
                "name": "allowed_ops",
                "type": "enum operation_type",
                "value": "OP_READ | OP_WRITE"
            },
            {
                "name": "device_count",
                "type": "int",
                "value": 5
            }
        ],
        "outputMessages": [
            "Constants:",
            "MAX_DEVICES: 10",
            "DEVICE_NAME_LEN: 32",
            "Version: 2\\.1",
            "Buffer size: 1024",
            "Driver name: test_driver",
            "Device States:",
            "DEVICE_OFFLINE = 0",
            "DEVICE_READY = 2",
            "Current state: DEVICE_READY \\(2\\)",
            "Device is ready",
            "Can add more devices",
            "Read operation allowed"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "#define MAX_DEVICES",
            "enum device_state",
            "enum operation_type",
            "const int",
            "const char"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "preprocessor_defines",
            "name": "Preprocessor Constant Definitions",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "#define MAX_DEVICES 10",
                "#define DEVICE_NAME_LEN 32",
                "#define VERSION_MAJOR 2"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "enum_definitions",
            "name": "Proper Enum Definitions",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "enum device_state",
                "enum operation_type",
                "DEVICE_OFFLINE",
                "DEVICE_READY",
                "OP_READ = 1"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "const_variables",
            "name": "Const Variable Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "const int buffer_size",
                "const char *driver_name"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "enum_assignments",
            "name": "Enum Variable Assignments",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "= DEVICE_READY",
                "= OP_READ | OP_WRITE"
            ],
            "prohibitedSymbols": [
                "= 2",
                "= 3"
            ]
        },
        {
            "id": "enum_comparisons",
            "name": "Enum Comparisons and Logic",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "== DEVICE_READY",
                "< MAX_DEVICES",
                "& OP_READ"
            ],
            "prohibitedSymbols": [
                "== 2",
                "< 10"
            ]
        },
        {
            "id": "correct_enum_values",
            "name": "Correct Enum Integer Values",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "DEVICE_OFFLINE = 0",
                    "exact": true
                },
                {
                    "pattern": "DEVICE_READY = 2",
                    "exact": true
                },
                {
                    "pattern": "Current state: DEVICE_READY \\(2\\)",
                    "exact": false
                }
            ]
        },
        {
            "id": "constant_usage",
            "name": "Proper Constant Usage",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "MAX_DEVICES: 10",
                    "exact": true
                },
                {
                    "pattern": "Version: 2\\.1",
                    "exact": false
                },
                {
                    "pattern": "Buffer size: 1024",
                    "exact": true
                }
            ]
        },
        {
            "id": "bitwise_enum_ops",
            "name": "Bitwise Operations with Enums",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "OP_READ | OP_WRITE",
                "allowed_ops & OP_READ"
            ],
            "prohibitedSymbols": []
        }
    ]
});


// Problem 12: Kernel Logging with printk and Log Levels
generatedTestDefinitions.set(12, {
    "name": "Kernel Logging with printk and Log Levels",
    "category": "foundations",
    "description": "Master kernel logging using printk with different log levels. Understand when to use each log level and how kernel logging differs from userspace printf.",
    "exactRequirements": {
        "functionNames": [
            "printk_init",
            "printk_exit"
        ],
        "variables": [
            {
                "name": "error_code",
                "type": "int",
                "value": -12
            },
            {
                "name": "device_count",
                "type": "int",
                "value": 3
            },
            {
                "name": "memory_addr",
                "type": "unsigned long",
                "value": "0xdeadbeef"
            }
        ],
        "outputMessages": [
            "Module initialization started",
            "Found 3 devices during initialization",
            "Non-critical error occurred: -12",
            "Debug info: memory_addr=0xdeadbeef, device_count=3",
            "Using pr_info macro for informational message",
            "Using pr_warn macro for warning message",
            "Using pr_err macro for error message",
            "This message is rate-limited"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "printk(KERN_INFO",
            "printk(KERN_NOTICE",
            "printk(KERN_WARNING",
            "printk(KERN_DEBUG",
            "pr_info",
            "pr_warn",
            "pr_err",
            "printk_ratelimited"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "log_level_usage",
            "name": "All Required Log Levels Used",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "KERN_INFO",
                "KERN_NOTICE",
                "KERN_WARNING",
                "KERN_DEBUG"
            ],
            "prohibitedSymbols": [
                "printf"
            ]
        },
        {
            "id": "pr_macro_usage",
            "name": "Modern pr_* Macro Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "pr_info(",
                "pr_warn(",
                "pr_err("
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "format_specifiers",
            "name": "Proper Format Specifier Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "%d",
                "%lx"
            ],
            "prohibitedSymbols": [
                "%s\" for numbers"
            ]
        },
        {
            "id": "rate_limiting",
            "name": "Rate-Limited Printing Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "printk_ratelimited("
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "conditional_logging",
            "name": "Conditional Logging Logic",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "if (device_count >",
                "if (error_code <"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "appropriate_log_levels",
            "name": "Appropriate Log Level Selection",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Module initialization started",
                    "exact": true
                },
                {
                    "pattern": "Found 3 devices during initialization",
                    "exact": true
                },
                {
                    "pattern": "Non-critical error occurred: -12",
                    "exact": true
                }
            ]
        },
        {
            "id": "debug_formatting",
            "name": "Debug Information Formatting",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Debug info: memory_addr=0xdeadbeef, device_count=3",
                    "exact": true
                }
            ]
        },
        {
            "id": "pr_macro_output",
            "name": "pr_* Macro Output",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Using pr_info macro for informational message",
                    "exact": true
                },
                {
                    "pattern": "Using pr_warn macro for warning message",
                    "exact": true
                },
                {
                    "pattern": "Using pr_err macro for error message",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 13: Structures and Pointers - Part 2: Arrow Operator
generatedTestDefinitions.set(13, {
    "name": "Structures and Pointers - Part 2: Arrow Operator",
    "category": "foundations",
    "description": "Learn to use pointers to structures and the arrow operator. Understand the difference between dot and arrow operators. This builds on Part 1 structure knowledge.",
    "exactRequirements": {
        "functionNames": [
            "structures_pointers_init",
            "structures_pointers_exit"
        ],
        "variables": [
            {
                "name": "stu_ptr",
                "type": "struct student*",
                "value": "&stu"
            }
        ],
        "outputMessages": [
            "Student ID via pointer: 102",
            "Student Name via pointer: Bob",
            "Student Age via pointer: 21",
            "Student GPA via pointer: 3"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "struct student *stu_ptr",
            "stu_ptr->id",
            "stu_ptr->name",
            "stu_ptr->age",
            "stu_ptr->gpa"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "pointer_declaration",
            "name": "Structure Pointer Declaration",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "struct student *stu_ptr",
                "&stu"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "arrow_operator_usage",
            "name": "Arrow Operator Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "stu_ptr->id",
                "stu_ptr->name",
                "stu_ptr->age",
                "stu_ptr->gpa"
            ],
            "prohibitedSymbols": [
                "(*stu_ptr)."
            ]
        },
        {
            "id": "correct_pointer_access",
            "name": "Correct Pointer Access",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Student ID via pointer: 102",
                    "exact": true
                },
                {
                    "pattern": "Student Name via pointer: Bob",
                    "exact": true
                },
                {
                    "pattern": "Student Age via pointer: 21",
                    "exact": true
                },
                {
                    "pattern": "Student GPA via pointer: 3",
                    "exact": true
                }
            ]
        }
    ],
    "multiPart": {
        "part": 2,
        "totalParts": 3,
        "nextProblemId": 11,
        "previousProblemId": 9
    }
});


// Problem 14: Pointers Basics - Part 1: Declaration and Dereferencing
generatedTestDefinitions.set(14, {
    "name": "Pointers Basics - Part 1: Declaration and Dereferencing",
    "category": "foundations",
    "description": "Learn fundamental pointer concepts in kernel programming. Understand pointer declaration, assignment, and dereferencing. This is the first part of the pointer series.",
    "exactRequirements": {
        "functionNames": [
            "pointers_init",
            "pointers_exit"
        ],
        "variables": [
            {
                "name": "num",
                "type": "int",
                "value": 42
            },
            {
                "name": "ptr",
                "type": "int*",
                "value": "&num"
            }
        ],
        "outputMessages": [
            "Direct value: 42",
            "Value through pointer: 42",
            "Address in pointer: (0x[0-9a-fA-F]+|\\(____ptrval____\\))"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "*ptr",
            "&num",
            "int num = 42"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "pointer_declaration",
            "name": "Pointer Declaration",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "*ptr",
                "&num",
                "int num = 42"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "dereferencing",
            "name": "Pointer Dereferencing",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "*ptr"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "correct_output",
            "name": "Correct Output Values",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Direct value: 42",
                    "exact": true
                },
                {
                    "pattern": "Value through pointer: 42",
                    "exact": true
                },
                {
                    "pattern": "Address in pointer: (0x[0-9a-fA-F]+|\\(____ptrval____\\))",
                    "exact": false
                }
            ]
        }
    ],
    "multiPart": {
        "part": 1,
        "totalParts": 3,
        "nextProblemId": 7,
        "previousProblemId": null
    }
});


// Problem 15: Pointers and Arrays - Part 2: Array Traversal with Pointers
generatedTestDefinitions.set(15, {
    "name": "Pointers and Arrays - Part 2: Array Traversal with Pointers",
    "category": "foundations",
    "description": "Learn the relationship between pointers and arrays in kernel programming. Use pointers to traverse arrays and understand pointer arithmetic. This builds on Part 1 pointer knowledge.",
    "exactRequirements": {
        "functionNames": [
            "pointers_arrays_init",
            "pointers_arrays_exit"
        ],
        "variables": [
            {
                "name": "values",
                "type": "int[]",
                "value": "[100, 200, 300, 400, 500]"
            },
            {
                "name": "arr_ptr",
                "type": "int*",
                "value": "values"
            }
        ],
        "outputMessages": [
            "Element 0: 100",
            "Element 1: 200",
            "Element 2: 300",
            "Element 3: 400",
            "Element 4: 500"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "int *arr_ptr",
            "arr_ptr + ",
            "*(arr_ptr"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "array_pointer_setup",
            "name": "Array and Pointer Setup",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int values",
                "int *arr_ptr",
                "values"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "pointer_arithmetic",
            "name": "Pointer Arithmetic Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "arr_ptr + ",
                "*(arr_ptr"
            ],
            "prohibitedSymbols": [
                "values["
            ]
        },
        {
            "id": "correct_traversal",
            "name": "Correct Array Traversal",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Element 0: 100",
                    "exact": true
                },
                {
                    "pattern": "Element 1: 200",
                    "exact": true
                },
                {
                    "pattern": "Element 2: 300",
                    "exact": true
                },
                {
                    "pattern": "Element 3: 400",
                    "exact": true
                },
                {
                    "pattern": "Element 4: 500",
                    "exact": true
                }
            ]
        }
    ],
    "multiPart": {
        "part": 2,
        "totalParts": 3,
        "nextProblemId": 8,
        "previousProblemId": 6
    }
});


// Problem 16: Pointers and Functions - Part 3: Pass by Reference
generatedTestDefinitions.set(16, {
    "name": "Pointers and Functions - Part 3: Pass by Reference",
    "category": "foundations",
    "description": "Master passing pointers to functions to modify values by reference. Learn the difference between pass-by-value and pass-by-reference. This completes the pointer series foundation.",
    "exactRequirements": {
        "functionNames": [
            "pointers_functions_init",
            "pointers_functions_exit",
            "swap_values",
            "double_value"
        ],
        "variables": [
            {
                "name": "x",
                "type": "int",
                "value": 10
            },
            {
                "name": "y",
                "type": "int",
                "value": 20
            },
            {
                "name": "z",
                "type": "int",
                "value": 15
            }
        ],
        "outputMessages": [
            "Before swap: x=10, y=20",
            "Before doubling: z=15",
            "After swap: x=20, y=10",
            "After doubling: z=30"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "void swap_values",
            "void double_value",
            "int *",
            "&x",
            "&y",
            "&z"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_signatures",
            "name": "Correct Function Signatures",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void swap_values",
                "int *a",
                "int *b",
                "void double_value",
                "int *val"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "pointer_parameters",
            "name": "Pointer Parameters Used",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "&x",
                "&y",
                "&z"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "correct_modifications",
            "name": "Values Correctly Modified",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Before swap: x=10, y=20",
                    "exact": true
                },
                {
                    "pattern": "Before doubling: z=15",
                    "exact": true
                },
                {
                    "pattern": "After swap: x=20, y=10",
                    "exact": true
                },
                {
                    "pattern": "After doubling: z=30",
                    "exact": true
                }
            ]
        }
    ],
    "multiPart": {
        "part": 3,
        "totalParts": 3,
        "nextProblemId": 9,
        "previousProblemId": 7
    }
});


// Problem 17: Bitwise Operations and Bit Manipulation
generatedTestDefinitions.set(17, {
    "name": "Bitwise Operations and Bit Manipulation",
    "category": "foundations",
    "description": "Master bitwise operations (&, |, ^, ~, <<, >>) essential for kernel programming, device drivers, and hardware interaction. Learn bit manipulation techniques for flags and registers.",
    "exactRequirements": {
        "functionNames": [
            "bitwise_init",
            "bitwise_exit"
        ],
        "variables": [
            {
                "name": "a",
                "type": "unsigned int",
                "value": "0x5A"
            },
            {
                "name": "b",
                "type": "unsigned int",
                "value": "0x3C"
            },
            {
                "name": "flags",
                "type": "unsigned int",
                "value": "0x00"
            },
            {
                "name": "mask",
                "type": "unsigned int",
                "value": "calculated"
            }
        ],
        "outputMessages": [
            "Bitwise Operations:",
            "0x5A & 0x3C = 0x18",
            "0x5A \\| 0x3C = 0x7E",
            "0x5A \\^ 0x3C = 0x66",
            "~0x5A = 0xFFFFFFA5",
            "0x5A << 2 = 0x168",
            "0x5A >> 2 = 0x16",
            "Flag Operations:",
            "After setting bit 3: 0x8",
            "Bit 3 is set: 1",
            "Extracted bits 2-5: 0x6"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "a & b",
            "a | b",
            "a ^ b",
            "~a",
            "a << 2",
            "a >> 2",
            "1 << 3",
            "&= ~",
            "^="
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "basic_bitwise_ops",
            "name": "All Basic Bitwise Operations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "a & b",
                "a | b",
                "a ^ b",
                "~a",
                "a << 2",
                "a >> 2"
            ],
            "prohibitedSymbols": [
                "= 0x18",
                "= 0x7E",
                "= 0x66",
                "= 0x168",
                "= 0x16"
            ]
        },
        {
            "id": "bit_manipulation_ops",
            "name": "Bit Set/Clear/Toggle Operations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "|= (1 << 3)",
                "&= ~(1 << 5)",
                "^= (1 << 7)"
            ],
            "prohibitedSymbols": [
                "flags = 0x8"
            ]
        },
        {
            "id": "bit_checking",
            "name": "Bit Checking Operation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "& (1 << 3)",
                "!= 0"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "mask_operations",
            "name": "Bit Mask and Extraction",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "& mask",
                ">> 2"
            ],
            "prohibitedSymbols": [
                "= 0x6"
            ]
        },
        {
            "id": "hex_format_output",
            "name": "Hexadecimal Format Output",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "0x5A & 0x3C = 0x18",
                    "exact": true
                },
                {
                    "pattern": "0x5A \\| 0x3C = 0x7E",
                    "exact": false
                },
                {
                    "pattern": "0x5A \\^ 0x3C = 0x66",
                    "exact": false
                },
                {
                    "pattern": "0x5A << 2 = 0x168",
                    "exact": true
                },
                {
                    "pattern": "0x5A >> 2 = 0x16",
                    "exact": true
                }
            ]
        },
        {
            "id": "correct_bit_math",
            "name": "Mathematically Correct Bit Operations",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "After setting bit 3: 0x8",
                    "exact": true
                },
                {
                    "pattern": "Bit 3 is set: 1",
                    "exact": true
                },
                {
                    "pattern": "Extracted bits 2-5: 0x6",
                    "exact": true
                }
            ]
        },
        {
            "id": "unsigned_int_usage",
            "name": "Proper Unsigned Integer Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "unsigned int"
            ],
            "prohibitedSymbols": [
                "int a",
                "int b",
                "int flags"
            ]
        }
    ]
});


// Problem 18: String Manipulation and Character Arrays
generatedTestDefinitions.set(18, {
    "name": "String Manipulation and Character Arrays",
    "category": "foundations",
    "description": "Master string handling in kernel space using character arrays and kernel string functions. Learn the difference between string literals, character arrays, and pointers to strings.",
    "exactRequirements": {
        "functionNames": [
            "strings_init",
            "strings_exit"
        ],
        "variables": [
            {
                "name": "str1",
                "type": "char[]",
                "value": "Hello"
            },
            {
                "name": "str2",
                "type": "char[]",
                "value": "World"
            },
            {
                "name": "result",
                "type": "char[]",
                "value": "calculated"
            },
            {
                "name": "dynamic_str",
                "type": "char*",
                "value": "kstrdup_result"
            },
            {
                "name": "literal",
                "type": "const char*",
                "value": "Kernel Programming"
            }
        ],
        "outputMessages": [
            "String Operations:",
            "str1 length: 5",
            "str2 length: 5",
            "literal length: 18",
            "Concatenated: Hello World",
            "strcmp\\(\\\"Hello\\\", \\\"World\\\"\\): -15",
            "Dynamic string: Kernel Programming",
            "First char converted: hello"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/string.h",
            "linux/slab.h"
        ],
        "mustContain": [
            "strlen",
            "strcpy",
            "strcat",
            "strcmp",
            "kstrdup",
            "kfree",
            "str1[0]"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "string_function_usage",
            "name": "All String Functions Used",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "strlen(",
                "strcpy(",
                "strcat(",
                "strcmp("
            ],
            "prohibitedSymbols": [
                "len1 = 5",
                "len2 = 5",
                "total_len = 18"
            ]
        },
        {
            "id": "dynamic_allocation",
            "name": "Dynamic String Allocation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "kstrdup(",
                "GFP_KERNEL",
                "kfree("
            ],
            "prohibitedSymbols": [
                "malloc",
                "free",
                "strdup"
            ]
        },
        {
            "id": "character_manipulation",
            "name": "Character Array Manipulation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "str1[0]",
                ">= 'A'",
                "<= 'Z'",
                "+= 32"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "string_concatenation",
            "name": "Proper String Concatenation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "strcpy(result",
                "strcat(result"
            ],
            "prohibitedSymbols": [
                "result = \"Hello World\""
            ]
        },
        {
            "id": "correct_string_lengths",
            "name": "Correct String Length Calculations",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "str1 length: 5",
                    "exact": true
                },
                {
                    "pattern": "str2 length: 5",
                    "exact": true
                },
                {
                    "pattern": "literal length: 18",
                    "exact": true
                }
            ]
        },
        {
            "id": "string_operations_result",
            "name": "String Operations Results",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Concatenated: Hello World",
                    "exact": true
                },
                {
                    "pattern": "Dynamic string: Kernel Programming",
                    "exact": true
                },
                {
                    "pattern": "First char converted: hello",
                    "exact": true
                }
            ]
        },
        {
            "id": "strcmp_result",
            "name": "strcmp Function Result",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "strcmp\\(\\\"Hello\\\", \\\"World\\\"\\): -15",
                    "exact": false
                }
            ]
        },
        {
            "id": "memory_cleanup",
            "name": "Proper Memory Cleanup",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "if (dynamic_str)",
                "kfree(dynamic_str)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "no_hardcoded_strings",
            "name": "No Hardcoded String Results",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "strlen(",
                "strcat(",
                "strcmp("
            ],
            "prohibitedSymbols": [
                "\"Hello World\"",
                "cmp_result = -15"
            ]
        }
    ]
});


// Problem 19: Macros and Preprocessor Directives
generatedTestDefinitions.set(19, {
    "name": "Macros and Preprocessor Directives",
    "category": "foundations",
    "description": "Master preprocessor macros, conditional compilation, and function-like macros essential for kernel programming. Learn proper macro design and common kernel macro patterns.",
    "exactRequirements": {
        "functionNames": [
            "macros_init",
            "macros_exit"
        ],
        "variables": [
            {
                "name": "a",
                "type": "int",
                "value": 15
            },
            {
                "name": "b",
                "type": "int",
                "value": 25
            },
            {
                "name": "num",
                "type": "int",
                "value": 8
            },
            {
                "name": "my_device",
                "type": "struct device",
                "value": "initialized"
            }
        ],
        "outputMessages": [
            "Macro Constants:",
            "Buffer size: 1024",
            "Max users: 100",
            "Driver version: 1\\.2\\.3",
            "Function Macros:",
            "MIN\\(15, 25\\) = 15",
            "MAX\\(15, 25\\) = 25",
            "SQUARE\\(8\\) = 64",
            "8 is power of 2: 1",
            "Debug message: Module initialized",
            "Device initialized: ID=1, Name=test_device"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "#define BUFFER_SIZE",
            "#define MIN(",
            "#if DEBUG_ENABLED",
            "do {",
            "} while (0)",
            "MIN(a, b)",
            "MAX(a, b)"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "object_like_macros",
            "name": "Object-like Macro Definitions",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "#define BUFFER_SIZE 1024",
                "#define MAX_USERS 100",
                "#define DRIVER_VERSION"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_like_macros",
            "name": "Function-like Macro Definitions",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "#define MIN(a, b)",
                "#define MAX(a, b)",
                "#define SQUARE(x)",
                "#define IS_POWER_OF_2(x)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "conditional_compilation",
            "name": "Conditional Compilation Directives",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "#if DEBUG_ENABLED",
                "#else",
                "#endif"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "variadic_macro",
            "name": "Variadic Macro with ##args",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "##args",
                "fmt, args..."
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "do_while_idiom",
            "name": "do-while(0) Macro Idiom",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "do {",
                "} while (0)",
                "\\\\"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "macro_safety",
            "name": "Safe Macro Implementation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "((a)",
                "((x)",
                "(((x)"
            ],
            "prohibitedSymbols": [
                "#define MIN(a, b) a < b ? a : b"
            ]
        },
        {
            "id": "macro_usage",
            "name": "All Macros Used in Code",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "BUFFER_SIZE",
                "MIN(a, b)",
                "MAX(a, b)",
                "SQUARE(num)",
                "IS_POWER_OF_2(num)",
                "DEBUG_PRINT",
                "INIT_DEVICE"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "correct_macro_results",
            "name": "Correct Macro Calculation Results",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Buffer size: 1024",
                    "exact": true
                },
                {
                    "pattern": "MIN\\(15, 25\\) = 15",
                    "exact": false
                },
                {
                    "pattern": "MAX\\(15, 25\\) = 25",
                    "exact": false
                },
                {
                    "pattern": "SQUARE\\(8\\) = 64",
                    "exact": false
                },
                {
                    "pattern": "8 is power of 2: 1",
                    "exact": true
                }
            ]
        },
        {
            "id": "debug_print_usage",
            "name": "DEBUG_PRINT Macro Usage",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Debug message: Module initialized",
                    "exact": true
                }
            ]
        },
        {
            "id": "multiline_macro_usage",
            "name": "Multi-line Macro Device Initialization",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Device initialized: ID=1, Name=test_device",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 20: Unions, Type Casting, and Memory Layout
generatedTestDefinitions.set(20, {
    "name": "Unions, Type Casting, and Memory Layout",
    "category": "foundations",
    "description": "Learn unions for overlapping memory layouts and type casting for data conversion. Essential for hardware registers, protocol headers, and low-level kernel programming.",
    "exactRequirements": {
        "functionNames": [
            "unions_init",
            "unions_exit"
        ],
        "variables": [
            {
                "name": "converter",
                "type": "union data_converter",
                "value": "initialized"
            },
            {
                "name": "packet",
                "type": "union packet_header",
                "value": "initialized"
            },
            {
                "name": "generic_ptr",
                "type": "void*",
                "value": "pointer"
            },
            {
                "name": "int_value",
                "type": "int",
                "value": "0x12345678"
            },
            {
                "name": "float_value",
                "type": "float",
                "value": "3.14"
            }
        ],
        "outputMessages": [
            "Union Data Converter:",
            "Full value: 0x12345678",
            "Half values: 0x[0-9a-fA-F]+, 0x[0-9a-fA-F]+",
            "Bytes: 0x[0-9a-fA-F]+, 0x[0-9a-fA-F]+, 0x[0-9a-fA-F]+, 0x[0-9a-fA-F]+",
            "Type Casting:",
            "int to float: [0-9]+\\.[0-9]+",
            "Pointer casting works",
            "Packet Header:",
            "Version: 4, Header Length: 5",
            "Total Length: 1500"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "union data_converter",
            "union packet_header",
            "(float)",
            "(int *)",
            "(char *)",
            "converter.full_value",
            "packet.ip_header"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "union_definitions",
            "name": "Proper Union Definitions",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "union data_converter",
                "union packet_header",
                "unsigned int full_value",
                "unsigned short half_values"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "bit_fields",
            "name": "Bit Field Usage in Union",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "unsigned char b0:4",
                "unsigned char version:4",
                "unsigned char header_len:4"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "type_casting_operations",
            "name": "Type Casting Operations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "(float)int_value",
                "(int)float_value",
                "(int *)",
                "(char *)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "union_member_access",
            "name": "Union Member Access",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "converter.full_value",
                "converter.half_values",
                "converter.bytes",
                "packet.ip_header"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "overlapping_memory_demo",
            "name": "Overlapping Memory Demonstration",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Full value: 0x12345678",
                    "exact": true
                },
                {
                    "pattern": "Half values: 0x[0-9a-fA-F]+, 0x[0-9a-fA-F]+",
                    "exact": false
                },
                {
                    "pattern": "Bytes: 0x[0-9a-fA-F]+",
                    "exact": false
                }
            ]
        },
        {
            "id": "type_casting_results",
            "name": "Type Casting Results",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "int to float: [0-9]+\\.[0-9]+",
                    "exact": false
                },
                {
                    "pattern": "Pointer casting works",
                    "exact": true
                }
            ]
        },
        {
            "id": "packet_header_fields",
            "name": "Packet Header Field Access",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Version: 4, Header Length: 5",
                    "exact": true
                },
                {
                    "pattern": "Total Length: 1500",
                    "exact": true
                }
            ]
        },
        {
            "id": "no_hardcoded_values",
            "name": "No Hardcoded Union Values",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "converter.full_value =",
                "converter.half_values[",
                "converter.bytes["
            ],
            "prohibitedSymbols": [
                "= 0x1234",
                "= 0x5678",
                "= 0x12"
            ]
        },
        {
            "id": "proper_initialization",
            "name": "Proper Union Initialization",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "= 0x12345678",
                "packet.ip_header.version = 4"
            ],
            "prohibitedSymbols": []
        }
    ]
});


// Problem 21: Variable Scope, Storage Classes, and Lifetime
generatedTestDefinitions.set(21, {
    "name": "Variable Scope, Storage Classes, and Lifetime",
    "category": "foundations",
    "description": "Master variable scope (global, local, static) and storage classes in kernel programming. Understand variable lifetime, initialization, and proper usage patterns for kernel modules.",
    "exactRequirements": {
        "functionNames": [
            "scope_init",
            "scope_exit",
            "increment_static_counter",
            "demonstrate_scope",
            "demonstrate_shadowing"
        ],
        "variables": [
            {
                "name": "global_counter",
                "type": "static int",
                "value": "0"
            },
            {
                "name": "global_buffer",
                "type": "static char[]",
                "value": "array"
            },
            {
                "name": "global_name",
                "type": "const char*",
                "value": "test_module"
            }
        ],
        "outputMessages": [
            "Variable Scope Demonstration:",
            "Global counter: 5",
            "Global buffer: Hello from global",
            "Global name: test_module",
            "Local init: 42",
            "Static vs Local Variables:",
            "Static counter: 1, Local temp: 11",
            "Static counter: 2, Local temp: 11",
            "Static counter: 3, Local temp: 11",
            "Function Scope:",
            "Function scope: param=3, local_var=6",
            "Block scope: param=8, local_var=16, block_var=17",
            "Variable Shadowing:",
            "Outer scope value: 100",
            "Inner scope value: 200",
            "Back to outer scope value: 100"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "static int global_counter",
            "static int static_counter",
            "int local_var",
            "int block_var",
            "if (param >"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "global_variable_declarations",
            "name": "Proper Global Variable Declarations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "static int global_counter",
                "static char global_buffer",
                "const char *global_name"
            ],
            "prohibitedSymbols": [
                "int global_counter",
                "extern"
            ]
        },
        {
            "id": "static_local_variable",
            "name": "Static Local Variable Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "static int static_counter = 0",
                "static_counter++"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "scope_demonstration",
            "name": "Block Scope Demonstration",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "if (param > 5)",
                "int block_var",
                "block_var = local_var + 1"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "variable_shadowing",
            "name": "Variable Shadowing Implementation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "int value = 100",
                "int value = 200"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "static_persistence",
            "name": "Static Variable Persistence",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Static counter: 1, Local temp: 11",
                    "exact": true
                },
                {
                    "pattern": "Static counter: 2, Local temp: 11",
                    "exact": true
                },
                {
                    "pattern": "Static counter: 3, Local temp: 11",
                    "exact": true
                }
            ]
        },
        {
            "id": "block_scope_behavior",
            "name": "Block Scope Variable Behavior",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Function scope: param=3, local_var=6",
                    "exact": true
                },
                {
                    "pattern": "Block scope: param=8, local_var=16, block_var=17",
                    "exact": true
                },
                {
                    "pattern": "Function scope: param=8, local_var=16",
                    "exact": true
                }
            ]
        },
        {
            "id": "shadowing_behavior",
            "name": "Variable Shadowing Behavior",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Outer scope value: 100",
                    "exact": true
                },
                {
                    "pattern": "Inner scope value: 200",
                    "exact": true
                },
                {
                    "pattern": "Back to outer scope value: 100",
                    "exact": true
                }
            ]
        },
        {
            "id": "global_access",
            "name": "Global Variable Access",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Global counter: 5",
                    "exact": true
                },
                {
                    "pattern": "Global buffer: Hello from global",
                    "exact": true
                },
                {
                    "pattern": "Global name: test_module",
                    "exact": true
                }
            ]
        },
        {
            "id": "proper_calculations",
            "name": "Proper Variable Calculations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "local_var = param * 2",
                "block_var = local_var + 1",
                "local_temp++"
            ],
            "prohibitedSymbols": [
                "local_var = 6",
                "block_var = 17"
            ]
        }
    ]
});


// Problem 22: Structures and Functions - Part 3: Passing Structures
generatedTestDefinitions.set(22, {
    "name": "Structures and Functions - Part 3: Passing Structures",
    "category": "foundations",
    "description": "Master passing structures to functions by value and by reference. Learn when to use each approach and understand the performance implications. This completes the structure series.",
    "exactRequirements": {
        "functionNames": [
            "structures_functions_init",
            "structures_functions_exit",
            "print_student_byval",
            "update_gpa"
        ],
        "variables": [
            {
                "name": "stu",
                "type": "struct student",
                "value": "{103, \"Charlie\", 22, 3.2}"
            }
        ],
        "outputMessages": [
            "Original student:",
            "ID: 103, Name: Charlie, Age: 22, GPA: 3",
            "After GPA update:",
            "ID: 103, Name: Charlie, Age: 22, GPA: 3"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h"
        ],
        "mustContain": [
            "void print_student_byval",
            "struct student s",
            "void update_gpa",
            "struct student *s",
            "s->gpa"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "function_signatures",
            "name": "Correct Function Signatures",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "void print_student_byval",
                "struct student s",
                "void update_gpa",
                "struct student *s",
                "float new_gpa"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "pointer_modification",
            "name": "GPA Modification via Pointer",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "s->gpa",
                "new_gpa"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "correct_behavior",
            "name": "Functions Work Correctly",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Original student:",
                    "exact": true
                },
                {
                    "pattern": "ID: 103, Name: Charlie, Age: 22, GPA: 3",
                    "exact": true
                },
                {
                    "pattern": "After GPA update:",
                    "exact": true
                },
                {
                    "pattern": "ID: 103, Name: Charlie, Age: 22, GPA: 3",
                    "exact": true
                }
            ]
        }
    ],
    "multiPart": {
        "part": 3,
        "totalParts": 3,
        "nextProblemId": 12,
        "previousProblemId": 10
    }
});


// Problem 23: Kernel Memory Management - Part 1: kmalloc and kfree
generatedTestDefinitions.set(23, {
    "name": "Kernel Memory Management - Part 1: kmalloc and kfree",
    "category": "foundations",
    "description": "Learn kernel memory allocation using kmalloc and kfree. Understand the difference between kernel and userspace memory management. This is the first part of kernel memory series.",
    "exactRequirements": {
        "functionNames": [
            "kmalloc_init",
            "kmalloc_exit"
        ],
        "variables": [
            {
                "name": "arr",
                "type": "int*",
                "value": "kmalloc_result"
            }
        ],
        "outputMessages": [
            "Memory allocated successfully",
            "arr\\[0\\] = 10",
            "arr\\[1\\] = 20",
            "arr\\[2\\] = 30",
            "arr\\[3\\] = 40",
            "arr\\[4\\] = 50",
            "Memory freed successfully"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/slab.h"
        ],
        "mustContain": [
            "kmalloc",
            "kfree",
            "GFP_KERNEL",
            "sizeof(int)",
            "arr != NULL"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "memory_allocation",
            "name": "Proper Memory Allocation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "kmalloc",
                "5 * sizeof(int)",
                "GFP_KERNEL"
            ],
            "prohibitedSymbols": [
                "malloc"
            ]
        },
        {
            "id": "null_check",
            "name": "NULL Pointer Check",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "arr != NULL",
                "if"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "memory_free",
            "name": "Proper Memory Cleanup",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "kfree",
                "arr"
            ],
            "prohibitedSymbols": [
                "free"
            ]
        },
        {
            "id": "correct_output",
            "name": "Correct Array Values",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Memory allocated successfully",
                    "exact": true
                },
                {
                    "pattern": "arr\\[0\\] = 10",
                    "exact": false
                },
                {
                    "pattern": "arr\\[1\\] = 20",
                    "exact": false
                },
                {
                    "pattern": "arr\\[2\\] = 30",
                    "exact": false
                },
                {
                    "pattern": "arr\\[3\\] = 40",
                    "exact": false
                },
                {
                    "pattern": "arr\\[4\\] = 50",
                    "exact": false
                },
                {
                    "pattern": "Memory freed successfully",
                    "exact": true
                }
            ]
        }
    ],
    "multiPart": {
        "part": 1,
        "totalParts": 3,
        "nextProblemId": 13,
        "previousProblemId": null
    }
});


// Problem 24: Kernel Memory Management - Part 2: Dynamic Strings with kstrdup
generatedTestDefinitions.set(24, {
    "name": "Kernel Memory Management - Part 2: Dynamic Strings with kstrdup",
    "category": "foundations",
    "description": "Learn kernel string management using kstrdup, strlen, and proper string handling. Understand kernel string functions vs userspace equivalents. This builds on Part 1 memory knowledge.",
    "exactRequirements": {
        "functionNames": [
            "kstrings_init",
            "kstrings_exit"
        ],
        "variables": [
            {
                "name": "original",
                "type": "const char*",
                "value": "\"Hello Kernel World\""
            },
            {
                "name": "copy1",
                "type": "char*",
                "value": "kstrdup_result"
            },
            {
                "name": "copy2",
                "type": "char*",
                "value": "kmalloc_result"
            }
        ],
        "outputMessages": [
            "Original: Hello Kernel World",
            "Copy1 \\(kstrdup\\): Hello Kernel World",
            "Copy2 \\(kmalloc\\+strcpy\\): Hello Kernel World",
            "String length: 18",
            "Strings freed successfully"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/slab.h",
            "linux/string.h"
        ],
        "mustContain": [
            "kstrdup",
            "strlen",
            "strcpy",
            "GFP_KERNEL",
            "kfree"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "kstrdup_usage",
            "name": "kstrdup Function Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "kstrdup",
                "original",
                "GFP_KERNEL"
            ],
            "prohibitedSymbols": [
                "strdup"
            ]
        },
        {
            "id": "manual_copy",
            "name": "Manual String Copy with kmalloc",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "kmalloc",
                "strlen",
                "strcpy"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "string_handling",
            "name": "Proper String Handling",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Original: Hello Kernel World",
                    "exact": true
                },
                {
                    "pattern": "Copy1 \\(kstrdup\\): Hello Kernel World",
                    "exact": false
                },
                {
                    "pattern": "Copy2 \\(kmalloc\\+strcpy\\): Hello Kernel World",
                    "exact": false
                },
                {
                    "pattern": "String length: 18",
                    "exact": true
                },
                {
                    "pattern": "Strings freed successfully",
                    "exact": true
                }
            ]
        }
    ],
    "multiPart": {
        "part": 2,
        "totalParts": 3,
        "nextProblemId": 14,
        "previousProblemId": 12
    }
});


// Problem 25: Kernel Memory Management - Part 3: Dynamic Structures
generatedTestDefinitions.set(25, {
    "name": "Kernel Memory Management - Part 3: Dynamic Structures",
    "category": "foundations",
    "description": "Master dynamic allocation of structures in kernel space. Combine structure knowledge with kernel memory management. This completes the kernel memory series and prepares for advanced concepts.",
    "exactRequirements": {
        "functionNames": [
            "kmem_structures_init",
            "kmem_structures_exit"
        ],
        "variables": [
            {
                "name": "dev",
                "type": "struct device_info*",
                "value": "kmalloc_result"
            }
        ],
        "outputMessages": [
            "Device allocated successfully",
            "Device ID: 100",
            "Device Name: eth0",
            "Device Status: 1 \\(active\\)",
            "Device Timestamp: 123456789",
            "Device memory freed successfully"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/slab.h",
            "linux/string.h"
        ],
        "mustContain": [
            "kmalloc",
            "sizeof(struct device_info)",
            "kstrdup",
            "dev->device_id",
            "dev->device_name",
            "kfree"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "structure_allocation",
            "name": "Structure Allocation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "kmalloc",
                "sizeof(struct device_info)",
                "GFP_KERNEL"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "embedded_string_allocation",
            "name": "Embedded String Allocation",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "kstrdup",
                "dev->device_name"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "proper_cleanup",
            "name": "Proper Memory Cleanup Order",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "kfree(dev->device_name)",
                "kfree(dev)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "structure_usage",
            "name": "Structure Member Access",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Device allocated successfully",
                    "exact": true
                },
                {
                    "pattern": "Device ID: 100",
                    "exact": true
                },
                {
                    "pattern": "Device Name: eth0",
                    "exact": true
                },
                {
                    "pattern": "Device Status: 1 \\(active\\)",
                    "exact": false
                },
                {
                    "pattern": "Device Timestamp: 123456789",
                    "exact": true
                },
                {
                    "pattern": "Device memory freed successfully",
                    "exact": true
                }
            ]
        }
    ],
    "multiPart": {
        "part": 3,
        "totalParts": 3,
        "nextProblemId": 15,
        "previousProblemId": 13
    }
});


// Problem 26: Module Parameters and Configuration
generatedTestDefinitions.set(26, {
    "name": "Module Parameters and Configuration",
    "category": "foundations",
    "description": "Learn to create configurable kernel modules using module parameters. Understand how to accept configuration from userspace during module loading. This is essential for production kernel modules.",
    "exactRequirements": {
        "functionNames": [
            "modparam_init",
            "modparam_exit"
        ],
        "variables": [
            {
                "name": "debug_level",
                "type": "int",
                "value": 1
            },
            {
                "name": "device_name",
                "type": "char*",
                "value": "default_device"
            },
            {
                "name": "enable_logging",
                "type": "bool",
                "value": true
            }
        ],
        "outputMessages": [
            "Module loaded with parameters:",
            "Debug Level: 1",
            "Device Name: default_device",
            "Logging Enabled: 1"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/moduleparam.h"
        ],
        "mustContain": [
            "module_param",
            "MODULE_PARM_DESC",
            "debug_level",
            "device_name",
            "enable_logging"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "parameter_declarations",
            "name": "Parameter Declarations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "static int debug_level",
                "static char *device_name",
                "static bool enable_logging"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "module_param_usage",
            "name": "module_param Macro Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "module_param(debug_level",
                "module_param(device_name",
                "module_param(enable_logging"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "parameter_descriptions",
            "name": "Parameter Descriptions",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "MODULE_PARM_DESC"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "parameter_output",
            "name": "Parameter Values Output",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Module loaded with parameters:",
                    "exact": true
                },
                {
                    "pattern": "Debug Level: 1",
                    "exact": true
                },
                {
                    "pattern": "Device Name: default_device",
                    "exact": true
                },
                {
                    "pattern": "Logging Enabled: 1",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 27: Kernel Error Handling and Return Codes
generatedTestDefinitions.set(27, {
    "name": "Kernel Error Handling and Return Codes",
    "category": "foundations",
    "description": "Learn proper error handling in kernel space using standard Linux error codes. Understand error propagation and cleanup patterns essential for reliable kernel code.",
    "exactRequirements": {
        "functionNames": [
            "error_handling_init",
            "error_handling_exit",
            "allocate_buffer",
            "process_data"
        ],
        "variables": [
            {
                "name": "buffer",
                "type": "char*",
                "value": "allocation_result"
            },
            {
                "name": "result",
                "type": "int",
                "value": "function_result"
            },
            {
                "name": "size",
                "type": "int",
                "value": 1024
            }
        ],
        "outputMessages": [
            "Buffer allocated successfully \\(1024 bytes\\)",
            "Data processed successfully",
            "Cleanup completed"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/slab.h",
            "linux/errno.h"
        ],
        "mustContain": [
            "ENOMEM",
            "EINVAL",
            "if (",
            "return -",
            "kfree"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "error_code_usage",
            "name": "Standard Error Code Usage",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "-ENOMEM",
                "-EINVAL"
            ],
            "prohibitedSymbols": [
                "return -1",
                "return 1"
            ]
        },
        {
            "id": "error_checking",
            "name": "Proper Error Checking",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "if (",
                "== NULL",
                "!buffer",
                "< 0"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "cleanup_handling",
            "name": "Cleanup on Error Paths",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "kfree"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "success_path",
            "name": "Success Path Output",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Buffer allocated successfully \\(1024 bytes\\)",
                    "exact": false
                },
                {
                    "pattern": "Data processed successfully",
                    "exact": true
                },
                {
                    "pattern": "Cleanup completed",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 28: Foundation Capstone: Complete Kernel Module
generatedTestDefinitions.set(28, {
    "name": "Foundation Capstone: Complete Kernel Module",
    "category": "foundations",
    "description": "Create a comprehensive kernel module that demonstrates all foundation concepts. This capstone project combines everything learned to build a production-ready kernel module with proper error handling, memory management, and configuration.",
    "exactRequirements": {
        "functionNames": [
            "capstone_init",
            "capstone_exit",
            "create_device",
            "destroy_device",
            "list_devices"
        ],
        "variables": [
            {
                "name": "max_devices",
                "type": "int",
                "value": 5
            },
            {
                "name": "buffer_size",
                "type": "int",
                "value": 1024
            },
            {
                "name": "debug_mode",
                "type": "bool",
                "value": false
            }
        ],
        "outputMessages": [
            "Foundation Capstone Module loaded",
            "Module parameters: max_devices=5, buffer_size=1024, debug_mode=0",
            "Device 1 \\(dev1\\) created successfully",
            "Device 2 \\(dev2\\) created successfully",
            "Device 3 \\(dev3\\) created successfully",
            "Active devices:",
            "Total active devices: 3"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/slab.h",
            "linux/string.h",
            "linux/moduleparam.h",
            "linux/errno.h"
        ],
        "mustContain": [
            "struct kernel_device",
            "create_device",
            "destroy_device",
            "kmalloc",
            "kfree",
            "module_param"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "structure_definition",
            "name": "Complete Structure Definition",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "struct kernel_device",
                "device_id",
                "char *name",
                "int status",
                "void *data_buffer",
                "size_t buffer_size"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "function_implementation",
            "name": "Required Functions Implemented",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "struct kernel_device *create_device",
                "void destroy_device",
                "void list_devices"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "memory_management",
            "name": "Proper Memory Management",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "kmalloc",
                "kstrdup",
                "kfree"
            ],
            "prohibitedSymbols": [
                "malloc",
                "free"
            ]
        },
        {
            "id": "comprehensive_output",
            "name": "Comprehensive Module Output",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "Foundation Capstone Module loaded",
                    "exact": true
                },
                {
                    "pattern": "Module parameters: max_devices=5, buffer_size=1024, debug_mode=0",
                    "exact": true
                },
                {
                    "pattern": "Device 1 \\(dev1\\) created successfully",
                    "exact": false
                },
                {
                    "pattern": "Device 2 \\(dev2\\) created successfully",
                    "exact": false
                },
                {
                    "pattern": "Device 3 \\(dev3\\) created successfully",
                    "exact": false
                },
                {
                    "pattern": "Total active devices: 3",
                    "exact": true
                }
            ]
        }
    ]
});


// Problem 29: Comprehensive Foundations Assessment
generatedTestDefinitions.set(29, {
    "name": "Comprehensive Foundations Assessment",
    "category": "foundations",
    "description": "Final comprehensive assessment integrating all foundation concepts: variables, functions, pointers, structures, memory management, control flow, and kernel-specific features. This validates complete mastery of kernel C foundations.",
    "exactRequirements": {
        "functionNames": [
            "assessment_init",
            "assessment_exit",
            "create_student",
            "destroy_student",
            "calculate_statistics",
            "process_grades",
            "enrollment_manager"
        ],
        "variables": [
            {
                "name": "max_capacity",
                "type": "static int",
                "value": 30
            },
            {
                "name": "debug_enabled",
                "type": "static bool",
                "value": false
            },
            {
                "name": "student_list",
                "type": "static struct student**",
                "value": "allocated"
            },
            {
                "name": "student_count",
                "type": "static int",
                "value": "calculated"
            }
        ],
        "outputMessages": [
            "=== Comprehensive Foundations Assessment ===",
            "Module parameters: max_capacity=30, debug_enabled=0",
            "Created student: ID=[0-9]+, Name=[A-Za-z]+, GPA=[0-9]\\.[0-9]+",
            "Processing grades:",
            "Final Statistics: [0-9]+ students, average GPA: [0-9]\\.[0-9]+"
        ],
        "requiredIncludes": [
            "linux/module.h",
            "linux/kernel.h",
            "linux/init.h",
            "linux/slab.h",
            "linux/string.h",
            "linux/moduleparam.h",
            "linux/errno.h"
        ],
        "mustContain": [
            "#define MAX_STUDENTS",
            "enum student_status",
            "struct student",
            "union grade_data",
            "kmalloc",
            "kfree",
            "module_param",
            "for (",
            "if (",
            "switch"
        ],
        "moduleInfo": {
            "license": "GPL"
        }
    },
    "testCases": [
        {
            "id": "all_structures_defined",
            "name": "All Required Structures Defined",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "enum student_status",
                "struct student",
                "union grade_data"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "memory_management",
            "name": "Proper Memory Management",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "kmalloc(",
                "kfree(",
                "kstrdup(",
                "GFP_KERNEL"
            ],
            "prohibitedSymbols": [
                "malloc",
                "free"
            ]
        },
        {
            "id": "function_implementations",
            "name": "All Functions Implemented",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "struct student *create_student",
                "void destroy_student",
                "void calculate_statistics",
                "void process_grades",
                "int enrollment_manager"
            ],
            "prohibitedSymbols": [
                "return NULL; // Placeholder"
            ]
        },
        {
            "id": "module_parameters",
            "name": "Module Parameters Properly Declared",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "module_param(max_capacity",
                "module_param(debug_enabled",
                "S_IRUGO"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "control_flow_usage",
            "name": "All Control Flow Structures Used",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "for (",
                "while (",
                "if (",
                "switch (",
                "break",
                "continue"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "pointer_operations",
            "name": "Pointer Operations and Dereferencing",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "struct student **",
                "student_list[i]",
                "*avg_gpa",
                "&average_gpa"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "union_bitfield_usage",
            "name": "Union and Bitfield Operations",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "union grade_data",
                "flags.passed",
                "flags.honors",
                "flags.credits"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "error_handling",
            "name": "Comprehensive Error Handling",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "if (!student_list)",
                "return -ENOMEM",
                "return -EIO",
                "pr_err("
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "memory_cleanup",
            "name": "Proper Memory Cleanup",
            "type": "code_analysis",
            "critical": true,
            "expectedSymbols": [
                "destroy_student(student_list[i])",
                "kfree(student_list)"
            ],
            "prohibitedSymbols": []
        },
        {
            "id": "comprehensive_output",
            "name": "Comprehensive Assessment Output",
            "type": "output_match",
            "critical": true,
            "expected": [
                {
                    "pattern": "=== Comprehensive Foundations Assessment ===",
                    "exact": true
                },
                {
                    "pattern": "Module parameters: max_capacity=30, debug_enabled=0",
                    "exact": true
                },
                {
                    "pattern": "Created student: ID=[0-9]+",
                    "exact": false
                },
                {
                    "pattern": "Final Statistics: [0-9]+ students",
                    "exact": false
                }
            ]
        }
    ]
});


module.exports = generatedTestDefinitions;
