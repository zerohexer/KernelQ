// Auto-generated from problems/ directory
// DO NOT EDIT THIS FILE DIRECTLY - Edit problems/*.json instead
// Generated at: 2025-08-16T15:12:26.269Z

const problemBank = [
  {
    "id": 1,
    "title": "Hello World - Multi-File Kernel Module",
    "difficulty": 1,
    "xp": 15,
    "phase": "foundations",
    "description": "Create your first multi-file kernel module with a separate header file. This introduces you to kernel module structure with proper file organization. Note: Module init/exit functions are static and don't need header declarations.",
    "concepts": [
      "multi-file modules",
      "header files",
      "module_init",
      "module_exit",
      "printk",
      "Makefile"
    ],
    "skills": [
      "Header file creation",
      "File organization",
      "Module lifecycle",
      "Kernel logging",
      "Build system understanding"
    ],
    "files": [
      {
        "name": "hello.h",
        "content": "#ifndef HELLO_H\n#define HELLO_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\n/* TODO: Add any shared constants or structures here */\n/* Note: Module init/exit functions are static and don't need declarations */\n\n#endif /* HELLO_H */",
        "readOnly": false,
        "language": "h"
      },
      {
        "name": "hello.c",
        "content": "#include \"hello.h\"\n\n/* TODO: Implement your init function */\nstatic int __init hello_init(void)\n{\n    /* TODO: Print \"Hello from multi-file kernel module!\" */\n    return 0;\n}\n\n/* TODO: Implement your exit function */\nstatic void __exit hello_exit(void)\n{\n    /* TODO: Print \"Goodbye from multi-file kernel module!\" */\n}\n\n/* TODO: Set module init and exit functions */\nmodule_init(hello_init);\nmodule_exit(hello_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Multi-file Hello World kernel module\");\nMODULE_VERSION(\"1.0\");",
        "readOnly": false,
        "language": "c"
      },
      {
        "name": "Makefile",
        "content": "# Multi-file kernel module Makefile\nobj-m += hello.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
        "readOnly": true,
        "language": "makefile"
      }
    ],
    "mainFile": "hello.c",
    "validation": {
      "exactRequirements": {
        "functionNames": [
          "hello_init",
          "hello_exit"
        ],
        "outputMessages": [
          "Hello from multi-file kernel module!",
          "Goodbye from multi-file kernel module!"
        ],
        "requiredIncludes": [
          "linux/module.h",
          "linux/kernel.h",
          "linux/init.h"
        ],
        "mustContain": [
          "printk",
          "KERN_INFO"
        ],
        "moduleInfo": {
          "license": "GPL"
        }
      },
      "testCases": [
        {
          "id": "header_structure",
          "name": "Header File Structure",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "#ifndef HELLO_H",
            "#define HELLO_H",
            "#endif"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "function_declarations",
          "name": "Function Declarations in Header",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "#ifndef HELLO_H",
            "#define HELLO_H"
          ],
          "prohibitedSymbols": [
            "static.*hello_init",
            "static.*hello_exit"
          ]
        },
        {
          "id": "exact_output",
          "name": "Exact Output Messages",
          "type": "output_match",
          "critical": true,
          "expected": [
            {
              "pattern": "Hello from multi-file kernel module!",
              "exact": true
            },
            {
              "pattern": "Goodbye from multi-file kernel module!",
              "exact": true
            }
          ]
        },
        {
          "id": "module_info",
          "name": "Module Information",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "MODULE_LICENSE",
            "MODULE_AUTHOR",
            "MODULE_DESCRIPTION"
          ],
          "prohibitedSymbols": []
        }
      ]
    },
    "inputOutput": {
      "expectedOutput": [
        "Hello from multi-file kernel module!",
        "Goodbye from multi-file kernel module!"
      ],
      "requirements": [
        "Use required function names: hello_init, hello_exit",
        "Print exact message format for backend validation compatibility",
        "Must include: linux/module.h, linux/kernel.h, linux/init.h",
        "Code must contain: printk, KERN_INFO",
        "Must include MODULE_LICENSE(\"GPL\")"
      ]
    }
  },
  {
    "id": 2,
    "title": "Create Your First Variable",
    "difficulty": 1,
    "xp": 15,
    "phase": "foundations",
    "description": "Learn to create variables in kernel modules using proper file structure. You'll work with separate header and C files - a fundamental practice in professional kernel development that builds good coding habits from day one.",
    "concepts": [
      "variable declaration",
      "variable definition",
      "header files",
      "extern keyword",
      "file structure"
    ],
    "skills": [
      "Proper file organization",
      "Header/C file separation",
      "Variable management",
      "Professional coding habits"
    ],
    "files": [
      {
        "name": "variables.h",
        "content": "#ifndef VARIABLES_H\n#define VARIABLES_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\n/* TODO: Declare your variable here */\n/* extern int my_number; */\n\n#endif /* VARIABLES_H */",
        "readOnly": false,
        "language": "h"
      },
      {
        "name": "variables.c",
        "content": "#include \"variables.h\"\n\n/* TODO: Define your variable here with value 42 */\n/* int my_number = 42; */\n\nstatic int __init variables_init(void)\n{\n    printk(KERN_INFO \"Variables module loaded\\n\");\n    return 0;\n}\n\nstatic void __exit variables_exit(void)\n{\n    printk(KERN_INFO \"Variables module unloaded\\n\");\n}\n\nmodule_init(variables_init);\nmodule_exit(variables_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Learning variables with proper file structure\");\nMODULE_VERSION(\"1.0\");",
        "readOnly": false,
        "language": "c"
      },
      {
        "name": "Makefile",
        "content": "# Variables module Makefile\nobj-m += variables.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
        "readOnly": true,
        "language": "makefile"
      }
    ],
    "mainFile": "variables.c",
    "validation": {
      "exactRequirements": {
        "functionNames": [
          "variables_init",
          "variables_exit"
        ],
        "variables": [
          {
            "name": "my_number",
            "type": "int",
            "value": 42
          }
        ],
        "outputMessages": [
          "Variables module loaded"
        ],
        "requiredIncludes": [
          "linux/module.h",
          "linux/kernel.h",
          "linux/init.h"
        ],
        "mustContain": [
          "#ifndef VARIABLES_H",
          "#define VARIABLES_H",
          "extern int my_number",
          "int my_number = 42",
          "#include \"variables.h\""
        ],
        "moduleInfo": {
          "license": "GPL"
        }
      },
      "testCases": [
        {
          "id": "header_guards",
          "name": "Proper Header Guards",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "#ifndef VARIABLES_H",
            "#define VARIABLES_H",
            "#endif"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "variable_declaration",
          "name": "Variable Declaration in Header",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "extern int my_number"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "variable_definition",
          "name": "Variable Definition in C File",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "int my_number = 42"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "header_inclusion",
          "name": "Include Own Header First",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "#include \"variables.h\""
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "exact_output",
          "name": "Exact Output Message",
          "type": "output_match",
          "critical": true,
          "expected": [
            {
              "pattern": "Variables module loaded",
              "exact": true
            }
          ]
        }
      ]
    },
    "inputOutput": {
      "expectedOutput": [
        "Variables module loaded"
      ],
      "requirements": [
        "Use required function names: variables_init, variables_exit",
        "Use required variable names: my_number",
        "Print exact message format for backend validation compatibility",
        "Must include: linux/module.h, linux/kernel.h, linux/init.h",
        "Code must contain: #ifndef VARIABLES_H, #define VARIABLES_H, extern int my_number, int my_number = 42, #include \"variables.h\"",
        "Must include MODULE_LICENSE(\"GPL\")",
        "Must include header file: variables.h"
      ]
    }
  },
  {
    "id": 3,
    "title": "Use Your Variable",
    "difficulty": 2,
    "xp": 20,
    "phase": "foundations",
    "description": "Learn to use variables by printing them with proper format specifiers. Build on your knowledge of header/C file structure while introducing printk formatting - a crucial skill for kernel debugging.",
    "concepts": [
      "printk formatting",
      "format specifiers",
      "function declarations",
      "function definitions",
      "function calls"
    ],
    "skills": [
      "Using variables in functions",
      "printk with format specifiers",
      "Function implementation",
      "Debugging output"
    ],
    "files": [
      {
        "name": "use_vars.h",
        "content": "#ifndef USE_VARS_H\n#define USE_VARS_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\nextern int my_number;\n\n#endif /* USE_VARS_H */",
        "readOnly": false,
        "language": "h"
      },
      {
        "name": "use_vars.c",
        "content": "#include \"use_vars.h\"\n\nint my_number = 42;\n\n/* TODO: Implement the function */\n/* void print_my_number(void) {\n *     printk(KERN_INFO \"My number is: %d\\n\", my_number);\n * } */\n\nstatic int __init use_vars_init(void)\n{\n    printk(KERN_INFO \"Variable usage module loaded\\n\");\n    /* TODO: Call your function here */\n    /* print_my_number(); */\n    return 0;\n}\n\nstatic void __exit use_vars_exit(void)\n{\n    printk(KERN_INFO \"Variable usage module unloaded\\n\");\n}\n\nmodule_init(use_vars_init);\nmodule_exit(use_vars_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Learning to use variables with printk formatting\");\nMODULE_VERSION(\"1.0\");",
        "readOnly": false,
        "language": "c"
      },
      {
        "name": "Makefile",
        "content": "# Variable usage module Makefile\nobj-m += use_vars.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
        "readOnly": true,
        "language": "makefile"
      }
    ],
    "mainFile": "use_vars.c",
    "validation": {
      "exactRequirements": {
        "functionNames": [
          "use_vars_init",
          "use_vars_exit",
          "print_my_number"
        ],
        "variables": [
          {
            "name": "my_number",
            "type": "int",
            "value": 42
          }
        ],
        "outputMessages": [
          "Variable usage module loaded",
          "My number is: 42"
        ],
        "requiredIncludes": [
          "linux/module.h",
          "linux/kernel.h",
          "linux/init.h"
        ],
        "mustContain": [
          "void print_my_number(void)",
          "printk(KERN_INFO \"My number is: %d\\n\", my_number)",
          "print_my_number()"
        ],
        "moduleInfo": {
          "license": "GPL"
        }
      },
      "testCases": [
        {
          "id": "function_implementation",
          "name": "Function Implementation",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "void print_my_number(void)"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "format_specifier",
          "name": "Correct Format Specifier Usage",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "%d",
            "my_number"
          ],
          "prohibitedSymbols": [
            "%s",
            "%c"
          ]
        },
        {
          "id": "function_call",
          "name": "Function Call in Init",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "print_my_number()"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "exact_output",
          "name": "Exact Output Messages",
          "type": "output_match",
          "critical": true,
          "expected": [
            {
              "pattern": "Variable usage module loaded",
              "exact": true
            },
            {
              "pattern": "My number is: 42",
              "exact": true
            }
          ]
        }
      ]
    },
    "inputOutput": {
      "expectedOutput": [
        "Variable usage module loaded",
        "My number is: 42"
      ],
      "requirements": [
        "Use required function names: use_vars_init, use_vars_exit, print_my_number",
        "Use required variable names: my_number",
        "Print exact message format for backend validation compatibility",
        "Must include: linux/module.h, linux/kernel.h, linux/init.h",
        "Code must contain: void print_my_number(void), printk(KERN_INFO \"My number is: %d\\n\", my_number), print_my_number()",
        "Must include MODULE_LICENSE(\"GPL\")"
      ]
    }
  },
  {
    "id": 4,
    "title": "Multiple Variables and Data Types",
    "difficulty": 2,
    "xp": 25,
    "phase": "foundations",
    "description": "Work with multiple variables of different data types (int, char, bool) in a well-structured kernel module. Learn to manage different data types and their corresponding format specifiers while maintaining clean code organization.",
    "concepts": [
      "multiple data types",
      "integer variables",
      "character variables",
      "boolean variables",
      "format specifiers for different types"
    ],
    "skills": [
      "Managing multiple variables",
      "Understanding data type differences",
      "Using appropriate format specifiers",
      "Code organization with multiple variables"
    ],
    "files": [
      {
        "name": "multi_vars.h",
        "content": "#ifndef MULTI_VARS_H\n#define MULTI_VARS_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/types.h>\n\n/* TODO: Declare multiple variables */\n/* extern int student_id; */\n/* extern char student_grade; */\n/* extern bool student_passed; */\n\nvoid print_student_info(void);\n\n#endif /* MULTI_VARS_H */",
        "readOnly": false,
        "language": "h"
      },
      {
        "name": "multi_vars.c",
        "content": "#include \"multi_vars.h\"\n\n/* TODO: Define your variables with these values:\n * student_id = 12345\n * student_grade = 'A'\n * student_passed = true\n */\n\nvoid print_student_info(void)\n{\n    /* TODO: Print all variables in this exact format:\n     * printk(KERN_INFO \"Student ID: %d\\n\", student_id);\n     * printk(KERN_INFO \"Student Grade: %c\\n\", student_grade);\n     * printk(KERN_INFO \"Student Passed: %d\\n\", student_passed);\n     */\n}\n\nstatic int __init multi_vars_init(void)\n{\n    printk(KERN_INFO \"Multi-variable module loaded\\n\");\n    print_student_info();\n    return 0;\n}\n\nstatic void __exit multi_vars_exit(void)\n{\n    printk(KERN_INFO \"Multi-variable module unloaded\\n\");\n}\n\nmodule_init(multi_vars_init);\nmodule_exit(multi_vars_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Learning multiple variables and data types\");\nMODULE_VERSION(\"1.0\");",
        "readOnly": false,
        "language": "c"
      },
      {
        "name": "Makefile",
        "content": "# Multi-variable module Makefile\nobj-m += multi_vars.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
        "readOnly": true,
        "language": "makefile"
      }
    ],
    "mainFile": "multi_vars.c",
    "validation": {
      "exactRequirements": {
        "functionNames": [
          "multi_vars_init",
          "multi_vars_exit",
          "print_student_info"
        ],
        "variables": [
          {
            "name": "student_id",
            "type": "int",
            "value": 12345
          },
          {
            "name": "student_grade",
            "type": "char",
            "value": "'A'"
          },
          {
            "name": "student_passed",
            "type": "bool",
            "value": true
          }
        ],
        "outputMessages": [
          "Multi-variable module loaded",
          "Student ID: 12345",
          "Student Grade: A",
          "Student Passed: 1"
        ],
        "requiredIncludes": [
          "linux/module.h",
          "linux/kernel.h",
          "linux/init.h",
          "linux/types.h"
        ],
        "mustContain": [
          "extern int student_id",
          "extern char student_grade",
          "extern bool student_passed",
          "int student_id = 12345",
          "char student_grade = 'A'",
          "bool student_passed = true"
        ],
        "moduleInfo": {
          "license": "GPL"
        }
      },
      "testCases": [
        {
          "id": "multiple_declarations",
          "name": "Multiple Variable Declarations",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "extern int student_id",
            "extern char student_grade",
            "extern bool student_passed"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "multiple_definitions",
          "name": "Multiple Variable Definitions",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "int student_id = 12345",
            "char student_grade = 'A'",
            "bool student_passed = true"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "format_specifiers",
          "name": "Correct Format Specifiers for All Types",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "%d",
            "student_id",
            "%c",
            "student_grade",
            "student_passed"
          ],
          "prohibitedSymbols": [
            "\"%s\""
          ]
        },
        {
          "id": "function_structure",
          "name": "Print Function Implementation",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "void print_student_info(void)"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "exact_output",
          "name": "Exact Output Messages",
          "type": "output_match",
          "critical": true,
          "expected": [
            {
              "pattern": "Multi-variable module loaded",
              "exact": true
            },
            {
              "pattern": "Student ID: 12345",
              "exact": true
            },
            {
              "pattern": "Student Grade: A",
              "exact": true
            },
            {
              "pattern": "Student Passed: 1",
              "exact": true
            }
          ]
        }
      ]
    },
    "inputOutput": {
      "expectedOutput": [
        "Multi-variable module loaded",
        "Student ID: 12345",
        "Student Grade: A",
        "Student Passed: 1"
      ],
      "requirements": [
        "Use required function names: multi_vars_init, multi_vars_exit, print_student_info",
        "Use required variable names: student_id, student_grade, student_passed",
        "Print exact message format for backend validation compatibility",
        "Must include: linux/module.h, linux/kernel.h, linux/init.h, linux/types.h",
        "Code must contain: extern int student_id, extern char student_grade, extern bool student_passed, int student_id = 12345, char student_grade = 'A', bool student_passed = true",
        "Must include MODULE_LICENSE(\"GPL\")"
      ]
    }
  },
  {
    "id": 5,
    "title": "Function Parameters and Return Values",
    "difficulty": 3,
    "xp": 30,
    "phase": "foundations",
    "description": "Learn to create functions that accept parameters and return values. This introduces function design patterns commonly used in kernel development, building towards more complex kernel programming concepts.",
    "concepts": [
      "function parameters",
      "return values",
      "function calls with arguments",
      "local variables",
      "modulo operator",
      "boolean logic"
    ],
    "skills": [
      "Writing functions with parameters",
      "Understanding return values",
      "Function composition",
      "Mathematical operations in kernel space",
      "Boolean operations and logic"
    ],
    "files": [
      {
        "name": "functions.h",
        "content": "#ifndef FUNCTIONS_H\n#define FUNCTIONS_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/types.h>\n\n/* TODO: Declare functions with parameters */\n/* int add_numbers(int a, int b); */\n/* void print_calculation(int num1, int num2, int result); */\n/* bool is_even(int number); */\n\n#endif /* FUNCTIONS_H */",
        "readOnly": false,
        "language": "h"
      },
      {
        "name": "functions.c",
        "content": "#include \"functions.h\"\n\n/* TODO: Implement add_numbers function */\n/* int add_numbers(int a, int b) {\n *     return a + b;\n * } */\n\n/* TODO: Implement print_calculation function */\n/* void print_calculation(int num1, int num2, int result) {\n *     printk(KERN_INFO \"%d + %d = %d\\n\", num1, num2, result);\n * } */\n\n/* TODO: Implement is_even function */\n/* bool is_even(int number) {\n *     return (number % 2 == 0);\n * } */\n\nstatic int __init functions_init(void)\n{\n    int first = 15;\n    int second = 25;\n    int sum;\n    bool even_check;\n    \n    printk(KERN_INFO \"Function parameters module loaded\\n\");\n    \n    /* TODO: Call add_numbers and store result */\n    /* sum = add_numbers(first, second); */\n    \n    /* TODO: Call print_calculation to display result */\n    /* print_calculation(first, second, sum); */\n    \n    /* TODO: Check if sum is even and print result */\n    /* even_check = is_even(sum); */\n    /* printk(KERN_INFO \"Sum is even: %d\\n\", even_check); */\n    \n    return 0;\n}\n\nstatic void __exit functions_exit(void)\n{\n    printk(KERN_INFO \"Function parameters module unloaded\\n\");\n}\n\nmodule_init(functions_init);\nmodule_exit(functions_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Learning function parameters and return values\");\nMODULE_VERSION(\"1.0\");",
        "readOnly": false,
        "language": "c"
      },
      {
        "name": "Makefile",
        "content": "# Functions module Makefile\nobj-m += functions.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
        "readOnly": true,
        "language": "makefile"
      }
    ],
    "mainFile": "functions.c",
    "validation": {
      "exactRequirements": {
        "functionNames": [
          "functions_init",
          "functions_exit",
          "add_numbers",
          "print_calculation",
          "is_even"
        ],
        "variables": [
          {
            "name": "first",
            "type": "int",
            "value": 15
          },
          {
            "name": "second",
            "type": "int",
            "value": 25
          }
        ],
        "outputMessages": [
          "Function parameters module loaded",
          "15 + 25 = 40",
          "Sum is even: 1"
        ],
        "requiredIncludes": [
          "linux/module.h",
          "linux/kernel.h",
          "linux/init.h",
          "linux/types.h"
        ],
        "mustContain": [
          "int add_numbers(int a, int b)",
          "void print_calculation(int num1, int num2, int result)",
          "bool is_even(int number)",
          "return a + b",
          "number % 2 == 0",
          "add_numbers(first, second)"
        ],
        "moduleInfo": {
          "license": "GPL"
        }
      },
      "testCases": [
        {
          "id": "function_declarations",
          "name": "Function Declarations in Header",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "int add_numbers(int a, int b)",
            "void print_calculation(int num1, int num2, int result)",
            "bool is_even(int number)"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "function_implementations",
          "name": "Function Implementations",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "return a + b",
            "return (number % 2 == 0)"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "function_calls",
          "name": "Proper Function Calls",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "add_numbers(first, second)",
            "print_calculation(first, second, sum)",
            "is_even(sum)"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "modulo_operator",
          "name": "Modulo Operator Usage",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "number % 2"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "return_values",
          "name": "Proper Return Value Usage",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "sum = add_numbers",
            "even_check = is_even"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "exact_output",
          "name": "Exact Output Messages",
          "type": "output_match",
          "critical": true,
          "expected": [
            {
              "pattern": "Function parameters module loaded",
              "exact": true
            },
            {
              "pattern": "15 + 25 = 40",
              "exact": true
            },
            {
              "pattern": "Sum is even: 1",
              "exact": true
            }
          ]
        }
      ]
    },
    "inputOutput": {
      "expectedOutput": [
        "Function parameters module loaded",
        "15 + 25 = 40",
        "Sum is even: 1"
      ],
      "requirements": [
        "Use required function names: functions_init, functions_exit, add_numbers, print_calculation, is_even",
        "Use required variable names: first, second",
        "Print exact message format for backend validation compatibility",
        "Must include: linux/module.h, linux/kernel.h, linux/init.h, linux/types.h",
        "Code must contain: int add_numbers(int a, int b), void print_calculation(int num1, int num2, int result), bool is_even(int number), return a + b, number % 2 == 0, add_numbers(first, second)",
        "Must include MODULE_LICENSE(\"GPL\")"
      ]
    }
  },
  {
    "id": 80,
    "title": "Simple Driver - File Creation Challenge",
    "difficulty": 5,
    "xp": 60,
    "phase": "drivers",
    "description": "Create a simple kernel driver by implementing missing files. You are given a partial driver structure and need to create the missing source and header files to complete the driver implementation.",
    "concepts": [
      "file creation",
      "multi-file architecture",
      "character devices",
      "device operations",
      "kernel module structure"
    ],
    "skills": [
      "Creating header files",
      "Implementing device operations",
      "Character device management",
      "Resource management",
      "Multi-file project organization"
    ],
    "files": [
      {
        "name": "driver_main.c",
        "content": "#include \"driver_main.h\"\n#include \"device_ops.h\"\n\n/* Main driver structure */\nstruct simple_driver_data *driver_data = NULL;\n\nstatic int __init simple_driver_init(void)\n{\n    int result;\n    \n    pr_info(\"simple_driver: initializing\\n\");\n    \n    /* TODO: Allocate driver data structure */\n    driver_data = kzalloc(sizeof(struct simple_driver_data), GFP_KERNEL);\n    if (!driver_data) {\n        pr_err(\"simple_driver: failed to allocate driver data\\n\");\n        return -ENOMEM;\n    }\n    \n    /* TODO: Initialize the device */\n    result = device_init(driver_data);\n    if (result < 0) {\n        pr_err(\"simple_driver: device initialization failed\\n\");\n        kfree(driver_data);\n        return result;\n    }\n    \n    pr_info(\"simple_driver: loaded successfully\\n\");\n    return 0;\n}\n\nstatic void __exit simple_driver_exit(void)\n{\n    pr_info(\"simple_driver: unloading\\n\");\n    \n    if (driver_data) {\n        /* TODO: Clean up the device */\n        device_cleanup(driver_data);\n        kfree(driver_data);\n    }\n    \n    pr_info(\"simple_driver: unloaded\\n\");\n}\n\nmodule_init(simple_driver_init);\nmodule_exit(simple_driver_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Simple Driver Creation Challenge\");\nMODULE_VERSION(\"1.0\");",
        "readOnly": false,
        "language": "c"
      },
      {
        "name": "driver_main.h",
        "content": "#ifndef DRIVER_MAIN_H\n#define DRIVER_MAIN_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/fs.h>\n#include <linux/cdev.h>\n#include <linux/device.h>\n#include <linux/slab.h>\n#include <linux/uaccess.h>\n\n#define DRIVER_NAME \"simple_driver\"\n#define DEVICE_NAME \"simpledev\"\n#define CLASS_NAME \"simple_class\"\n\n/* Driver data structure */\nstruct simple_driver_data {\n    dev_t device_number;\n    struct cdev cdev;\n    struct class *device_class;\n    struct device *device_struct;\n    char *buffer;\n    size_t buffer_size;\n};\n\n/* Global driver data */\nextern struct simple_driver_data *driver_data;\n\n#endif /* DRIVER_MAIN_H */",
        "readOnly": false,
        "language": "h"
      },
      {
        "name": "Makefile",
        "content": "# Simple driver Makefile\nobj-m += simple_driver.o\n\n# Object files that make up this module\nsimple_driver-objs := driver_main.o device_ops.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
        "readOnly": true,
        "language": "makefile"
      }
    ],
    "mainFile": "driver_main.c",
    "requiredFiles": [
      {
        "name": "device_ops.h",
        "description": "Header file containing device operation declarations",
        "hints": [
          "Should include function declarations for device_init() and device_cleanup()",
          "Should include any necessary includes for device operations",
          "Should define any constants needed for device operations"
        ]
      },
      {
        "name": "device_ops.c",
        "description": "Implementation file containing device operations",
        "hints": [
          "Should implement device_init() function that sets up character device",
          "Should implement device_cleanup() function that cleans up resources",
          "Should include file operations structure with basic read/write functions"
        ]
      }
    ],
    "validation": {
      "exactRequirements": {
        "functionNames": [
          "device_init",
          "device_cleanup",
          "simple_driver_init",
          "simple_driver_exit"
        ],
        "variables": [
          {
            "name": "device_init",
            "type": "function",
            "value": "int device_init(struct simple_driver_data *data)"
          },
          {
            "name": "device_cleanup",
            "type": "function",
            "value": "void device_cleanup(struct simple_driver_data *data)"
          }
        ],
        "outputMessages": [
          "simple_driver: loaded successfully",
          "simple_driver: unloaded"
        ],
        "requiredIncludes": [
          "linux/module.h",
          "linux/kernel.h",
          "linux/init.h",
          "linux/fs.h",
          "linux/cdev.h"
        ],
        "mustContain": [
          "alloc_chrdev_region",
          "cdev_init",
          "cdev_add",
          "class_create",
          "device_create"
        ],
        "moduleInfo": {
          "license": "GPL"
        }
      },
      "testCases": [
        {
          "id": "driver_functionality",
          "name": "Driver Functionality Test",
          "type": "kernel_project_test",
          "critical": true,
          "testScenario": {
            "userspaceApps": [
              {
                "name": "device_tester",
                "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <fcntl.h>\\n#include <unistd.h>\\n#include <string.h>\\n\\n#define DEVICE_PATH \"/dev/simpledev\"\\n\\nint main() {\\n    int fd;\\n    char buffer[256];\\n    ssize_t bytes;\\n    \\n    printf(\"=== Simple Driver Test ===\\\\n\");\\n    \\n    fd = open(DEVICE_PATH, O_RDWR);\\n    if (fd < 0) {\\n        printf(\"INFO: Device not found (this is expected in basic test)\\\\n\");\\n        return 0;\\n    }\\n    \\n    printf(\"SUCCESS: Device opened\\\\n\");\\n    \\n    bytes = write(fd, \"test\", 4);\\n    if (bytes > 0) {\\n        printf(\"SUCCESS: Written %zd bytes\\\\n\", bytes);\\n    }\\n    \\n    close(fd);\\n    printf(\"SUCCESS: Driver test completed\\\\n\");\\n    return 0;\\n}"
              }
            ],
            "setupCommands": [
              "echo 'Setting up simple driver test'",
              "mkdir -p /dev"
            ],
            "testCommands": [
              "echo 'Creating device node...'",
              "major=$(grep simpledev /proc/devices | cut -d' ' -f1)",
              "if [ -z \"$major\" ]; then echo 'ERROR: simpledev not found'; exit 1; fi",
              "mknod /dev/simpledev c $major 0",
              "chmod 666 /dev/simpledev",
              "echo 'Running driver test'",
              "/bin/device_tester",
              "echo 'Checking driver registration'",
              "grep simple_driver /proc/modules 2>/dev/null || echo 'Driver loaded successfully'"
            ],
            "expected": {
              "dmesg": [
                "simple_driver.*loaded successfully",
                "simple_driver.*unloaded"
              ],
              "stdout": [
                "Simple Driver Test",
                "SUCCESS: Driver test completed"
              ]
            },
            "timeout": 30
          }
        }
      ]
    },
    "inputOutput": {
      "expectedOutput": [
        "simple_driver: loaded successfully",
        "simple_driver: unloaded"
      ],
      "requirements": [
        "Use required function names: device_init, device_cleanup, simple_driver_init, simple_driver_exit",
        "Use required variable names: device_init, device_cleanup",
        "Print exact message format for backend validation compatibility",
        "Must include: linux/module.h, linux/kernel.h, linux/init.h, linux/fs.h, linux/cdev.h",
        "Code must contain: alloc_chrdev_region, cdev_init, cdev_add, class_create, device_create",
        "Must include MODULE_LICENSE(\"GPL\")",
        "Test Environment: Create missing device operation files to complete the driver",
        "Userspace Test: Basic device testing will be performed automatically",
        "Test Setup: Create device_ops.h with function declarations",
        "Test Setup: Create device_ops.c with complete implementation",
        "Test Setup: Ensure all required kernel APIs are used"
      ]
    }
  }
];

export default problemBank;
