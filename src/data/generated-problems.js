// Auto-generated from problems/ directory
// DO NOT EDIT THIS FILE DIRECTLY - Edit problems/*.json instead
// Generated at: 2025-07-19T15:00:10.978Z

const problemBank = [
  {
    "id": 1,
    "title": "Hello World - Multi-File Kernel Module",
    "difficulty": 1,
    "xp": 15,
    "phase": "foundations",
    "description": "Create your first multi-file kernel module with a separate header file. This introduces you to kernel module structure with proper file organization. Note: Module init/exit functions are static and don't need header declarations.",
    "concepts": [
      "multi-file modules",
      "header files",
      "module_init",
      "module_exit",
      "printk",
      "Makefile"
    ],
    "skills": [
      "Header file creation",
      "File organization",
      "Module lifecycle",
      "Kernel logging",
      "Build system understanding"
    ],
    "files": [
      {
        "name": "hello.h",
        "content": "#ifndef HELLO_H\n#define HELLO_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\n/* TODO: Add any shared constants or structures here */\n/* Note: Module init/exit functions are static and don't need declarations */\n\n#endif /* HELLO_H */",
        "readOnly": false,
        "language": "h"
      },
      {
        "name": "hello.c",
        "content": "#include \"hello.h\"\n\n/* TODO: Implement your init function */\nstatic int __init hello_init(void)\n{\n    /* TODO: Print \"Hello from multi-file kernel module!\" */\n    return 0;\n}\n\n/* TODO: Implement your exit function */\nstatic void __exit hello_exit(void)\n{\n    /* TODO: Print \"Goodbye from multi-file kernel module!\" */\n}\n\n/* TODO: Set module init and exit functions */\nmodule_init(hello_init);\nmodule_exit(hello_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Multi-file Hello World kernel module\");\nMODULE_VERSION(\"1.0\");",
        "readOnly": false,
        "language": "c"
      },
      {
        "name": "Makefile",
        "content": "# Multi-file kernel module Makefile\nobj-m += hello.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
        "readOnly": true,
        "language": "makefile"
      }
    ],
    "mainFile": "hello.c",
    "validation": {
      "exactRequirements": {
        "functionNames": [
          "hello_init",
          "hello_exit"
        ],
        "outputMessages": [
          "Hello from multi-file kernel module!",
          "Goodbye from multi-file kernel module!"
        ],
        "requiredIncludes": [
          "linux/module.h",
          "linux/kernel.h",
          "linux/init.h"
        ],
        "mustContain": [
          "printk",
          "KERN_INFO"
        ],
        "moduleInfo": {
          "license": "GPL"
        }
      },
      "testCases": [
        {
          "id": "header_structure",
          "name": "Header File Structure",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "#ifndef HELLO_H",
            "#define HELLO_H",
            "#endif"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "function_declarations",
          "name": "Function Declarations in Header",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "#ifndef HELLO_H",
            "#define HELLO_H"
          ],
          "prohibitedSymbols": [
            "static.*hello_init",
            "static.*hello_exit"
          ]
        },
        {
          "id": "exact_output",
          "name": "Exact Output Messages",
          "type": "output_match",
          "critical": true,
          "expected": [
            {
              "pattern": "Hello from multi-file kernel module!",
              "exact": true
            },
            {
              "pattern": "Goodbye from multi-file kernel module!",
              "exact": true
            }
          ]
        },
        {
          "id": "module_info",
          "name": "Module Information",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "MODULE_LICENSE",
            "MODULE_AUTHOR",
            "MODULE_DESCRIPTION"
          ],
          "prohibitedSymbols": []
        }
      ]
    },
    "inputOutput": {
      "expectedOutput": [
        "Hello from multi-file kernel module!",
        "Goodbye from multi-file kernel module!"
      ],
      "requirements": [
        "Use required function names: hello_init, hello_exit",
        "Print exact message format for backend validation compatibility",
        "Must include: linux/module.h, linux/kernel.h, linux/init.h",
        "Code must contain: printk, KERN_INFO",
        "Must include MODULE_LICENSE(\"GPL\")"
      ]
    }
  },
  {
    "id": 2,
    "title": "Variables and Data Types",
    "difficulty": 2,
    "xp": 20,
    "phase": "foundations",
    "description": "Learn to work with different data types in kernel space. Create variables of different types, define them in a header file, and print their values using printk. This introduces kernel-space variable declaration and proper file organization.",
    "concepts": [
      "kernel data types",
      "variable declaration",
      "extern declarations",
      "printk formatting",
      "global variables"
    ],
    "skills": [
      "Variable management",
      "Header/source separation",
      "Data type understanding",
      "Kernel logging with formatting"
    ],
    "files": [
      {
        "name": "variables.h",
        "content": "#ifndef VARIABLES_H\n#define VARIABLES_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/types.h>\n\n/* TODO: Declare global variables with exact names and values:\n * extern int my_int;\n * extern char my_char;\n * extern bool my_bool;\n */\n\n#endif /* VARIABLES_H */",
        "readOnly": false,
        "language": "h"
      },
      {
        "name": "variables.c",
        "content": "#include \"variables.h\"\n\n/* TODO: Define the variables declared in header:\n * int my_int = 42;\n * char my_char = 'K';\n * bool my_bool = true;\n */\n\nstatic int __init variables_init(void)\n{\n    /* TODO: Print the variables in exact format:\n     * printk(KERN_INFO \"Integer: %d\\n\", my_int);\n     * printk(KERN_INFO \"Character: %c\\n\", my_char);\n     * printk(KERN_INFO \"Boolean: %d\\n\", my_bool);\n     */\n    return 0;\n}\n\nstatic void __exit variables_exit(void)\n{\n    printk(KERN_INFO \"Variables module unloaded\\n\");\n}\n\nmodule_init(variables_init);\nmodule_exit(variables_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Variables and data types demonstration module\");\nMODULE_VERSION(\"1.0\");",
        "readOnly": false,
        "language": "c"
      },
      {
        "name": "Makefile",
        "content": "# Variables module Makefile\nobj-m += variables.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
        "readOnly": true,
        "language": "makefile"
      }
    ],
    "mainFile": "variables.c",
    "validation": {
      "exactRequirements": {
        "functionNames": [
          "variables_init",
          "variables_exit"
        ],
        "variables": [
          {
            "name": "my_int",
            "type": "int",
            "value": 42
          },
          {
            "name": "my_char",
            "type": "char",
            "value": "'K'"
          },
          {
            "name": "my_bool",
            "type": "bool",
            "value": true
          }
        ],
        "outputMessages": [
          "Integer: 42",
          "Character: K",
          "Boolean: 1",
          "Header must declare: extern int my_int",
          "Header must declare: extern char my_char",
          "Header must declare: extern bool my_bool"
        ],
        "requiredIncludes": [
          "linux/module.h",
          "linux/kernel.h",
          "linux/init.h",
          "linux/types.h"
        ],
        "mustContain": [
          "printk",
          "KERN_INFO",
          "extern"
        ],
        "moduleInfo": {
          "license": "GPL"
        }
      },
      "testCases": [
        {
          "id": "header_declarations",
          "name": "Header Variable Declarations",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "extern int my_int",
            "extern char my_char",
            "extern bool my_bool"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "source_definitions",
          "name": "Source Variable Definitions",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "int my_int = 42",
            "char my_char = 'K'",
            "bool my_bool = true"
          ],
          "prohibitedSymbols": [
            "int my_int.*variables\\.h",
            "char my_char.*variables\\.h",
            "bool my_bool.*variables\\.h"
          ]
        },
        {
          "id": "exact_output",
          "name": "Exact Output Format",
          "type": "output_match",
          "critical": true,
          "expected": [
            {
              "pattern": "Integer: 42",
              "exact": true
            },
            {
              "pattern": "Character: K",
              "exact": true
            },
            {
              "pattern": "Boolean: 1",
              "exact": true
            }
          ]
        },
        {
          "id": "printk_usage",
          "name": "Proper printk Usage",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "printk",
            "KERN_INFO"
          ],
          "prohibitedSymbols": [
            "printf"
          ]
        },
        {
          "id": "header_inclusion",
          "name": "Header File Inclusion",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "#include \"variables.h\""
          ],
          "prohibitedSymbols": []
        }
      ]
    },
    "inputOutput": {
      "expectedOutput": [
        "Integer: 42",
        "Character: K",
        "Boolean: 1",
        "Header must declare: extern int my_int",
        "Header must declare: extern char my_char",
        "Header must declare: extern bool my_bool"
      ],
      "requirements": [
        "Use required function names: variables_init, variables_exit",
        "Use required variable names: my_int, my_char, my_bool",
        "Print exact message format for backend validation compatibility",
        "Must include: linux/module.h, linux/kernel.h, linux/init.h, linux/types.h",
        "Code must contain: printk, KERN_INFO, extern",
        "Must include MODULE_LICENSE(\"GPL\")",
        "Must include header file: variables.h"
      ]
    }
  },
  {
    "id": 3,
    "title": "Arrays and Loops in Kernel Space",
    "difficulty": 3,
    "xp": 25,
    "phase": "foundations",
    "description": "Learn to work with arrays and loops in kernel space. Create an array of integers, define utility functions in a header file, and use a for loop to print each element. This introduces fundamental C programming concepts in kernel context with proper multi-file organization.",
    "concepts": [
      "arrays",
      "for loops",
      "array indexing",
      "function prototypes",
      "function definitions",
      "multi-file organization"
    ],
    "skills": [
      "Array manipulation",
      "Loop control",
      "Function implementation",
      "Header organization",
      "Index-based access"
    ],
    "files": [
      {
        "name": "arrays.h",
        "content": "#ifndef ARRAYS_H\n#define ARRAYS_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\n/* Array size constant */\n#define ARRAY_SIZE 5\n\n/* TODO: Declare array and function prototypes:\n * extern int numbers[ARRAY_SIZE];\n * void print_array(int *arr, int size);\n */\n\n#endif /* ARRAYS_H */",
        "readOnly": false,
        "language": "h"
      },
      {
        "name": "arrays.c",
        "content": "#include \"arrays.h\"\n\n/* TODO: Define the array with exact values [10, 20, 30, 40, 50] */\n/* int numbers[ARRAY_SIZE] = {10, 20, 30, 40, 50}; */\n\n/* TODO: Implement print_array function:\n * void print_array(int *arr, int size)\n * {\n *     int i;\n *     for (i = 0; i < size; i++) {\n *         printk(KERN_INFO \"Element %d: %d\\n\", i, arr[i]);\n *     }\n * }\n */\n\nstatic int __init arrays_init(void)\n{\n    printk(KERN_INFO \"Arrays module loaded\\n\");\n    /* TODO: Call print_array function */\n    /* print_array(numbers, ARRAY_SIZE); */\n    return 0;\n}\n\nstatic void __exit arrays_exit(void)\n{\n    printk(KERN_INFO \"Arrays module unloaded\\n\");\n}\n\nmodule_init(arrays_init);\nmodule_exit(arrays_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Arrays and loops demonstration module\");\nMODULE_VERSION(\"1.0\");",
        "readOnly": false,
        "language": "c"
      },
      {
        "name": "Makefile",
        "content": "# Arrays module Makefile\nobj-m += arrays.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
        "readOnly": true,
        "language": "makefile"
      }
    ],
    "mainFile": "arrays.c",
    "validation": {
      "exactRequirements": {
        "functionNames": [
          "arrays_init",
          "arrays_exit",
          "print_array"
        ],
        "variables": [
          {
            "name": "numbers",
            "type": "int[]",
            "value": "[10, 20, 30, 40, 50]"
          }
        ],
        "outputMessages": [
          "Arrays module loaded",
          "Element 0: 10",
          "Element 1: 20",
          "Element 2: 30",
          "Element 3: 40",
          "Element 4: 50",
          "Header must declare: extern int numbers",
          "Header must declare: void print_array"
        ],
        "requiredIncludes": [
          "linux/module.h",
          "linux/kernel.h",
          "linux/init.h"
        ],
        "mustContain": [
          "for",
          "printk",
          "extern",
          "#define ARRAY_SIZE"
        ],
        "moduleInfo": {
          "license": "GPL"
        }
      },
      "testCases": [
        {
          "id": "header_declarations",
          "name": "Header Declarations",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "extern int numbers",
            "void print_array",
            "#define ARRAY_SIZE"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "array_definition",
          "name": "Array Definition",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "int numbers[ARRAY_SIZE]",
            "10, 20, 30, 40, 50"
          ],
          "prohibitedSymbols": [
            "int data[]",
            "int arr[]",
            "int values[]"
          ]
        },
        {
          "id": "function_implementation",
          "name": "Function Implementation",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "void print_array",
            "for",
            "i++",
            "i < size"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "exact_output",
          "name": "Exact Output Format",
          "type": "output_match",
          "critical": true,
          "expected": [
            {
              "pattern": "Arrays module loaded",
              "exact": true
            },
            {
              "pattern": "Element 0: 10",
              "exact": true
            },
            {
              "pattern": "Element 1: 20",
              "exact": true
            },
            {
              "pattern": "Element 2: 30",
              "exact": true
            },
            {
              "pattern": "Element 3: 40",
              "exact": true
            },
            {
              "pattern": "Element 4: 50",
              "exact": true
            }
          ]
        },
        {
          "id": "header_inclusion",
          "name": "Header File Inclusion",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "#include \"arrays.h\""
          ],
          "prohibitedSymbols": []
        }
      ]
    },
    "inputOutput": {
      "expectedOutput": [
        "Arrays module loaded",
        "Element 0: 10",
        "Element 1: 20",
        "Element 2: 30",
        "Element 3: 40",
        "Element 4: 50",
        "Header must declare: extern int numbers",
        "Header must declare: void print_array"
      ],
      "requirements": [
        "Use required function names: arrays_init, arrays_exit, print_array",
        "Use required variable names: numbers",
        "Print exact message format for backend validation compatibility",
        "Must include: linux/module.h, linux/kernel.h, linux/init.h",
        "Code must contain: for, printk, extern, #define ARRAY_SIZE",
        "Must include MODULE_LICENSE(\"GPL\")",
        "Must include header file: arrays.h"
      ]
    }
  },
  {
    "id": 4,
    "title": "Functions and Pointers Basics",
    "difficulty": 4,
    "xp": 30,
    "phase": "foundations",
    "description": "Learn to work with functions and basic pointers in kernel space. Create functions that take parameters, return values, and manipulate data through pointers. This introduces fundamental C programming concepts essential for kernel development.",
    "concepts": [
      "function declarations",
      "function definitions",
      "parameters and return values",
      "pointers",
      "pointer dereferencing",
      "address-of operator",
      "function calls"
    ],
    "skills": [
      "Function implementation",
      "Pointer manipulation",
      "Parameter passing",
      "Return value handling",
      "Memory address understanding"
    ],
    "files": [
      {
        "name": "functions.h",
        "content": "#ifndef FUNCTIONS_H\n#define FUNCTIONS_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\n/* TODO: Declare function prototypes:\n * int add_numbers(int a, int b);\n * void swap_values(int *x, int *y);\n * void print_result(const char *operation, int result);\n */\n\n#endif /* FUNCTIONS_H */",
        "readOnly": false,
        "language": "h"
      },
      {
        "name": "functions.c",
        "content": "#include \"functions.h\"\n\n/* TODO: Implement add_numbers function:\n * int add_numbers(int a, int b)\n * {\n *     return a + b;\n * }\n */\n\n/* TODO: Implement swap_values function:\n * void swap_values(int *x, int *y)\n * {\n *     int temp = *x;\n *     *x = *y;\n *     *y = temp;\n * }\n */\n\n/* TODO: Implement print_result function:\n * void print_result(const char *operation, int result)\n * {\n *     printk(KERN_INFO \"%s result: %d\\n\", operation, result);\n * }\n */\n\nstatic int __init functions_init(void)\n{\n    int num1 = 15;\n    int num2 = 25;\n    int sum;\n    \n    printk(KERN_INFO \"Functions module loaded\\n\");\n    \n    /* TODO: Call add_numbers and print result */\n    /* sum = add_numbers(num1, num2); */\n    /* print_result(\"Addition\", sum); */\n    \n    /* TODO: Print values before swap */\n    /* printk(KERN_INFO \"Before swap: num1=%d, num2=%d\\n\", num1, num2); */\n    \n    /* TODO: Call swap_values function */\n    /* swap_values(&num1, &num2); */\n    \n    /* TODO: Print values after swap */\n    /* printk(KERN_INFO \"After swap: num1=%d, num2=%d\\n\", num1, num2); */\n    \n    return 0;\n}\n\nstatic void __exit functions_exit(void)\n{\n    printk(KERN_INFO \"Functions module unloaded\\n\");\n}\n\nmodule_init(functions_init);\nmodule_exit(functions_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Functions and pointers demonstration module\");\nMODULE_VERSION(\"1.0\");",
        "readOnly": false,
        "language": "c"
      },
      {
        "name": "Makefile",
        "content": "# Functions module Makefile\nobj-m += functions.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
        "readOnly": true,
        "language": "makefile"
      }
    ],
    "mainFile": "functions.c",
    "validation": {
      "exactRequirements": {
        "functionNames": [
          "functions_init",
          "functions_exit",
          "add_numbers",
          "swap_values",
          "print_result"
        ],
        "outputMessages": [
          "Functions module loaded",
          "Addition result: 40",
          "Before swap: num1=15, num2=25",
          "After swap: num1=25, num2=15",
          "Header must declare: int add_numbers",
          "Header must declare: void swap_values",
          "Header must declare: void print_result"
        ],
        "requiredIncludes": [
          "linux/module.h",
          "linux/kernel.h",
          "linux/init.h"
        ],
        "mustContain": [
          "int *x",
          "int *y",
          "&num1",
          "&num2",
          "return a + b"
        ],
        "moduleInfo": {
          "license": "GPL"
        }
      },
      "testCases": [
        {
          "id": "function_prototypes",
          "name": "Function Prototypes in Header",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "int add_numbers",
            "void swap_values",
            "void print_result"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "pointer_usage",
          "name": "Pointer Usage",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "int *x",
            "int *y",
            "*x",
            "*y",
            "&num1",
            "&num2"
          ],
          "prohibitedSymbols": []
        },
        {
          "id": "function_implementations",
          "name": "Function Implementations",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "return a + b",
            "int temp = *x",
            "*x = *y",
            "*y = temp"
          ],
          "prohibitedSymbols": [
            "int add_numbers.*{.*functions\\.h",
            "void swap_values.*{.*functions\\.h",
            "void print_result.*{.*functions\\.h"
          ]
        },
        {
          "id": "exact_output",
          "name": "Exact Output Format",
          "type": "output_match",
          "critical": true,
          "expected": [
            {
              "pattern": "Functions module loaded",
              "exact": true
            },
            {
              "pattern": "Addition result: 40",
              "exact": true
            },
            {
              "pattern": "Before swap: num1=15, num2=25",
              "exact": true
            },
            {
              "pattern": "After swap: num1=25, num2=15",
              "exact": true
            }
          ]
        },
        {
          "id": "header_inclusion",
          "name": "Header File Inclusion",
          "type": "code_analysis",
          "critical": true,
          "expectedSymbols": [
            "#include \"functions.h\""
          ],
          "prohibitedSymbols": []
        }
      ]
    },
    "inputOutput": {
      "expectedOutput": [
        "Functions module loaded",
        "Addition result: 40",
        "Before swap: num1=15, num2=25",
        "After swap: num1=25, num2=15",
        "Header must declare: int add_numbers",
        "Header must declare: void swap_values",
        "Header must declare: void print_result"
      ],
      "requirements": [
        "Use required function names: functions_init, functions_exit, add_numbers, swap_values, print_result",
        "Print exact message format for backend validation compatibility",
        "Must include: linux/module.h, linux/kernel.h, linux/init.h",
        "Code must contain: int *x, int *y, &num1, &num2, return a + b",
        "Must include MODULE_LICENSE(\"GPL\")",
        "Must include header file: functions.h"
      ]
    }
  },
  {
    "id": 80,
    "title": "Simple Driver - File Creation Challenge",
    "difficulty": 5,
    "xp": 60,
    "phase": "drivers",
    "description": "Create a simple kernel driver by implementing missing files. You are given a partial driver structure and need to create the missing source and header files to complete the driver implementation.",
    "concepts": [
      "file creation",
      "multi-file architecture",
      "character devices",
      "device operations",
      "kernel module structure"
    ],
    "skills": [
      "Creating header files",
      "Implementing device operations",
      "Character device management",
      "Resource management",
      "Multi-file project organization"
    ],
    "files": [
      {
        "name": "driver_main.c",
        "content": "#include \"driver_main.h\"\n#include \"device_ops.h\"\n\n/* Main driver structure */\nstruct simple_driver_data *driver_data = NULL;\n\nstatic int __init simple_driver_init(void)\n{\n    int result;\n    \n    pr_info(\"simple_driver: initializing\\n\");\n    \n    /* TODO: Allocate driver data structure */\n    driver_data = kzalloc(sizeof(struct simple_driver_data), GFP_KERNEL);\n    if (!driver_data) {\n        pr_err(\"simple_driver: failed to allocate driver data\\n\");\n        return -ENOMEM;\n    }\n    \n    /* TODO: Initialize the device */\n    result = device_init(driver_data);\n    if (result < 0) {\n        pr_err(\"simple_driver: device initialization failed\\n\");\n        kfree(driver_data);\n        return result;\n    }\n    \n    pr_info(\"simple_driver: loaded successfully\\n\");\n    return 0;\n}\n\nstatic void __exit simple_driver_exit(void)\n{\n    pr_info(\"simple_driver: unloading\\n\");\n    \n    if (driver_data) {\n        /* TODO: Clean up the device */\n        device_cleanup(driver_data);\n        kfree(driver_data);\n    }\n    \n    pr_info(\"simple_driver: unloaded\\n\");\n}\n\nmodule_init(simple_driver_init);\nmodule_exit(simple_driver_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Simple Driver Creation Challenge\");\nMODULE_VERSION(\"1.0\");",
        "readOnly": false,
        "language": "c"
      },
      {
        "name": "driver_main.h",
        "content": "#ifndef DRIVER_MAIN_H\n#define DRIVER_MAIN_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/fs.h>\n#include <linux/cdev.h>\n#include <linux/device.h>\n#include <linux/slab.h>\n#include <linux/uaccess.h>\n\n#define DRIVER_NAME \"simple_driver\"\n#define DEVICE_NAME \"simpledev\"\n#define CLASS_NAME \"simple_class\"\n\n/* Driver data structure */\nstruct simple_driver_data {\n    dev_t device_number;\n    struct cdev cdev;\n    struct class *device_class;\n    struct device *device_struct;\n    char *buffer;\n    size_t buffer_size;\n};\n\n/* Global driver data */\nextern struct simple_driver_data *driver_data;\n\n#endif /* DRIVER_MAIN_H */",
        "readOnly": false,
        "language": "h"
      },
      {
        "name": "Makefile",
        "content": "# Simple driver Makefile\nobj-m += simple_driver.o\n\n# Object files that make up this module\nsimple_driver-objs := driver_main.o device_ops.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
        "readOnly": true,
        "language": "makefile"
      }
    ],
    "mainFile": "driver_main.c",
    "requiredFiles": [
      {
        "name": "device_ops.h",
        "description": "Header file containing device operation declarations",
        "hints": [
          "Should include function declarations for device_init() and device_cleanup()",
          "Should include any necessary includes for device operations",
          "Should define any constants needed for device operations"
        ]
      },
      {
        "name": "device_ops.c",
        "description": "Implementation file containing device operations",
        "hints": [
          "Should implement device_init() function that sets up character device",
          "Should implement device_cleanup() function that cleans up resources",
          "Should include file operations structure with basic read/write functions"
        ]
      }
    ],
    "validation": {
      "exactRequirements": {
        "functionNames": [
          "device_init",
          "device_cleanup",
          "simple_driver_init",
          "simple_driver_exit"
        ],
        "outputMessages": [
          "simple_driver: loaded successfully",
          "simple_driver: unloaded"
        ],
        "requiredIncludes": [
          "linux/module.h",
          "linux/kernel.h",
          "linux/init.h",
          "linux/fs.h",
          "linux/cdev.h"
        ],
        "mustContain": [
          "alloc_chrdev_region",
          "cdev_init",
          "cdev_add",
          "class_create",
          "device_create"
        ],
        "moduleInfo": {
          "license": "GPL"
        }
      },
      "testCases": [
        {
          "id": "driver_functionality",
          "name": "Driver Functionality Test",
          "type": "kernel_project_test",
          "critical": true,
          "testScenario": {
            "userspaceApps": [
              {
                "name": "device_tester",
                "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <fcntl.h>\\n#include <unistd.h>\\n#include <string.h>\\n\\n#define DEVICE_PATH \"/dev/simpledev\"\\n\\nint main() {\\n    int fd;\\n    char buffer[256];\\n    ssize_t bytes;\\n    \\n    printf(\"=== Simple Driver Test ===\\\\n\");\\n    \\n    fd = open(DEVICE_PATH, O_RDWR);\\n    if (fd < 0) {\\n        printf(\"INFO: Device not found (this is expected in basic test)\\\\n\");\\n        return 0;\\n    }\\n    \\n    printf(\"SUCCESS: Device opened\\\\n\");\\n    \\n    bytes = write(fd, \"test\", 4);\\n    if (bytes > 0) {\\n        printf(\"SUCCESS: Written %zd bytes\\\\n\", bytes);\\n    }\\n    \\n    close(fd);\\n    printf(\"SUCCESS: Driver test completed\\\\n\");\\n    return 0;\\n}"
              }
            ],
            "setupCommands": [
              "echo 'Setting up simple driver test'",
              "mkdir -p /dev"
            ],
            "testCommands": [
              "echo 'Creating device node...'",
              "major=$(grep simpledev /proc/devices | cut -d' ' -f1)",
              "if [ -z \"$major\" ]; then echo 'ERROR: simpledev not found'; exit 1; fi",
              "mknod /dev/simpledev c $major 0",
              "chmod 666 /dev/simpledev",
              "echo 'Running driver test'",
              "/bin/device_tester",
              "echo 'Checking driver registration'",
              "grep simple_driver /proc/modules 2>/dev/null || echo 'Driver loaded successfully'"
            ],
            "expected": {
              "dmesg": [
                "simple_driver.*loaded successfully",
                "simple_driver.*unloaded"
              ],
              "stdout": [
                "Simple Driver Test",
                "SUCCESS: Driver test completed"
              ]
            },
            "timeout": 30
          }
        }
      ]
    },
    "inputOutput": {
      "expectedOutput": [
        "simple_driver: loaded successfully",
        "simple_driver: unloaded"
      ],
      "requirements": [
        "Use required function names: device_init, device_cleanup, simple_driver_init, simple_driver_exit",
        "Print exact message format for backend validation compatibility",
        "Must include: linux/module.h, linux/kernel.h, linux/init.h, linux/fs.h, linux/cdev.h",
        "Code must contain: alloc_chrdev_region, cdev_init, cdev_add, class_create, device_create",
        "Must include MODULE_LICENSE(\"GPL\")",
        "Test Environment: Create missing device operation files to complete the driver",
        "Userspace Test: Basic device testing will be performed automatically",
        "Test Setup: Create device_ops.h with function declarations",
        "Test Setup: Create device_ops.c with complete implementation",
        "Test Setup: Ensure all required kernel APIs are used"
      ]
    }
  }
];

export default problemBank;
