{
  "id": 53,
  "title": "Proc Filesystem Interface",
  "difficulty": 6,
  "xp": 60,
  "phase": "kernel_core",
  "description": "Create a kernel module that implements a /proc interface for exposing kernel module information to userspace. This is fundamental for debugging, monitoring, and configuration in production systems used by enterprise kernel developers.",
  "concepts": ["proc_fs", "seq_file", "userspace_interface", "kernel_debugging", "system_monitoring"],
  "skills": ["proc_interface", "seq_operations", "user_kernel_communication", "debugging_interfaces"],
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/proc_fs.h>\n#include <linux/seq_file.h>\n#include <linux/uaccess.h>\n#include <linux/slab.h>\n\n#define PROC_ENTRY_NAME \"kernel_stats\"\n#define MAX_BUFFER_SIZE 1024\n\nstatic struct proc_dir_entry *proc_entry = NULL;\nstatic char *info_buffer = NULL;\nstatic int access_count = 0;\nstatic unsigned long last_access_jiffies = 0;\n\n// TODO: Implement seq_show function for reading proc entry\nstatic int kernel_stats_show(struct seq_file *m, void *v)\n{\n    // TODO: Display module statistics:\n    // - Access count\n    // - Last access time (in jiffies)\n    // - Current jiffies\n    // - Buffer allocation status\n    // - Module load time\n    \n    return 0;\n}\n\n// TODO: Implement proc_open function\nstatic int kernel_stats_open(struct inode *inode, struct file *file)\n{\n    // TODO: Increment access count\n    // TODO: Update last access time\n    // TODO: Use single_open with seq_show function\n    return 0;\n}\n\n// TODO: Implement write function for proc entry\nstatic ssize_t kernel_stats_write(struct file *file, const char __user *buffer,\n                                  size_t count, loff_t *pos)\n{\n    // TODO: Handle write operations\n    // TODO: Support \"reset\" command to reset counters\n    // TODO: Support \"info <string>\" to update info buffer\n    // TODO: Validate input and handle errors\n    \n    return count;\n}\n\n// TODO: Define proc_ops structure\nstatic const struct proc_ops kernel_stats_proc_ops = {\n    // TODO: Set up proc operations\n};\n\nstatic int __init proc_module_init(void)\n{\n    // TODO: Allocate info buffer\n    // TODO: Create proc entry\n    // TODO: Initialize counters\n    // TODO: Handle allocation failures\n    \n    printk(KERN_INFO \"Proc interface module loaded\\n\");\n    printk(KERN_INFO \"Created /proc/%s\\n\", PROC_ENTRY_NAME);\n    return 0;\n}\n\nstatic void __exit proc_module_exit(void)\n{\n    // TODO: Remove proc entry\n    // TODO: Free allocated memory\n    // TODO: Clean up resources\n    \n    printk(KERN_INFO \"Proc interface module unloaded\\n\");\n}\n\nmodule_init(proc_module_init);\nmodule_exit(proc_module_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Kernel Academy Student\");\nMODULE_DESCRIPTION(\"Proc filesystem interface demonstration\");\nMODULE_VERSION(\"1.0\");",
  "validation": {
    "exactRequirements": {
      "functionNames": [
        "proc_module_init", 
        "proc_module_exit",
        "kernel_stats_show",
        "kernel_stats_open", 
        "kernel_stats_write"
      ],
      "variables": [
        {"name": "proc_entry", "type": "struct proc_dir_entry*"},
        {"name": "info_buffer", "type": "char*"},
        {"name": "access_count", "type": "int"},
        {"name": "last_access_jiffies", "type": "unsigned long"}
      ],
      "outputMessages": [
        "Proc interface module loaded",
        "Created /proc/kernel_stats",
        "Proc interface module unloaded"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/proc_fs.h",
        "linux/seq_file.h",
        "linux/uaccess.h"
      ],
      "mustContain": [
        "proc_create",
        "proc_remove",
        "seq_printf",
        "single_open",
        "copy_from_user",
        "proc_ops"
      ]
    },
    "testCases": [
      {
        "id": "proc_entry_creation",
        "name": "Proc Entry Creation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "proc_create(PROC_ENTRY_NAME",
          "proc_create(\"kernel_stats\""
        ],
        "prohibitedSymbols": ["create_proc_entry"]
      },
      {
        "id": "seq_file_implementation",
        "name": "Seq File Implementation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "seq_printf",
          "single_open",
          "seq_read",
          "seq_lseek",
          "single_release"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "proc_ops_structure",
        "name": "Proc Operations Structure",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "struct proc_ops",
          ".proc_open",
          ".proc_read", 
          ".proc_write",
          ".proc_lseek",
          ".proc_release"
        ],
        "prohibitedSymbols": ["file_operations"]
      },
      {
        "id": "user_space_interaction",
        "name": "User Space Interaction",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "copy_from_user",
          "__user",
          "access_ok"
        ],
        "prohibitedSymbols": ["strcpy", "strncpy"]
      },
      {
        "id": "statistics_tracking",
        "name": "Statistics Tracking",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "access_count++",
          "last_access_jiffies = jiffies",
          "seq_printf(m, \"Access count: %d\""
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "resource_cleanup",
        "name": "Resource Cleanup",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "proc_remove",
          "kfree(info_buffer)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "proc_creation_message",
        "name": "Proc Creation Message",
        "type": "output_match",
        "critical": true,
        "expected": [
          {"pattern": "Created /proc/kernel_stats", "exact": true}
        ]
      }
    ]
  }
}