{
  "id": 21,
  "title": "Variable Scope, Storage Classes, and Lifetime",
  "phase": "foundations",
  "difficulty": 4,
  "xp": 35,
  "description": "Master variable scope (global, local, static) and storage classes in kernel programming. Understand variable lifetime, initialization, and proper usage patterns for kernel modules.",
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\n// TODO: Global variables (module scope)\nstatic int global_counter = 0;\nstatic char global_buffer[100];\nconst char *global_name = \"test_module\";\n\n// TODO: Function with static local variable\nstatic int increment_static_counter(void) {\n    static int static_counter = 0;  // Retains value between calls\n    int local_temp = 10;            // Reset each call\n    \n    static_counter++;\n    local_temp++;\n    \n    printk(KERN_INFO \"Static counter: %d, Local temp: %d\\n\", static_counter, local_temp);\n    return static_counter;\n}\n\n// TODO: Function with automatic variables\nstatic void demonstrate_scope(int param) {\n    int local_var = param * 2;      // Automatic storage\n    \n    if (param > 5) {\n        int block_var = local_var + 1;  // Block scope\n        printk(KERN_INFO \"Block scope: param=%d, local_var=%d, block_var=%d\\n\", \n               param, local_var, block_var);\n    }\n    // block_var is not accessible here\n    \n    printk(KERN_INFO \"Function scope: param=%d, local_var=%d\\n\", param, local_var);\n}\n\n// TODO: Function demonstrating variable shadowing\nstatic void demonstrate_shadowing(void) {\n    int value = 100;  // Outer scope\n    \n    printk(KERN_INFO \"Outer scope value: %d\\n\", value);\n    \n    {\n        int value = 200;  // Inner scope - shadows outer\n        printk(KERN_INFO \"Inner scope value: %d\\n\", value);\n    }\n    \n    printk(KERN_INFO \"Back to outer scope value: %d\\n\", value);\n}\n\nstatic int __init scope_init(void) {\n    int local_init = 42;\n    \n    // TODO: Demonstrate global variable access\n    global_counter = 5;\n    strcpy(global_buffer, \"Hello from global\");\n    \n    printk(KERN_INFO \"Variable Scope Demonstration:\\n\");\n    printk(KERN_INFO \"Global counter: %d\\n\", global_counter);\n    printk(KERN_INFO \"Global buffer: %s\\n\", global_buffer);\n    printk(KERN_INFO \"Global name: %s\\n\", global_name);\n    printk(KERN_INFO \"Local init: %d\\n\", local_init);\n    \n    // TODO: Call functions to demonstrate static vs local\n    printk(KERN_INFO \"\\nStatic vs Local Variables:\\n\");\n    increment_static_counter();  // Should print: Static counter: 1, Local temp: 11\n    increment_static_counter();  // Should print: Static counter: 2, Local temp: 11\n    increment_static_counter();  // Should print: Static counter: 3, Local temp: 11\n    \n    // TODO: Demonstrate function scope\n    printk(KERN_INFO \"\\nFunction Scope:\\n\");\n    demonstrate_scope(3);  // param <= 5, no block scope\n    demonstrate_scope(8);  // param > 5, shows block scope\n    \n    // TODO: Demonstrate variable shadowing\n    printk(KERN_INFO \"\\nVariable Shadowing:\\n\");\n    demonstrate_shadowing();\n    \n    return 0;\n}\n\nstatic void __exit scope_exit(void) {\n    printk(KERN_INFO \"Final global counter: %d\\n\", global_counter);\n    printk(KERN_INFO \"Variable scope module unloaded\\n\");\n}\n\nmodule_init(scope_init);\nmodule_exit(scope_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Your Name\");\nMODULE_DESCRIPTION(\"Variable scope and storage classes module\");",
  "concepts": [
    "global variables",
    "local variables", 
    "static variables",
    "automatic storage",
    "variable lifetime",
    "scope rules",
    "variable shadowing"
  ],
  "skills": [
    "Scope management",
    "Memory lifetime understanding",
    "Variable design patterns",
    "Code organization"
  ],
  "inputOutput": {
    "expectedOutput": [
      "Variable Scope Demonstration:",
      "Global counter: 5",
      "Global buffer: Hello from global", 
      "Global name: test_module",
      "Local init: 42",
      "Static vs Local Variables:",
      "Static counter: 1, Local temp: 11",
      "Static counter: 2, Local temp: 11",
      "Static counter: 3, Local temp: 11",
      "Function Scope:",
      "Function scope: param=3, local_var=6",
      "Block scope: param=8, local_var=16, block_var=17",
      "Function scope: param=8, local_var=16",
      "Variable Shadowing:",
      "Outer scope value: 100",
      "Inner scope value: 200",
      "Back to outer scope value: 100"
    ],
    "requirements": [
      "Use required function names: scope_init, scope_exit",
      "Define static global variables: global_counter, global_buffer, global_name",
      "Implement increment_static_counter with static local variable",
      "Implement demonstrate_scope showing local and block scope",
      "Implement demonstrate_shadowing showing variable shadowing",
      "Use exact values and demonstrate all scope types",
      "Show difference between static and automatic storage",
      "Print results in exact format shown above"
    ]
  },
  "validation": {
    "exactRequirements": {
      "functionNames": ["scope_init", "scope_exit", "increment_static_counter", "demonstrate_scope", "demonstrate_shadowing"],
      "variables": [
        { "name": "global_counter", "type": "static int", "value": "0" },
        { "name": "global_buffer", "type": "static char[]", "value": "array" },
        { "name": "global_name", "type": "const char*", "value": "test_module" }
      ],
      "outputMessages": [
        "Variable Scope Demonstration:",
        "Global counter: 5",
        "Global buffer: Hello from global",
        "Global name: test_module",
        "Local init: 42",
        "Static vs Local Variables:",
        "Static counter: 1, Local temp: 11",
        "Static counter: 2, Local temp: 11",
        "Static counter: 3, Local temp: 11",
        "Function Scope:",
        "Function scope: param=3, local_var=6",
        "Block scope: param=8, local_var=16, block_var=17",
        "Variable Shadowing:",
        "Outer scope value: 100",
        "Inner scope value: 200",
        "Back to outer scope value: 100"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h"
      ],
      "mustContain": ["static int global_counter", "static int static_counter", "int local_var", "int block_var", "if (param >"],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "global_variable_declarations",
        "name": "Proper Global Variable Declarations",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["static int global_counter", "static char global_buffer", "const char *global_name"],
        "prohibitedSymbols": ["int global_counter", "extern"]
      },
      {
        "id": "static_local_variable",
        "name": "Static Local Variable Usage",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["static int static_counter = 0", "static_counter++"],
        "prohibitedSymbols": []
      },
      {
        "id": "scope_demonstration",
        "name": "Block Scope Demonstration",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["if (param > 5)", "int block_var", "block_var = local_var + 1"],
        "prohibitedSymbols": []
      },
      {
        "id": "variable_shadowing",
        "name": "Variable Shadowing Implementation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["int value = 100", "int value = 200"],
        "prohibitedSymbols": []
      },
      {
        "id": "static_persistence",
        "name": "Static Variable Persistence",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Static counter: 1, Local temp: 11", "exact": true },
          { "pattern": "Static counter: 2, Local temp: 11", "exact": true },
          { "pattern": "Static counter: 3, Local temp: 11", "exact": true }
        ]
      },
      {
        "id": "block_scope_behavior",
        "name": "Block Scope Variable Behavior",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Function scope: param=3, local_var=6", "exact": true },
          { "pattern": "Block scope: param=8, local_var=16, block_var=17", "exact": true },
          { "pattern": "Function scope: param=8, local_var=16", "exact": true }
        ]
      },
      {
        "id": "shadowing_behavior",
        "name": "Variable Shadowing Behavior",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Outer scope value: 100", "exact": true },
          { "pattern": "Inner scope value: 200", "exact": true },
          { "pattern": "Back to outer scope value: 100", "exact": true }
        ]
      },
      {
        "id": "global_access",
        "name": "Global Variable Access",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Global counter: 5", "exact": true },
          { "pattern": "Global buffer: Hello from global", "exact": true },
          { "pattern": "Global name: test_module", "exact": true }
        ]
      },
      {
        "id": "proper_calculations",
        "name": "Proper Variable Calculations",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["local_var = param * 2", "block_var = local_var + 1", "local_temp++"],
        "prohibitedSymbols": ["local_var = 6", "block_var = 17"]
      }
    ]
  }
}