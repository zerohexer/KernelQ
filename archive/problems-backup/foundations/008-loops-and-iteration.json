{
  "id": 8,
  "title": "Loop Structures and Iteration Control",
  "phase": "foundations",
  "difficulty": 3,
  "xp": 30,
  "description": "Master different loop types (while, do-while, for) and loop control statements (break, continue) in kernel programming. Essential for iterative operations and data processing.",
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\nstatic int __init loops_init(void) {\n    int i, sum;\n    int numbers[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int count = 0;\n    \n    // TODO: Use for loop to calculate sum of array elements\n    // for (i = 0; i < 10; i++) { sum += numbers[i]; }\n    // Print: \"For loop sum: 55\"\n    \n    // TODO: Use while loop to count even numbers\n    // i = 0; while (i < 10) { if even, increment count; i++; }\n    // Print: \"While loop even count: 5\"\n    \n    // TODO: Use do-while loop to find first number > 5\n    // i = 0; do { check numbers[i]; i++; } while (numbers[i-1] <= 5);\n    // Print: \"Do-while found number > 5 at index: 5\" (number 6)\n    \n    // TODO: Use for loop with break and continue\n    // Skip odd numbers (continue), break at 8\n    // Print even numbers: \"Loop control: 2 4 6 8\"\n    \n    return 0;\n}\n\nstatic void __exit loops_exit(void) {\n    printk(KERN_INFO \"Loops module unloaded\\n\");\n}\n\nmodule_init(loops_init);\nmodule_exit(loops_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Your Name\");\nMODULE_DESCRIPTION(\"Loop structures and iteration control module\");",
  "concepts": [
    "for loops",
    "while loops", 
    "do-while loops",
    "break statement",
    "continue statement",
    "loop control"
  ],
  "skills": [
    "Iterative programming",
    "Loop design",
    "Flow control",
    "Array processing"
  ],
  "inputOutput": {
    "expectedOutput": [
      "For loop sum: 55",
      "While loop even count: 5",
      "Do-while found number > 5 at index: 5",
      "Loop control: 2 4 6 8"
    ],
    "requirements": [
      "Use required function names: loops_init, loops_exit",
      "Use provided array: numbers[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}",
      "Implement for loop to calculate sum of all array elements",
      "Implement while loop to count even numbers in array", 
      "Implement do-while loop to find first number > 5",
      "Use break and continue statements in loop control example",
      "Print results in exact format shown above",
      "Must use actual loop logic, not hardcoded results"
    ]
  },
  "validation": {
    "exactRequirements": {
      "functionNames": ["loops_init", "loops_exit"],
      "variables": [
        { "name": "i", "type": "int", "value": "iterator" },
        { "name": "sum", "type": "int", "value": "calculated" },
        { "name": "numbers", "type": "int[]", "value": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}" },
        { "name": "count", "type": "int", "value": "calculated" }
      ],
      "outputMessages": [
        "For loop sum: 55",
        "While loop even count: 5", 
        "Do-while found number > 5 at index: 5",
        "Loop control: 2 4 6 8"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h"
      ],
      "mustContain": ["for (", "while (", "do {", "break", "continue", "sum +=", "% 2"],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "for_loop_implementation",
        "name": "For Loop with Sum Calculation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["for (", "i < 10", "i++", "sum +=", "numbers[i]"],
        "prohibitedSymbols": ["sum = 55"]
      },
      {
        "id": "while_loop_implementation", 
        "name": "While Loop with Even Count",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["while (", "% 2 == 0", "count++"],
        "prohibitedSymbols": ["count = 5"]
      },
      {
        "id": "do_while_implementation",
        "name": "Do-While Loop Implementation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["do {", "} while", "> 5"],
        "prohibitedSymbols": []
      },
      {
        "id": "break_continue_usage",
        "name": "Break and Continue Statements",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["break", "continue"],
        "prohibitedSymbols": []
      },
      {
        "id": "correct_calculations",
        "name": "Mathematically Correct Results",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "For loop sum: 55", "exact": true },
          { "pattern": "While loop even count: 5", "exact": true },
          { "pattern": "Do-while found number > 5 at index: 5", "exact": true },
          { "pattern": "Loop control: 2 4 6 8", "exact": true }
        ]
      },
      {
        "id": "array_processing",
        "name": "Proper Array Element Access",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["numbers[i]", "numbers["],
        "prohibitedSymbols": ["numbers[0]", "numbers[1]", "numbers[2]"]
      },
      {
        "id": "no_hardcoded_results",
        "name": "No Hardcoded Results - Must Calculate",
        "type": "code_analysis", 
        "critical": true,
        "expectedSymbols": ["+=", "++", "numbers["],
        "prohibitedSymbols": ["sum = 55;", "count = 5;"]
      }
    ]
  }
}