{
  "id": 22,
  "title": "Structures and Functions - Part 3: Passing Structures",
  "phase": "foundations",
  "difficulty": 5,
  "xp": 40,
  "description": "Master passing structures to functions by value and by reference. Learn when to use each approach and understand the performance implications. This completes the structure series.",
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\n// From Parts 1-2 - COMPLETED CONCEPTS:\n// ✓ Structure definition and member access with dot operator\n// ✓ Pointers to structures and arrow operator\n\n// Define the same structure from previous parts:\nstruct student {\n    int id;\n    char name[20];\n    int age;\n    float gpa;\n};\n\n// Part 3 - NEW CONCEPTS:\n// TODO: Create function 'print_student_byval' that takes struct student by value\n// TODO: Create function 'update_gpa' that takes struct student* and new GPA value\n// TODO: update_gpa should modify the GPA through the pointer\n\nstatic int __init structures_functions_init(void) {\n    struct student stu = {103, \"Charlie\", 22, 3.2};\n    \n    printk(KERN_INFO \"Original student:\\n\");\n    // TODO: Call print_student_byval(stu)\n    \n    // TODO: Call update_gpa(&stu, 3.9)\n    \n    printk(KERN_INFO \"After GPA update:\\n\");\n    // TODO: Call print_student_byval(stu) again\n    \n    return 0;\n}\n\nstatic void __exit structures_functions_exit(void) {\n    printk(KERN_INFO \"Structures and functions module unloaded\\n\");\n}\n\nmodule_init(structures_functions_init);\nmodule_exit(structures_functions_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Your Name\");\nMODULE_DESCRIPTION(\"Structures and functions demonstration module\");",
  "concepts": [
    "structures as function parameters",
    "pass by value vs pass by reference",
    "structure modification via pointers",
    "function parameter design"
  ],
  "skills": [
    "Advanced function design with structures",
    "Parameter passing strategies",
    "Structure modification patterns",
    "Performance-aware programming"
  ],
  "multiPart": {
    "part": 3,
    "totalParts": 3,
    "nextProblemId": 12,
    "previousProblemId": 10
  },
  "inputOutput": {
    "expectedOutput": [
      "Original student:",
      "ID: 103, Name: Charlie, Age: 22, GPA: 3",
      "After GPA update:",
      "ID: 103, Name: Charlie, Age: 22, GPA: 3"
    ],
    "requirements": [
      "Use required function names: structures_functions_init, structures_functions_exit",
      "Create function 'print_student_byval' with parameter (struct student s)",
      "Create function 'update_gpa' with parameters (struct student *s, float new_gpa)",
      "print_student_byval must print: \"ID: X, Name: Y, Age: Z, GPA: W\"",
      "update_gpa must modify GPA through pointer",
      "Use exact variable values: id=103, name=\"Charlie\", age=22, initial gpa=3.2, new gpa=3.9"
    ]
  },
  "validation": {
    "exactRequirements": {
      "functionNames": ["structures_functions_init", "structures_functions_exit", "print_student_byval", "update_gpa"],
      "variables": [
        { "name": "stu", "type": "struct student", "value": "{103, \"Charlie\", 22, 3.2}" }
      ],
      "outputMessages": [
        "Original student:",
        "ID: 103, Name: Charlie, Age: 22, GPA: 3",
        "After GPA update:",
        "ID: 103, Name: Charlie, Age: 22, GPA: 3"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h"
      ],
      "mustContain": ["void print_student_byval", "struct student s", "void update_gpa", "struct student *s", "s->gpa"],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "function_signatures",
        "name": "Correct Function Signatures",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["void print_student_byval", "struct student s", "void update_gpa", "struct student *s", "float new_gpa"],
        "prohibitedSymbols": []
      },
      {
        "id": "pointer_modification",
        "name": "GPA Modification via Pointer",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["s->gpa", "new_gpa"],
        "prohibitedSymbols": []
      },
      {
        "id": "correct_behavior",
        "name": "Functions Work Correctly",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Original student:", "exact": true },
          { "pattern": "ID: 103, Name: Charlie, Age: 22, GPA: 3", "exact": true },
          { "pattern": "After GPA update:", "exact": true },
          { "pattern": "ID: 103, Name: Charlie, Age: 22, GPA: 3", "exact": true }
        ]
      }
    ]
  }
}