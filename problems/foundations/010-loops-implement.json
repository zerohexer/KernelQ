{
  "id": 10,
  "title": "Basic Loops - Implement Loop Solutions",
  "phase": "foundations",
  "difficulty": 4,
  "xp": 40,
  "description": "Implement your own loop-based solutions for iterative calculations and array processing. Apply the patterns you studied in Problem 9 to create functions that perform calculations and process data using loops.",
  "mainFile": "loops_impl.c",
  "files": [
    {
      "name": "loops_impl.h",
      "content": "#ifndef LOOPS_IMPL_H\n#define LOOPS_IMPL_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/types.h>\n\n#define ARRAY_SIZE 6\n\nextern int numbers[ARRAY_SIZE];\nextern int factorial_result;\nextern int product_result;\n\n/* TODO: Declare your functions */\n/* void print_reverse(int arr[], int size); */\n/* int calculate_factorial(int n); */\n/* int multiply_array(int arr[], int size); */\n\n#endif /* LOOPS_IMPL_H */",
      "readOnly": false,
      "language": "h"
    },
    {
      "name": "loops_impl.c",
      "content": "#include \"loops_impl.h\"\n\nint numbers[ARRAY_SIZE] = {2, 4, 6, 8, 10, 12};\nint factorial_result = 5;  // Default: calculate factorial of 5\nint product_result = 6;    // Default: multiply first 6 elements\n\n/* IMPORTANT: DO NOT REMOVE OR MODIFY THE LINES BELOW!\n * These module parameter declarations are required for validation testing.\n * The testing system uses these to verify your loop implementations work\n * with different input values. Removing them will cause test failures.\n */\nmodule_param(factorial_result, int, 0644);\nMODULE_PARM_DESC(factorial_result, \"Number for factorial calculation testing\");\nmodule_param(product_result, int, 0644);\nMODULE_PARM_DESC(product_result, \"Array size for processing testing\");\n/* END OF REQUIRED MODULE PARAMETER SECTION */\n\n/* TODO: Implement function to print array in reverse order */\n/* Use a for loop starting from size-1 down to 0 */\n/* Print: \"Position X: Y\" for each element */\n\n/* TODO: Implement function to calculate factorial of n */\n/* factorial(n) = n * (n-1) * (n-2) * ... * 1 */\n/* Use a for loop from 1 to n, multiply result by each number */\n\n/* TODO: Implement function to multiply all array elements */\n/* Use accumulation pattern: start with result = 1 */\n/* Multiply result by each array element using for loop */\n\nstatic int __init loops_impl_init(void)\n{\n    int calculated_factorial, calculated_product;\n    \n    printk(KERN_INFO \"Loop implementation module loaded\\n\");\n    \n    /* TODO: Print array in reverse order */\n    /* printk(KERN_INFO \"Array in reverse order:\\n\"); */\n    /* print_reverse(numbers, ARRAY_SIZE); */\n    \n    /* TODO: Calculate factorial using factorial_result as input */\n    /* calculated_factorial = calculate_factorial(factorial_result); */\n    /* printk(KERN_INFO \"Factorial of %d: %d\\n\", factorial_result, calculated_factorial); */\n    \n    /* TODO: Calculate product of array elements using product_result as array size */\n    /* calculated_product = multiply_array(numbers, product_result); */\n    /* printk(KERN_INFO \"Product of first %d elements: %d\\n\", product_result, calculated_product); */\n    \n    return 0;\n}\n\nstatic void __exit loops_impl_exit(void)\n{\n    printk(KERN_INFO \"Loop implementation module unloaded\\n\");\n}\n\nmodule_init(loops_impl_init);\nmodule_exit(loops_impl_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Implementing loop-based algorithms\");\nMODULE_VERSION(\"1.0\");",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "Makefile",
      "content": "# Loop implementation module Makefile\nobj-m += loops_impl.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "concepts": [
    "reverse iteration",
    "factorial calculation",
    "array multiplication",
    "accumulation patterns",
    "loop control variables"
  ],
  "skills": [
    "Implementing reverse loops",
    "Mathematical calculations with loops", 
    "Array processing algorithms",
    "Accumulation and multiplication patterns",
    "Loop-based problem solving"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": ["loops_impl_init", "loops_impl_exit", "print_reverse", "calculate_factorial", "multiply_array"],
      "variables": [
        { "name": "numbers", "type": "int[]", "value": "{2, 4, 6, 8, 10, 12}" },
        { "name": "factorial_result", "type": "int", "value": 5 },
        { "name": "product_result", "type": "int", "value": 6 }
      ],
      "outputMessages": [
        "Loop implementation module loaded",
        "Array in reverse order:",
        "Position 5: 12",
        "Position 4: 10", 
        "Position 3: 8",
        "Position 2: 6",
        "Position 1: 4",
        "Position 0: 2",
        "Factorial of 5: 120",
        "Product of array: 46080"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/types.h"
      ],
      "mustContain": [
        "#define ARRAY_SIZE 6",
        "int numbers[ARRAY_SIZE]",
        "for.*i.*=.*size.*-.*1.*i.*>=.*0.*i--",
        "for.*i.*=.*1.*i.*<=.*n.*i\\+\\+"
      ],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "function_declarations",
        "name": "Function Declarations in Header",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void print_reverse(int arr[], int size)",
          "int calculate_factorial(int n)",
          "int multiply_array(int arr[], int size)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "function_signatures_source",
        "name": "Function Signatures in Source File",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void print_reverse(int arr[], int size)",
          "int calculate_factorial(int n)",
          "int multiply_array(int arr[], int size)",
          "static int __init loops_impl_init(void)",
          "static void __exit loops_impl_exit(void)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "advanced_loop_implementation_validation",
        "name": "Advanced Loop Implementation with TCC Header Validation",
        "type": "kernel_project_test",
        "critical": true,
        "testScenario": {
          "userspaceApps": [
            {
              "name": "loop_impl_tester",
              "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <time.h>\\n\\nint main() {\\n    printf(\"=== Dynamic Loop Implementation Test ===\\\\n\");\\n    \\n    // Seed random number generator\\n    srand(time(NULL));\\n    \\n    // Generate random test values\\n    int factorial_n = (rand() % 6) + 3;  // 3 to 8 for reasonable factorial\\n    int array_size = (rand() % 3) + 4;   // 4 to 6 elements\\n    \\n    printf(\"Test 1: Factorial calculation for n=%d\\\\n\", factorial_n);\\n    char cmd1[256];\\n    snprintf(cmd1, sizeof(cmd1), \"insmod /lib/modules/loops_impl.ko factorial_result=%d\", factorial_n);\\n    system(\"rmmod loops_impl 2>/dev/null\");\\n    system(cmd1);\\n    \\n    printf(\"Test 2: Array processing with %d elements\\\\n\", array_size);\\n    char cmd2[256];\\n    snprintf(cmd2, sizeof(cmd2), \"insmod /lib/modules/loops_impl.ko product_result=%d\", array_size);\\n    system(\"rmmod loops_impl\");\\n    system(cmd2);\\n    \\n    printf(\"SUCCESS: Dynamic loop test completed\\\\n\");\\n    return 0;\\n}"
            }
          ],
          "setupCommands": [
            "echo 'Starting advanced loop implementation validation'"
          ],
          "testCommands": [
            "echo 'Phase 1: Ultra-Fast TCC Header Validation'",
            "echo 'Creating minimal kernel header stubs for TCC...'",
            "mkdir -p /tmp/linux",
            "echo '#define KERN_INFO' > /tmp/linux/kernel.h",
            "echo '#define MODULE_LICENSE(x)' > /tmp/linux/module.h",
            "echo '#define MODULE_AUTHOR(x)' >> /tmp/linux/module.h",
            "echo '#define MODULE_DESCRIPTION(x)' >> /tmp/linux/module.h",
            "echo '#define module_init(x)' >> /tmp/linux/module.h",
            "echo '#define module_exit(x)' >> /tmp/linux/module.h",
            "echo '#define __init' > /tmp/linux/init.h",
            "echo '#define __exit' >> /tmp/linux/init.h",
            "echo 'typedef int bool;' > /tmp/linux/types.h",
            "echo 'Creating test file that includes student header...'",
            "echo '#include \"/lib/modules/loops_impl.h\"' > /tmp/test.c",
            "echo 'int main() { print_reverse((int[]){1,2,3}, 3); calculate_factorial(5); multiply_array((int[]){1,2}, 2); return 0; }' >> /tmp/test.c",
            "echo 'Running TCC validation...'",
            "/usr/bin/tcc -I/tmp -Wimplicit-function-declaration -Werror -c /tmp/test.c -o /tmp/test.o 2>/tmp/tcc_error.log",
            "TCC_EXIT_CODE=$?",
            "if [ $TCC_EXIT_CODE -ne 0 ]; then echo 'FAIL: Function declaration missing or commented in header'; echo 'TCC Error Details:'; cat /tmp/tcc_error.log; exit 1; fi",
            "echo 'PASS: All function declarations found in header file'",
            "echo 'Phase 2: Dynamic Implementation Testing'",
            "/bin/loop_impl_tester > /tmp/test_output.log",
            "cat /tmp/test_output.log",
            "echo 'Phase 3: Dynamic Value Extraction and Validation'",
            "echo 'Adding delay to ensure dmesg messages are written...'",
            "sleep 1",
            "echo 'Extracting random test values from output...'",
            "FACTORIAL_N=$(grep -o 'Factorial calculation for n=[0-9]*' /tmp/test_output.log | cut -d'=' -f2)",
            "ARRAY_SIZE_TEST=$(grep -o 'Array processing with [0-9]* elements' /tmp/test_output.log | cut -d' ' -f4)",
            "echo 'Random factorial value: '$FACTORIAL_N",
            "echo 'Random array size: '$ARRAY_SIZE_TEST",
            "echo 'Validating factorial calculation for n='$FACTORIAL_N",
            "dmesg | grep \"Factorial of $FACTORIAL_N:\" && echo 'PASS: Factorial calculation correct' || echo 'FAIL: Factorial calculation wrong'",
            "echo 'Validating array processing for size='$ARRAY_SIZE_TEST",
            "dmesg | grep \"Product of first $ARRAY_SIZE_TEST elements:\" && echo 'PASS: Array processing correct' || echo 'FAIL: Array processing wrong'",
            "echo 'Validating reverse array output'",
            "dmesg | grep 'Array in reverse order:' && echo 'PASS: Reverse array output found' || echo 'FAIL: Reverse array output missing'",
            "echo 'All dynamic validations completed'"
          ],
          "expected": {
            "dmesg": [
              "Loop implementation module loaded",
              "Array in reverse order:",
              "Position .* .*",
              "Factorial of .* .*",
              "Product of first .* elements: .*"
            ],
            "stdout": [
              "PASS: All function declarations found in header file",
              "SUCCESS: Dynamic loop test completed",
              "PASS: Factorial calculation correct",
              "PASS: Array processing correct",
              "PASS: Reverse array output found"
            ]
          },
          "timeout": 25
        }
      }
    ]
  }
}