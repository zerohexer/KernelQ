{
  "id": 27,
  "title": "Module Parameters and Configuration",
  "phase": "foundations",
  "difficulty": 4,
  "xp": 40,
  "description": "Learn to create configurable kernel modules using module parameters. Understand how to accept configuration from userspace during module loading. This is essential for production kernel modules.",
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/moduleparam.h>\n\n// TODO: Declare module parameters:\n// - int parameter 'debug_level' with default value 1\n// - string parameter 'device_name' with default value \"default_device\"\n// - bool parameter 'enable_logging' with default value true\n\n// TODO: Use module_param() to make parameters configurable\n// TODO: Use MODULE_PARM_DESC() to add parameter descriptions\n\nstatic int __init modparam_init(void) {\n    // TODO: Print current parameter values\n    // Expected format:\n    // \"Module loaded with parameters:\"\n    // \"Debug Level: X\"\n    // \"Device Name: Y\"\n    // \"Logging Enabled: Z\"\n    \n    return 0;\n}\n\nstatic void __exit modparam_exit(void) {\n    printk(KERN_INFO \"Module parameters module unloaded\\n\");\n}\n\nmodule_init(modparam_init);\nmodule_exit(modparam_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Your Name\");\nMODULE_DESCRIPTION(\"Module parameters demonstration\");\nMODULE_VERSION(\"1.0\");",
  "concepts": [
    "module parameters",
    "moduleparam.h",
    "module_param macro",
    "MODULE_PARM_DESC",
    "runtime configuration"
  ],
  "skills": [
    "Module configuration",
    "Parameter handling",
    "User-kernel interface",
    "Production module design"
  ],
  "inputOutput": {
    "expectedOutput": [
      "Module loaded with parameters:",
      "Debug Level: 1",
      "Device Name: default_device",
      "Logging Enabled: 1"
    ],
    "requirements": [
      "Use required function names: modparam_init, modparam_exit",
      "Include linux/moduleparam.h",
      "Declare parameters: debug_level (int, default 1), device_name (string, default \"default_device\"), enable_logging (bool, default true)",
      "Use module_param() for each parameter",
      "Use MODULE_PARM_DESC() for parameter descriptions",
      "Print parameters in exact format shown above",
      "Use S_IRUGO permissions for parameters"
    ]
  },
  "validation": {
    "exactRequirements": {
      "functionNames": ["modparam_init", "modparam_exit"],
      "variables": [
        { "name": "debug_level", "type": "int", "value": 1 },
        { "name": "device_name", "type": "char*", "value": "default_device" },
        { "name": "enable_logging", "type": "bool", "value": true }
      ],
      "outputMessages": [
        "Module loaded with parameters:",
        "Debug Level: 1",
        "Device Name: default_device",
        "Logging Enabled: 1"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/moduleparam.h"
      ],
      "mustContain": ["module_param", "MODULE_PARM_DESC", "debug_level", "device_name", "enable_logging"],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "parameter_declarations",
        "name": "Parameter Declarations",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["static int debug_level", "static char *device_name", "static bool enable_logging"],
        "prohibitedSymbols": []
      },
      {
        "id": "module_param_usage",
        "name": "module_param Macro Usage",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["module_param(debug_level", "module_param(device_name", "module_param(enable_logging"],
        "prohibitedSymbols": []
      },
      {
        "id": "parameter_descriptions",
        "name": "Parameter Descriptions",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["MODULE_PARM_DESC"],
        "prohibitedSymbols": []
      },
      {
        "id": "parameter_output",
        "name": "Parameter Values Output",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Module loaded with parameters:", "exact": true },
          { "pattern": "Debug Level: 1", "exact": true },
          { "pattern": "Device Name: default_device", "exact": true },
          { "pattern": "Logging Enabled: 1", "exact": true }
        ]
      }
    ]
  }
}