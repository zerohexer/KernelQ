{
  "id": 7,
  "title": "Function Parameters - Advanced Dynamic Testing",
  "phase": "foundations", 
  "difficulty": 4,
  "xp": 40,
  "description": "Master function parameters and return values with dynamic testing! Create functions that work with changing input values - the system will test your functions with different parameters to ensure they work correctly, not just with hardcoded values.",
  "mainFile": "functions.c",
  "files": [
    {
      "name": "functions.h",
      "content": "#ifndef FUNCTIONS_H\n#define FUNCTIONS_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/types.h>\n\n/* TODO: Declare functions with parameters */\n/* int add_numbers(int a, int b); */\n/* void print_calculation(int num1, int num2, int result); */\n/* bool is_even(int number); */\n\n/* Variables for dynamic testing */\nextern int first;\nextern int second;\n\n#endif /* FUNCTIONS_H */",
      "readOnly": false,
      "language": "h"
    },
    {
      "name": "functions.c",
      "content": "#include \"functions.h\"\n\n/* CHALLENGE: Advanced Function Parameters with Dynamic Testing!\n *\n * REQUIREMENTS:\n * Create these functions:\n * - add_numbers(int a, int b) -> returns a + b\n * - print_calculation(int num1, int num2, int result) -> prints \"num1 + num2 = result\"\n * - is_even(int number) -> returns true if number is even, false if odd\n *\n * CRITICAL WARNING: The testing system will use different input values!\n * Your functions must work with ANY inputs, not just the defaults below.\n */\n\n/* Variables for dynamic testing */\nint first = 15;\nint second = 25;\n\n/* IMPORTANT: DO NOT REMOVE OR MODIFY THE LINES BELOW!\n * These module parameter declarations are required for validation testing.\n * The testing system uses these to verify your functions work with different inputs.\n * Removing them will cause test failures.\n */\nmodule_param(first, int, 0644);\nMODULE_PARM_DESC(first, \"First number for testing\");\nmodule_param(second, int, 0644);\nMODULE_PARM_DESC(second, \"Second number for testing\");\n/* END OF REQUIRED MODULE PARAMETER SECTION */\n\n/* TODO: Implement add_numbers function */\n/* Return the sum of a and b */\n\n\n/* TODO: Implement print_calculation function */  \n/* Print in format: \"num1 + num2 = result\" */\n\n\n/* TODO: Implement is_even function */\n/* Return true if number is even, false if odd */\n/* Hint: Use modulo operator (%) */\n\n\nstatic int __init functions_init(void)\n{\n    int sum;\n    bool even_check;\n    \n    printk(KERN_INFO \"Function parameters module loaded\\n\");\n    \n    /* TODO: Call add_numbers and store result */\n    /* sum = add_numbers(first, second); */\n    \n    /* TODO: Call print_calculation to display result */\n    /* print_calculation(first, second, sum); */\n    \n    /* TODO: Check if sum is even and print result */\n    /* even_check = is_even(sum); */\n    /* printk(KERN_INFO \"Sum is even: %d\\n\", even_check); */\n    \n    return 0;\n}\n\nstatic void __exit functions_exit(void)\n{\n    printk(KERN_INFO \"Function parameters module unloaded\\n\");\n}\n\nmodule_init(functions_init);\nmodule_exit(functions_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Advanced function parameters with dynamic testing\");\nMODULE_VERSION(\"1.0\");",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "Makefile",
      "content": "# Functions module Makefile\nobj-m += functions.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "concepts": [
    "function parameters",
    "return values", 
    "function calls with arguments",
    "local variables",
    "modulo operator",
    "boolean logic"
  ],
  "skills": [
    "Writing functions with parameters",
    "Understanding return values",
    "Function composition", 
    "Mathematical operations in kernel space",
    "Boolean operations and logic"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": ["functions_init", "functions_exit", "add_numbers", "print_calculation", "is_even"],
      "variables": [
        { "name": "first", "type": "int", "value": 15 },
        { "name": "second", "type": "int", "value": 25 }
      ],
      "outputMessages": [
        "Function parameters module loaded",
        "15 + 25 = 40",
        "Sum is even: 1"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/types.h"
      ],
      "mustContain": [
        "int add_numbers(int a, int b)",
        "void print_calculation(int num1, int num2, int result)",
        "bool is_even(int number)",
        "return a + b",
        "number % 2 == 0",
        "add_numbers(first, second)"
      ],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "function_declarations",
        "name": "Function Declarations in Header",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["int add_numbers(int a, int b)", "void print_calculation(int num1, int num2, int result)", "bool is_even(int number)"],
        "prohibitedSymbols": []
      },
      {
        "id": "function_implementations",
        "name": "Function Implementations",
        "type": "code_analysis", 
        "critical": true,
        "expectedSymbols": ["return a + b", "return (number % 2 == 0)"],
        "prohibitedSymbols": []
      },
      {
        "id": "function_calls",
        "name": "Proper Function Calls",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["add_numbers(first, second)", "print_calculation(first, second, sum)", "is_even(sum)"],
        "prohibitedSymbols": []
      },
      {
        "id": "modulo_operator",
        "name": "Modulo Operator Usage", 
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["number % 2"],
        "prohibitedSymbols": []
      },
      {
        "id": "return_values",
        "name": "Proper Return Value Usage",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["sum = add_numbers", "even_check = is_even"],
        "prohibitedSymbols": []
      },
      {
        "id": "function_signatures_source",
        "name": "Function Signatures in Source File",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "int add_numbers(int a, int b)",
          "void print_calculation(int num1, int num2, int result)",
          "bool is_even(int number)",
          "static int __init functions_init(void)",
          "static void __exit functions_exit(void)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "exact_output",
        "name": "Basic Output Messages",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Function parameters module loaded", "exact": true },
          { "pattern": "15 + 25 = 40", "exact": true },
          { "pattern": "Sum is even: 1", "exact": true }
        ]
      },
      {
        "id": "advanced_function_testing",
        "name": "Advanced Function Parameter Testing",
        "type": "kernel_project_test",
        "critical": true,
        "testScenario": {
          "userspaceApps": [
            {
              "name": "function_tester",
              "source": "#include <stdio.h>\\n#include <stdlib.h>\\n\\nint main() {\\n    printf(\"=== Dynamic Function Test ===\\\\n\");\\n    printf(\"Test 1: Testing first=10, second=30 (sum=40, even)\\\\n\");\\n    system(\"rmmod functions 2>/dev/null\");\\n    system(\"insmod /lib/modules/functions.ko first=10 second=30\");\\n    printf(\"Test 2: Testing first=7, second=8 (sum=15, odd)\\\\n\");\\n    system(\"rmmod functions\");\\n    system(\"insmod /lib/modules/functions.ko first=7 second=8\");\\n    printf(\"SUCCESS: Dynamic test completed\\\\n\");\\n    printf(\"PASS: Function parameters detected\\\\n\");\\n    printf(\"PASS: Module parameters work\\\\n\");\\n    return 0;\\n}"
            }
          ],
          "setupCommands": [
            "echo 'Starting comprehensive validation'",
            "cp /lib/modules/functions.h /lib/modules/ 2>/dev/null"
          ],
          "testCommands": [
            "echo 'Phase 1: Ultra-Fast TCC Header Validation'",
            "echo 'Creating minimal kernel header stubs for TCC...'",
            "mkdir -p /tmp/linux",
            "echo '#define KERN_INFO' > /tmp/linux/kernel.h",
            "echo '#define MODULE_LICENSE(x)' > /tmp/linux/module.h", 
            "echo '#define MODULE_AUTHOR(x)' >> /tmp/linux/module.h",
            "echo '#define MODULE_DESCRIPTION(x)' >> /tmp/linux/module.h",
            "echo '#define module_init(x)' >> /tmp/linux/module.h",
            "echo '#define module_exit(x)' >> /tmp/linux/module.h",
            "echo '#define __init' > /tmp/linux/init.h",
            "echo '#define __exit' >> /tmp/linux/init.h",
            "echo 'typedef int bool;' > /tmp/linux/types.h",
            "echo 'Creating test file that includes student header...'",
            "echo '#include \"/lib/modules/functions.h\"' > /tmp/test.c",
            "echo 'int main() { add_numbers(1,2); print_calculation(1,2,3); is_even(4); return 0; }' >> /tmp/test.c",
            "echo 'Running TCC validation...'",
            "/usr/bin/tcc -I/tmp -Wimplicit-function-declaration -Werror -c /tmp/test.c -o /tmp/test.o 2>/tmp/tcc_error.log",
            "TCC_EXIT_CODE=$?",
            "if [ $TCC_EXIT_CODE -ne 0 ]; then echo 'FAIL: Function declarations missing or commented in header'; echo 'TCC Error Details:'; cat /tmp/tcc_error.log; exit 1; fi",
            "echo 'PASS: All function declarations found in header file'",
            "echo 'Phase 2: Dynamic Parameter Testing'",
            "echo 'Marking start of dynamic tests for validation...'",
            "echo 'DYNAMIC_TEST_START' > /tmp/test_marker",
            "/bin/function_tester",
            "echo 'Phase 3: Context-Aware Logic Validation'",
            "echo 'Validating Test 1: first=10, second=30 (sum=40, should be even)'",
            "dmesg | grep '10 + 30 = 40' && echo 'PASS: add_numbers(10,30) calculation correct' || { echo 'FAIL: add_numbers(10,30) calculation wrong or missing'; exit 1; }",
            "dmesg | grep -A1 '10 + 30 = 40' | grep 'Sum is even: 1' && echo 'PASS: is_even(40) correctly identifies even number' || { echo 'FAIL: is_even(40) wrong - should return 1 for even number 40'; exit 1; }",
            "echo 'Validating Test 2: first=7, second=8 (sum=15, should be odd)'",
            "dmesg | grep '7 + 8 = 15' && echo 'PASS: add_numbers(7,8) calculation correct' || { echo 'FAIL: add_numbers(7,8) calculation wrong or missing'; exit 1; }",
            "dmesg | grep -A1 '7 + 8 = 15' | grep 'Sum is even: 0' && echo 'PASS: is_even(15) correctly identifies odd number' || { echo 'FAIL: is_even(15) wrong - should return 0 for odd number 15'; exit 1; }",
            "echo 'Phase 4: Cross-Validation (ensuring test-specific results are correct)'",
            "echo 'Checking that 40 (even) produces Sum is even: 1'",
            "TEST1_CORRECT=$(dmesg | grep -A1 '10 + 30 = 40' | grep -c 'Sum is even: 1')",
            "echo 'Checking that 15 (odd) produces Sum is even: 0'", 
            "TEST2_CORRECT=$(dmesg | grep -A1 '7 + 8 = 15' | grep -c 'Sum is even: 0')",
            "echo 'Test 1 correct results: '$TEST1_CORRECT' (expected: 1)'",
            "echo 'Test 2 correct results: '$TEST2_CORRECT' (expected: 1)'",
            "if [ $TEST1_CORRECT -eq 1 ] && [ $TEST2_CORRECT -eq 1 ]; then echo 'PASS: Both tests show correct even/odd logic'; else echo 'FAIL: Logic validation failed - Test 1: '$TEST1_CORRECT', Test 2: '$TEST2_CORRECT' (expected 1 each)'; exit 1; fi"
          ],
          "expected": {
            "dmesg": [
              "Function parameters module loaded",
              "10 \\+ 30 = 40",
              "Sum is even: 1",
              "7 \\+ 8 = 15",
              "Sum is even: 0"
            ],
            "stdout": [
              "PASS: All function declarations found in header file",
              "SUCCESS: Dynamic test completed",
              "PASS: Both tests show correct even/odd logic"
            ]
          },
          "timeout": 25
        }
      }
    ]
  }
}
