{
  "id": 31,
  "title": "Comprehensive Foundations Assessment",
  "phase": "foundations",
  "difficulty": 7,
  "xp": 75,
  "description": "Final comprehensive assessment integrating all foundation concepts: variables, functions, pointers, structures, memory management, control flow, and kernel-specific features. This validates complete mastery of kernel C foundations.",
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/slab.h>\n#include <linux/string.h>\n#include <linux/moduleparam.h>\n#include <linux/errno.h>\n\n// TODO: Define preprocessor constants\n#define MAX_STUDENTS 50\n#define NAME_LENGTH 32\n#define GRADE_LEVELS 5\n\n// TODO: Define enum for student status\nenum student_status {\n    STATUS_ENROLLED,\n    STATUS_ACTIVE,\n    STATUS_GRADUATED,\n    STATUS_DROPPED\n};\n\n// TODO: Define student structure\nstruct student {\n    int student_id;\n    char *name;\n    enum student_status status;\n    float gpa;\n    int courses[4];\n    int course_count;\n};\n\n// TODO: Define union for grade data\nunion grade_data {\n    float numeric_grade;\n    char letter_grade;\n    struct {\n        unsigned int passed:1;\n        unsigned int honors:1;\n        unsigned int credits:6;\n    } flags;\n};\n\n// TODO: Module parameters\nstatic int max_capacity = 30;\nstatic bool debug_enabled = false;\nmodule_param(max_capacity, int, S_IRUGO);\nmodule_param(debug_enabled, bool, S_IRUGO);\n\n// TODO: Global variables\nstatic struct student **student_list = NULL;\nstatic int student_count = 0;\nstatic unsigned long statistics = 0;\n\n// TODO: Function prototypes and implementations\n\n// Function to create a new student\nstatic struct student *create_student(int id, const char *name, float gpa) {\n    struct student *new_student;\n    \n    // TODO: Allocate memory for student\n    // TODO: Allocate memory for name and copy\n    // TODO: Initialize all fields\n    // TODO: Return pointer or NULL on failure\n    \n    return NULL; // Placeholder\n}\n\n// Function to destroy a student and free memory\nstatic void destroy_student(struct student *student) {\n    // TODO: Free name memory\n    // TODO: Free student structure\n}\n\n// Function to calculate class statistics using pointers\nstatic void calculate_statistics(struct student **students, int count, \n                               float *avg_gpa, int *active_count) {\n    // TODO: Calculate average GPA of active students\n    // TODO: Count active students\n    // TODO: Use pointer arithmetic and dereferencing\n}\n\n// Function to process grades using unions and bitwise operations\nstatic void process_grades(union grade_data *grades, int count) {\n    // TODO: Process array of grade data\n    // TODO: Use bitwise operations on flags\n    // TODO: Print grade information\n}\n\n// Function demonstrating control flow\nstatic int enrollment_manager(void) {\n    int result = 0;\n    \n    // TODO: Use loops to create test students\n    // TODO: Use conditionals for validation\n    // TODO: Use switch for status processing\n    // TODO: Demonstrate break/continue\n    \n    return result;\n}\n\nstatic int __init assessment_init(void) {\n    float average_gpa = 0.0;\n    int active_students = 0;\n    union grade_data test_grades[3];\n    int i;\n    \n    pr_info(\"=== Comprehensive Foundations Assessment ===\\n\");\n    pr_info(\"Module parameters: max_capacity=%d, debug_enabled=%d\\n\", \n            max_capacity, debug_enabled);\n    \n    // TODO: Allocate memory for student list\n    student_list = kmalloc(sizeof(struct student *) * MAX_STUDENTS, GFP_KERNEL);\n    if (!student_list) {\n        pr_err(\"Failed to allocate student list\\n\");\n        return -ENOMEM;\n    }\n    \n    // TODO: Initialize student list to NULL\n    for (i = 0; i < MAX_STUDENTS; i++) {\n        student_list[i] = NULL;\n    }\n    \n    // TODO: Run enrollment manager\n    if (enrollment_manager() < 0) {\n        pr_err(\"Enrollment manager failed\\n\");\n        kfree(student_list);\n        return -EIO;\n    }\n    \n    // TODO: Calculate statistics\n    calculate_statistics(student_list, student_count, &average_gpa, &active_students);\n    \n    // TODO: Process test grades\n    test_grades[0].numeric_grade = 95.5;\n    test_grades[1].letter_grade = 'A';\n    test_grades[2].flags.passed = 1;\n    test_grades[2].flags.honors = 1;\n    test_grades[2].flags.credits = 3;\n    \n    process_grades(test_grades, 3);\n    \n    // TODO: Print final statistics\n    pr_info(\"Final Statistics: %d students, average GPA: %.2f\\n\", \n            active_students, average_gpa);\n    \n    return 0;\n}\n\nstatic void __exit assessment_exit(void) {\n    int i;\n    \n    // TODO: Clean up all allocated memory\n    if (student_list) {\n        for (i = 0; i < student_count; i++) {\n            if (student_list[i]) {\n                destroy_student(student_list[i]);\n            }\n        }\n        kfree(student_list);\n    }\n    \n    pr_info(\"Assessment module cleanup completed\\n\");\n}\n\nmodule_init(assessment_init);\nmodule_exit(assessment_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Your Name\");\nMODULE_DESCRIPTION(\"Comprehensive foundations assessment module\");\nMODULE_VERSION(\"1.0\");",
  "concepts": [
    "comprehensive integration",
    "memory management",
    "data structures",
    "pointers and references",
    "control flow",
    "error handling",
    "module parameters",
    "unions and bitfields",
    "preprocessor directives",
    "function design"
  ],
  "skills": [
    "Complete foundation mastery",
    "Integration of all concepts",
    "Production-ready code",
    "Complex problem solving",
    "Memory safety",
    "Error handling patterns"
  ],
  "inputOutput": {
    "expectedOutput": [
      "=== Comprehensive Foundations Assessment ===",
      "Module parameters: max_capacity=30, debug_enabled=0",
      "Created student: ID=1, Name=Alice, GPA=3.8",
      "Created student: ID=2, Name=Bob, GPA=3.5", 
      "Created student: ID=3, Name=Charlie, GPA=3.9",
      "Processing grades:",
      "Grade 0: Numeric 95.5",
      "Grade 1: Letter A",
      "Grade 2: Passed=1, Honors=1, Credits=3",
      "Final Statistics: 3 students, average GPA: 3.73"
    ],
    "requirements": [
      "Use required function names: assessment_init, assessment_exit",
      "Implement all required functions: create_student, destroy_student, calculate_statistics, process_grades, enrollment_manager",
      "Use all foundation concepts: structs, unions, enums, pointers, arrays, loops, conditionals",
      "Implement proper memory management with kmalloc/kfree",
      "Use module parameters with proper declarations",
      "Implement comprehensive error handling",
      "Use bitwise operations and unions correctly",
      "Create at least 3 test students with proper data",
      "Calculate and display statistics correctly"
    ]
  },
  "validation": {
    "exactRequirements": {
      "functionNames": ["assessment_init", "assessment_exit", "create_student", "destroy_student", "calculate_statistics", "process_grades", "enrollment_manager"],
      "variables": [
        { "name": "max_capacity", "type": "static int", "value": 30 },
        { "name": "debug_enabled", "type": "static bool", "value": false },
        { "name": "student_list", "type": "static struct student**", "value": "allocated" },
        { "name": "student_count", "type": "static int", "value": "calculated" }
      ],
      "outputMessages": [
        "=== Comprehensive Foundations Assessment ===",
        "Module parameters: max_capacity=30, debug_enabled=0",
        "Created student: ID=[0-9]+, Name=[A-Za-z]+, GPA=[0-9]\\.[0-9]+",
        "Processing grades:",
        "Final Statistics: [0-9]+ students, average GPA: [0-9]\\.[0-9]+"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/slab.h",
        "linux/string.h",
        "linux/moduleparam.h",
        "linux/errno.h"
      ],
      "mustContain": ["#define MAX_STUDENTS", "enum student_status", "struct student", "union grade_data", "kmalloc", "kfree", "module_param", "for (", "if (", "switch"],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "all_structures_defined",
        "name": "All Required Structures Defined",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["enum student_status", "struct student", "union grade_data"],
        "prohibitedSymbols": []
      },
      {
        "id": "memory_management",
        "name": "Proper Memory Management",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["kmalloc(", "kfree(", "kstrdup(", "GFP_KERNEL"],
        "prohibitedSymbols": ["malloc", "free"]
      },
      {
        "id": "function_implementations",
        "name": "All Functions Implemented",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["struct student *create_student", "void destroy_student", "void calculate_statistics", "void process_grades", "int enrollment_manager"],
        "prohibitedSymbols": ["return NULL; // Placeholder"]
      },
      {
        "id": "module_parameters",
        "name": "Module Parameters Properly Declared",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["module_param(max_capacity", "module_param(debug_enabled", "S_IRUGO"],
        "prohibitedSymbols": []
      },
      {
        "id": "control_flow_usage",
        "name": "All Control Flow Structures Used",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["for (", "while (", "if (", "switch (", "break", "continue"],
        "prohibitedSymbols": []
      },
      {
        "id": "pointer_operations",
        "name": "Pointer Operations and Dereferencing",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["struct student **", "student_list[i]", "*avg_gpa", "&average_gpa"],
        "prohibitedSymbols": []
      },
      {
        "id": "union_bitfield_usage",
        "name": "Union and Bitfield Operations",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["union grade_data", "flags.passed", "flags.honors", "flags.credits"],
        "prohibitedSymbols": []
      },
      {
        "id": "error_handling",
        "name": "Comprehensive Error Handling",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["if (!student_list)", "return -ENOMEM", "return -EIO", "pr_err("],
        "prohibitedSymbols": []
      },
      {
        "id": "memory_cleanup",
        "name": "Proper Memory Cleanup",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["destroy_student(student_list[i])", "kfree(student_list)"],
        "prohibitedSymbols": []
      },
      {
        "id": "comprehensive_output",
        "name": "Comprehensive Assessment Output",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "=== Comprehensive Foundations Assessment ===", "exact": true },
          { "pattern": "Module parameters: max_capacity=30, debug_enabled=0", "exact": true },
          { "pattern": "Created student: ID=[0-9]+", "exact": false },
          { "pattern": "Final Statistics: [0-9]+ students", "exact": false }
        ]
      }
    ]
  }
}