{
  "id": 11,
  "title": "Basic Loops - Implement Loop Solutions",
  "phase": "foundations",
  "difficulty": 4,
  "xp": 40,
  "description": "Implement your own loop-based solutions for iterative calculations using simple integers. Apply the patterns you studied in Problem 10 to create functions that perform mathematical calculations using loops. This focuses on pure loop logic without arrays.",
  "mainFile": "loops_impl.c",
  "files": [
    {
      "name": "loops_impl.h",
      "content": "#ifndef LOOPS_IMPL_H\n#define LOOPS_IMPL_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/types.h>\n\nextern int start_number;\nextern int factorial_number;\nextern int base_number;\nextern int power_number;\n\n/* TODO: Declare your functions */\n/* void print_countdown(int start); */\n/* int calculate_factorial(int n); */\n/* int calculate_power(int base, int exponent); */\n\n#endif /* LOOPS_IMPL_H */",
      "readOnly": false,
      "language": "h"
    },
    {
      "name": "loops_impl.c",
      "content": "#include \"loops_impl.h\"\n\nint start_number = 5;      // Default: countdown from 5\nint factorial_number = 5;  // Default: calculate factorial of 5\nint base_number = 2;       // Default: base for power calculation\nint power_number = 3;      // Default: exponent for power calculation\n\n/* IMPORTANT: DO NOT REMOVE OR MODIFY THE LINES BELOW!\n * These module parameter declarations are required for validation testing.\n * The testing system uses these to verify your loop implementations work\n * with different input values. Removing them will cause test failures.\n */\nmodule_param(start_number, int, 0644);\nMODULE_PARM_DESC(start_number, \"Starting number for countdown testing\");\nmodule_param(factorial_number, int, 0644);\nMODULE_PARM_DESC(factorial_number, \"Number for factorial calculation testing\");\nmodule_param(base_number, int, 0644);\nMODULE_PARM_DESC(base_number, \"Base number for power calculation testing\");\nmodule_param(power_number, int, 0644);\nMODULE_PARM_DESC(power_number, \"Exponent for power calculation testing\");\n/* END OF REQUIRED MODULE PARAMETER SECTION */\n\n/* TODO: Implement function to print countdown from start to 1 */\n/* Use a for loop starting from start down to 1 */\n/* Print: \"Count: X\" for each number */\n\n/* TODO: Implement function to calculate factorial of n */\n/* factorial(n) = n * (n-1) * (n-2) * ... * 1 */\n/* Use a for loop from 1 to n, multiply result by each number */\n\n/* TODO: Implement function to calculate power (base^exponent) */\n/* power = base * base * base * ... (exponent times) */\n/* Use accumulation pattern: start with result = 1 */\n/* Multiply result by base using for loop exponent times */\n\nstatic int __init loops_impl_init(void)\n{\n    int calculated_factorial, calculated_power;\n    \n    printk(KERN_INFO \"Loop implementation module loaded\\n\");\n    \n    /* TODO: Print countdown from start_number to 1 */\n    /* printk(KERN_INFO \"Countdown from %d:\\n\", start_number); */\n    /* print_countdown(start_number); */\n    \n    /* TODO: Calculate factorial using factorial_number as input */\n    /* calculated_factorial = calculate_factorial(factorial_number); */\n    /* printk(KERN_INFO \"Factorial of %d: %d\\n\", factorial_number, calculated_factorial); */\n    \n    /* TODO: Calculate power using base_number and power_number */\n    /* calculated_power = calculate_power(base_number, power_number); */\n    /* printk(KERN_INFO \"%d to the power of %d: %d\\n\", base_number, power_number, calculated_power); */\n    \n    return 0;\n}\n\nstatic void __exit loops_impl_exit(void)\n{\n    printk(KERN_INFO \"Loop implementation module unloaded\\n\");\n}\n\nmodule_init(loops_impl_init);\nmodule_exit(loops_impl_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Implementing basic loop calculations\");\nMODULE_VERSION(\"1.0\");",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "Makefile",
      "content": "# Loop implementation module Makefile\nobj-m += loops_impl.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "concepts": [
    "countdown iteration",
    "factorial calculation",
    "power calculation with loops",
    "multiplication accumulation patterns",
    "loop control variables"
  ],
  "skills": [
    "Implementing countdown loops",
    "Mathematical calculations with loops", 
    "Basic accumulation algorithms",
    "Multiplication patterns",
    "Loop-based problem solving"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": ["loops_impl_init", "loops_impl_exit", "print_countdown", "calculate_factorial", "calculate_power"],
      "variables": [
        { "name": "start_number", "type": "int", "value": 5 },
        { "name": "factorial_number", "type": "int", "value": 5 },
        { "name": "base_number", "type": "int", "value": 2 },
        { "name": "power_number", "type": "int", "value": 3 }
      ],
      "outputMessages": [
        "Loop implementation module loaded",
        "Countdown from 5:",
        "Count: 5",
        "Count: 4", 
        "Count: 3",
        "Count: 2",
        "Count: 1",
        "Factorial of 5: 120",
        "2 to the power of 3: 8"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/types.h"
      ],
      "mustContain": [
        "extern int start_number",
        "extern int factorial_number",
        "extern int base_number",
        "extern int power_number"
      ],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "function_declarations",
        "name": "Function Declarations in Header",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void print_countdown(int start)",
          "int calculate_factorial(int n)",
          "int calculate_power(int base, int exponent)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "function_signatures_source",
        "name": "Function Signatures in Source File",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void print_countdown(int start)",
          "int calculate_factorial(int n)",
          "int calculate_power(int base, int exponent)",
          "static int __init loops_impl_init(void)",
          "static void __exit loops_impl_exit(void)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "exact_output",
        "name": "Basic Output Messages",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Loop implementation module loaded", "exact": true, "linkedFunction": "static int __init loops_impl_init(void)" },
          { "pattern": "Countdown from 5:", "exact": true, "linkedFunction": "static int __init loops_impl_init(void)" },
          { "pattern": "Count: 5", "exact": true, "linkedFunction": "void print_countdown(int start)" },
          { "pattern": "Count: 4", "exact": true, "linkedFunction": "void print_countdown(int start)" },
          { "pattern": "Count: 3", "exact": true, "linkedFunction": "void print_countdown(int start)" },
          { "pattern": "Count: 2", "exact": true, "linkedFunction": "void print_countdown(int start)" },
          { "pattern": "Count: 1", "exact": true, "linkedFunction": "void print_countdown(int start)" },
          { "pattern": "Factorial of 5: 120", "exact": true, "linkedFunction": "static int __init loops_impl_init(void)" },
          { "pattern": "2 to the power of 3: 8", "exact": true, "linkedFunction": "static int __init loops_impl_init(void)" }
        ]
      },
      {
        "id": "advanced_loop_implementation_validation",
        "name": "Advanced Loop Implementation with TCC Header Validation",
        "type": "kernel_project_test",
        "critical": true,
        "testScenario": {
          "userspaceApps": [
            {
              "name": "loop_impl_tester",
              "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <time.h>\\n\\nint main() {\\n    printf(\"=== Dynamic Loop Implementation Test ===\\\\n\");\\n    \\n    // Seed random number generator\\n    srand(time(NULL));\\n    \\n    // Generate random test values\\n    int countdown_start = (rand() % 5) + 3;  // 3 to 7\\n    int factorial_n = (rand() % 5) + 3;      // 3 to 7 for reasonable factorial\\n    int base = (rand() % 3) + 2;             // 2 to 4\\n    int exponent = (rand() % 3) + 2;         // 2 to 4\\n    \\n    printf(\"Test 1: Countdown from %d, factorial of %d\\\\n\", countdown_start, factorial_n);\\n    char cmd1[256];\\n    snprintf(cmd1, sizeof(cmd1), \"insmod /lib/modules/loops_impl.ko start_number=%d factorial_number=%d\", countdown_start, factorial_n);\\n    system(\"rmmod loops_impl 2>/dev/null\");\\n    system(cmd1);\\n    \\n    printf(\"Test 2: Power calculation %d^%d\\\\n\", base, exponent);\\n    char cmd2[256];\\n    snprintf(cmd2, sizeof(cmd2), \"insmod /lib/modules/loops_impl.ko base_number=%d power_number=%d\", base, exponent);\\n    system(\"rmmod loops_impl\");\\n    system(cmd2);\\n    \\n    printf(\"SUCCESS: Dynamic loop test completed\\\\n\");\\n    return 0;\\n}"
            }
          ],
          "setupCommands": [
            "echo 'Starting advanced loop implementation validation'"
          ],
          "testCommands": [
            "echo 'Phase 1: Ultra-Fast TCC Header Validation'",
            "echo 'Creating minimal kernel header stubs for TCC...'",
            "mkdir -p /tmp/linux",
            "echo '#define KERN_INFO' > /tmp/linux/kernel.h",
            "echo '#define MODULE_LICENSE(x)' > /tmp/linux/module.h",
            "echo '#define MODULE_AUTHOR(x)' >> /tmp/linux/module.h",
            "echo '#define MODULE_DESCRIPTION(x)' >> /tmp/linux/module.h",
            "echo '#define module_init(x)' >> /tmp/linux/module.h",
            "echo '#define module_exit(x)' >> /tmp/linux/module.h",
            "echo '#define __init' > /tmp/linux/init.h",
            "echo '#define __exit' >> /tmp/linux/init.h",
            "echo 'typedef int bool;' > /tmp/linux/types.h",
            "echo 'Creating test file that includes student header...'",
            "echo '#include \"/lib/modules/loops_impl.h\"' > /tmp/test.c",
            "echo 'int main() { print_countdown(5); calculate_factorial(5); calculate_power(2, 3); return 0; }' >> /tmp/test.c",
            "echo 'Running TCC validation...'",
            "/usr/bin/tcc -I/tmp -Wimplicit-function-declaration -Werror -c /tmp/test.c -o /tmp/test.o 2>/tmp/tcc_error.log",
            "TCC_EXIT_CODE=$?",
            "if [ $TCC_EXIT_CODE -ne 0 ]; then echo 'FAIL: Function declaration missing or commented in header'; echo 'TCC Error Details:'; cat /tmp/tcc_error.log; exit 1; fi",
            "echo 'PASS: All function declarations found in header file'",
            "echo 'Phase 2: Dynamic Implementation Testing'",
            "/bin/loop_impl_tester > /tmp/test_output.log",
            "cat /tmp/test_output.log",
            "echo 'Phase 3: Dynamic Value Extraction and Validation'",
            "echo 'Adding delay to ensure dmesg messages are written...'",
            "sleep 1",
            "echo 'Extracting random test values from output...'",
            "COUNTDOWN_START=$(grep -o 'Countdown from [0-9]*' /tmp/test_output.log | head -1 | cut -d' ' -f3 | cut -d',' -f1)",
            "FACTORIAL_N=$(grep -o 'factorial of [0-9]*' /tmp/test_output.log | head -1 | cut -d' ' -f3)",
            "BASE_NUM=$(grep -o 'Power calculation [0-9]*' /tmp/test_output.log | cut -d' ' -f3)",
            "EXPONENT_NUM=$(grep -o '[0-9]*\\^[0-9]*' /tmp/test_output.log | cut -d'^' -f2)",
            "echo 'Random values: countdown='$COUNTDOWN_START', factorial='$FACTORIAL_N', power='$BASE_NUM'^'$EXPONENT_NUM",
            "echo 'Validating countdown from '$COUNTDOWN_START",
            "dmesg | grep \"Countdown from $COUNTDOWN_START:\" && echo 'PASS: Countdown output correct' || echo 'PASS: Countdown working (flexible validation)'",
            "echo 'Validating factorial calculation for n='$FACTORIAL_N",
            "dmesg | grep \"Factorial of $FACTORIAL_N:\" && echo 'PASS: Factorial calculation correct' || echo 'PASS: Factorial working (flexible validation)'",
            "echo 'Validating power calculation '$BASE_NUM'^'$EXPONENT_NUM",
            "dmesg | grep \"$BASE_NUM to the power of $EXPONENT_NUM:\" && echo 'PASS: Power calculation correct' || echo 'PASS: Power working (flexible validation)'",
            "echo 'All dynamic validations completed'"
          ],
          "expected": {
            "dmesg": [
              "Loop implementation module loaded",
              "Countdown from .*:",
              "Count: .*",
              "Factorial of .* .*",
              ".* to the power of .* .*"
            ],
            "stdout": [
              "PASS: All function declarations found in header file",
              "SUCCESS: Dynamic loop test completed",
              "PASS: Countdown output correct",
              "PASS: Factorial calculation correct",
              "PASS: Power calculation correct"
            ]
          },
          "timeout": 25
        }
      }
    ]
  }
}