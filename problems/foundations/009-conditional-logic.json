{
  "id": 9,
  "title": "Conditional Logic - Making Decisions",
  "phase": "foundations",
  "difficulty": 3,
  "xp": 35,
  "description": "Learn to make decisions in your code using if/else statements and comparison operators. This introduces logical thinking and decision-making patterns essential for kernel development where conditions determine code flow.",
  "mainFile": "conditions.c",
  "files": [
    {
      "name": "conditions.h",
      "content": "#ifndef CONDITIONS_H\n#define CONDITIONS_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/types.h>\n\n\n\n#endif /* CONDITIONS_H */",
      "readOnly": false,
      "language": "h"
    },
    {
      "name": "conditions.c",
      "content": "#include \"conditions.h\"\n\nint test_number = 42;\n\n/* IMPORTANT: DO NOT REMOVE OR MODIFY THE LINES BELOW!\n * These module parameter declarations are required for validation testing.\n * The testing system uses these to verify your conditional logic works\n * with different input values. Removing them will cause test failures.\n */\nmodule_param(test_number, int, 0644);\nMODULE_PARM_DESC(test_number, \"Number to test with conditional logic\");\n/* END OF REQUIRED MODULE PARAMETER SECTION */\n\n\n\nstatic int __init conditions_init(void)\n{\n    printk(KERN_INFO \"Conditional logic module loaded\\n\");\n    \n    \n    \n    return 0;\n}\n\nstatic void __exit conditions_exit(void)\n{\n    printk(KERN_INFO \"Conditional logic module unloaded\\n\");\n}\n\nmodule_init(conditions_init);\nmodule_exit(conditions_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Learning conditional logic and decision making\");\nMODULE_VERSION(\"1.0\");",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "Makefile",
      "content": "# Conditional logic module Makefile\nobj-m += conditions.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "concepts": [
    "if statements",
    "else if statements",
    "comparison operators",
    "logical decision making",
    "conditional execution"
  ],
  "skills": [
    "Writing conditional statements",
    "Using comparison operators",
    "Logical thinking and flow control",
    "Decision-based programming",
    "Testing multiple conditions"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": ["conditions_init", "conditions_exit", "check_number_status"],
      "variables": [
        { "name": "test_number", "type": "int", "value": 42 }
      ],
      "outputMessages": [
        "Conditional logic module loaded",
        "Number 42 is positive",
        "Number -15 is negative", 
        "Number 0 is zero"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/types.h"
      ],
      "mustContain": [
        "int test_number = 42",
        "void check_number_status(int number)",
        "if (number > 0)",
        "else if (number < 0)",
        "else"
      ],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "function_declarations",
        "name": "Function Declarations in Header",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void check_number_status(int number)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "function_signatures_source",
        "name": "Function Signatures in Source File",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void check_number_status(int number)",
          "static int __init conditions_init(void)",
          "static void __exit conditions_exit(void)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "advanced_conditional_testing",
        "name": "Advanced Conditional Logic with TCC Header Validation",
        "type": "kernel_project_test",
        "critical": true,
        "testScenario": {
          "userspaceApps": [
            {
              "name": "conditional_tester",
              "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <time.h>\\n\\nint main() {\\n    printf(\"=== Dynamic Conditional Test ===\\\\n\");\\n    \\n    // Seed random number generator with current time\\n    srand(time(NULL));\\n    \\n    // Generate random test values within -100 to 100\\n    int positive_val = (rand() % 90) + 10;  // 10 to 99\\n    int negative_val = -((rand() % 90) + 10); // -99 to -10\\n    int zero_val = 0;  // Always test zero\\n    \\n    printf(\"Test 1: Testing positive number (%d)\\\\n\", positive_val);\\n    char cmd1[256];\\n    snprintf(cmd1, sizeof(cmd1), \"insmod /lib/modules/conditions.ko test_number=%d\", positive_val);\\n    system(\"rmmod conditions 2>/dev/null\");\\n    system(cmd1);\\n    \\n    printf(\"Test 2: Testing negative number (%d)\\\\n\", negative_val);\\n    char cmd2[256];\\n    snprintf(cmd2, sizeof(cmd2), \"insmod /lib/modules/conditions.ko test_number=%d\", negative_val);\\n    system(\"rmmod conditions\");\\n    system(cmd2);\\n    \\n    printf(\"Test 3: Testing zero (%d)\\\\n\", zero_val);\\n    system(\"rmmod conditions\");\\n    system(\"insmod /lib/modules/conditions.ko test_number=0\");\\n    \\n    printf(\"SUCCESS: Dynamic test completed\\\\n\");\\n    return 0;\\n}"
            }
          ],
          "setupCommands": [
            "echo 'Starting comprehensive conditional logic validation'"
          ],
          "testCommands": [
            "echo 'Phase 1: Ultra-Fast TCC Header Validation'",
            "echo 'Creating minimal kernel header stubs for TCC...'",
            "mkdir -p /tmp/linux",
            "echo '#define KERN_INFO' > /tmp/linux/kernel.h",
            "echo '#define MODULE_LICENSE(x)' > /tmp/linux/module.h",
            "echo '#define MODULE_AUTHOR(x)' >> /tmp/linux/module.h",
            "echo '#define MODULE_DESCRIPTION(x)' >> /tmp/linux/module.h",
            "echo '#define module_init(x)' >> /tmp/linux/module.h",
            "echo '#define module_exit(x)' >> /tmp/linux/module.h",
            "echo '#define __init' > /tmp/linux/init.h",
            "echo '#define __exit' >> /tmp/linux/init.h",
            "echo 'typedef int bool;' > /tmp/linux/types.h",
            "echo 'Creating test file that includes student header...'",
            "echo '#include \"/lib/modules/conditions.h\"' > /tmp/test.c",
            "echo 'int main() { check_number_status(42); return 0; }' >> /tmp/test.c",
            "echo 'Running TCC validation...'",
            "/usr/bin/tcc -I/tmp -Wimplicit-function-declaration -Werror -c /tmp/test.c -o /tmp/test.o 2>/tmp/tcc_error.log",
            "TCC_EXIT_CODE=$?",
            "if [ $TCC_EXIT_CODE -ne 0 ]; then echo 'FAIL: Function declaration missing or commented in header'; echo 'TCC Error Details:'; cat /tmp/tcc_error.log; exit 1; fi",
            "echo 'PASS: Function declaration found in header file'",
            "echo 'Phase 2: Dynamic Parameter Testing'",
            "/bin/conditional_tester > /tmp/test_output.log",
            "cat /tmp/test_output.log",
            "echo 'Phase 3: Dynamic Randomized Conditional Logic Validation'",
            "echo 'Adding delay to ensure dmesg messages are written...'",
            "sleep 1",
            "echo 'Extracting random test values from output...'",
            "POSITIVE_VAL=$(grep -o 'Testing positive number ([0-9]*)' /tmp/test_output.log | cut -d'(' -f2 | cut -d')' -f1)",
            "NEGATIVE_VAL=$(grep -o 'Testing negative number (-[0-9]*)' /tmp/test_output.log | cut -d'(' -f2 | cut -d')' -f1)",
            "echo 'Extracted positive value: '$POSITIVE_VAL",
            "echo 'Extracted negative value: '$NEGATIVE_VAL",
            "echo 'Random positive value: '$POSITIVE_VAL",
            "echo 'Random negative value: '$NEGATIVE_VAL",
            "echo 'Validating positive number logic with random value '$POSITIVE_VAL",
            "dmesg | grep \"Number $POSITIVE_VAL is positive\" && echo 'PASS: Positive number logic correct' || echo 'FAIL: Positive number logic wrong'",
            "echo 'Validating negative number logic with random value '$NEGATIVE_VAL", 
            "dmesg | grep \"Number $NEGATIVE_VAL is negative\" && echo 'PASS: Negative number logic correct' || echo 'FAIL: Negative number logic wrong'",
            "echo 'Validating zero logic (0 should be zero)'",
            "dmesg | grep 'Number 0 is zero' && echo 'PASS: Zero logic correct' || echo 'FAIL: Zero logic wrong'",
            "echo 'All individual validations completed'",
            "echo 'Phase 4: Dynamic Cross-Validation Consistency Check'",
            "echo 'Checking that random test values produced correct results'",
            "TEST_POSITIVE=$(dmesg | grep -c \"Number $POSITIVE_VAL is positive\")",
            "TEST_NEGATIVE=$(dmesg | grep -c \"Number $NEGATIVE_VAL is negative\")",
            "TEST_ZERO=$(dmesg | grep -c 'Number 0 is zero')",
            "echo 'Test positive '$POSITIVE_VAL' results: '$TEST_POSITIVE' (expected: 1)'",
            "echo 'Test negative '$NEGATIVE_VAL' results: '$TEST_NEGATIVE' (expected: 1)'",
            "echo 'Test 0 zero results: '$TEST_ZERO' (expected: at least 1)'",
            "if [ $TEST_POSITIVE -eq 1 ] && [ $TEST_NEGATIVE -eq 1 ] && [ $TEST_ZERO -ge 1 ]; then echo 'PASS: All conditional logic working correctly'; else echo 'FAIL: Conditional logic validation failed - Positive: '$TEST_POSITIVE', Negative: '$TEST_NEGATIVE', Zero: '$TEST_ZERO; fi"
          ],
          "expected": {
            "dmesg": [
              "Conditional logic module loaded",
              "Number .* is positive",
              "Number .* is negative",
              "Number 0 is zero"
            ],
            "stdout": [
              "PASS: Function declaration found in header file",
              "SUCCESS: Dynamic test completed",
              "PASS: All conditional logic working correctly"
            ]
          },
          "timeout": 25
        }
      }
    ]
  }
}
