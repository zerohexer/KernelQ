{
  "id": 14,
  "title": "Pointers Basics - Part 1: Declaration and Dereferencing",
  "phase": "foundations",
  "difficulty": 4,
  "xp": 30,
  "description": "Learn fundamental pointer concepts in kernel programming. Understand pointer declaration, assignment, and dereferencing. This is the first part of the pointer series.",
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\n// TODO: Declare an integer variable 'num' with value 42\n// TODO: Declare a pointer 'ptr' that points to 'num'\n// TODO: Print the value of 'num' directly\n// TODO: Print the value of 'num' through the pointer\n// TODO: Print the address stored in the pointer\n\nstatic int __init pointers_init(void) {\n    // TODO: Implement pointer basics\n    // Expected output format:\n    // \"Direct value: 42\"\n    // \"Value through pointer: 42\"\n    // \"Address in pointer: 0x[hex_address]\"\n    \n    return 0;\n}\n\nstatic void __exit pointers_exit(void) {\n    printk(KERN_INFO \"Pointers module unloaded\\n\");\n}\n\nmodule_init(pointers_init);\nmodule_exit(pointers_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Your Name\");\nMODULE_DESCRIPTION(\"Pointers basics demonstration module\");",
  "concepts": [
    "pointers",
    "pointer declaration",
    "dereferencing",
    "address-of operator",
    "memory addresses"
  ],
  "skills": [
    "Pointer manipulation",
    "Memory understanding",
    "Indirection concepts",
    "Address arithmetic"
  ],
  "multiPart": {
    "part": 1,
    "totalParts": 3,
    "nextProblemId": 7,
    "previousProblemId": null
  },
  "inputOutput": {
    "expectedOutput": [
      "Direct value: 42",
      "Value through pointer: 42",
      "Address in pointer: (0x[hex] or (____ptrval____))"
    ],
    "requirements": [
      "Use required function names: pointers_init, pointers_exit",
      "Declare integer variable 'num' with value 42",
      "Declare pointer 'ptr' that points to 'num'",
      "Print direct value, dereferenced value, and address",
      "Use exact format strings shown above",
      "Address output should show pointer value (may be obfuscated as (____ptrval____) for security)"
    ]
  },
  "validation": {
    "exactRequirements": {
      "functionNames": ["pointers_init", "pointers_exit"],
      "variables": [
        { "name": "num", "type": "int", "value": 42 },
        { "name": "ptr", "type": "int*", "value": "&num" }
      ],
      "outputMessages": [
        "Direct value: 42",
        "Value through pointer: 42",
        "Address in pointer: (0x[0-9a-fA-F]+|\\(____ptrval____\\))"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h"
      ],
      "mustContain": ["*ptr", "&num", "int num = 42"],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "pointer_declaration",
        "name": "Pointer Declaration",
        "type": "code_analysis", 
        "critical": true,
        "expectedSymbols": ["*ptr", "&num", "int num = 42"],
        "prohibitedSymbols": []
      },
      {
        "id": "dereferencing",
        "name": "Pointer Dereferencing",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["*ptr"],
        "prohibitedSymbols": []
      },
      {
        "id": "correct_output",
        "name": "Correct Output Values",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Direct value: 42", "exact": true },
          { "pattern": "Value through pointer: 42", "exact": true },
          { "pattern": "Address in pointer: (0x[0-9a-fA-F]+|\\(____ptrval____\\))", "exact": false }
        ]
      }
    ]
  }
}