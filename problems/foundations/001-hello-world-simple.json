{
  "id": 1,
  "title": "Hello World - Your First Kernel Module",
  "phase": "foundations",
  "difficulty": 1,
  "xp": 10,
  "description": "Welcome to kernel programming! Create your very first kernel module - a simple \"Hello World\" program that runs inside the Linux kernel. This introduction uses just one file to keep things simple and help you understand the basics before moving to more advanced topics.",
  "mainFile": "hello.c",
  "files": [
    {
      "name": "hello.c",
      "content": "/* WELCOME TO KERNEL PROGRAMMING!\n *\n * What is this program?\n * - This is a \"kernel module\" - code that runs inside the Linux operating system\n * - Think of it like adding a small program to your computer's core brain\n * - When you load this module, it will print a message you can see with 'dmesg'\n * \n * Don't worry if you don't understand everything - just follow the TODOs!\n * Programming is learned by doing, step by step.\n */\n\n#include <linux/module.h>    /* For all kernel modules */\n#include <linux/kernel.h>    /* For printk() function */\n#include <linux/init.h>      /* For __init and __exit macros */\n\n/* TODO: Create the init function */\n/* This function runs when the module is loaded into memory */\n/* 'static' means only this file can use this function */\n/* 'int' means this function returns a number (0 = success) */\nstatic int __init hello_init(void)\n{\n    /* TODO: Print \"Hello World from kernel!\" using printk */\n    /* printk is like printf, but for kernel messages */\n    /* KERN_INFO means \"information level\" message */\n    /* \\n means \"new line\" (like pressing Enter) */\n    /* Use: printk(KERN_INFO \"Your message here\\n\"); */\n    \n    return 0;  /* Return 0 means \"success, everything worked!\" */\n}\n\n/* TODO: Create the exit function */\n/* This function runs when the module is unloaded from memory */\n/* 'void' means this function doesn't return anything */\nstatic void __exit hello_exit(void)\n{\n    /* TODO: Print \"Goodbye from kernel!\" using printk */\n    /* This lets us know the module was unloaded successfully */\n    /* Use: printk(KERN_INFO \"Your message here\\n\"); */\n}\n\n/* These lines tell the kernel which functions to call */\n/* They register your functions with the kernel */\nmodule_init(hello_init);   /* This registers the init function */\nmodule_exit(hello_exit);   /* This registers the exit function */\n\n/* Module information - these are required by the kernel */\n/* Think of these like a \"name tag\" for your module */\nMODULE_LICENSE(\"GPL\");     /* GPL is a common open source license */\nMODULE_AUTHOR(\"Student\");   /* That's you! */\nMODULE_DESCRIPTION(\"My first kernel module - Hello World\");\nMODULE_VERSION(\"1.0\");     /* Version 1.0 - your first try! */",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "Makefile",
      "content": "# Simple Makefile for hello world kernel module\nobj-m += hello.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "concepts": [
    "kernel modules",
    "printk function",
    "module_init and module_exit",
    "basic kernel programming",
    "module lifecycle"
  ],
  "skills": [
    "Understanding kernel vs userspace",
    "Using printk for kernel output",
    "Creating init and exit functions", 
    "Basic module structure",
    "Kernel module compilation"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": ["hello_init", "hello_exit"],
      "outputMessages": [
        "Hello World from kernel!",
        "Goodbye from kernel!"
      ],
      "requiredIncludes": ["linux/module.h", "linux/kernel.h", "linux/init.h"],
      "mustContain": ["printk", "KERN_INFO"],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "function_signatures_source",
        "name": "Function Signatures in Source File",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "static int __init hello_init(void)",
          "static void __exit hello_exit(void)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "kernel_functionality_test",
        "name": "Kernel Module Functionality Test",
        "type": "kernel_project_test",
        "critical": true,
        "testScenario": {
          "userspaceApps": [
            {
              "name": "hello_tester",
              "source": "#include <stdio.h>\\n#include <stdlib.h>\\n\\nint main() {\\n    printf(\\\"=== Hello World Module Test ===\\\\n\\\");\\n    \\n    printf(\\\"Test: Loading hello module...\\\\n\\\");\\n    system(\\\"insmod /lib/modules/hello.ko\\\");\\n    \\n    printf(\\\"Test: Unloading hello module...\\\\n\\\");\\n    system(\\\"rmmod hello\\\");\\n    \\n    printf(\\\"SUCCESS: Module load/unload completed\\\\n\\\");\\n    return 0;\\n}"
            }
          ],
          "testCommands": [
            "echo 'Testing kernel module compilation and basic functionality...'",
            "/bin/hello_tester",
            "echo 'Adding delay to ensure dmesg messages are written...'",
            "sleep 1",
            "echo 'Checking for kernel logging functionality...'",
            "dmesg | grep 'Hello World from kernel' && echo 'PASS: init function logging working' || echo 'FAIL: init function logging missing'",
            "dmesg | grep 'Goodbye from kernel' && echo 'PASS: exit function logging working' || echo 'FAIL: exit function logging missing'",
            "echo 'PASS: All kernel functionality tests completed'"
          ],
          "expected": {
            "dmesg": [
              "Hello World from kernel!",
              "Goodbye from kernel!"
            ],
            "stdout": [
              "Hello World Module Test",
              "SUCCESS: Module load/unload completed",
              "PASS: All kernel functionality tests completed"
            ]
          },
          "timeout": 10
        }
      },
      {
        "id": "exact_output",
        "name": "Function-Linked Output Messages",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Hello World from kernel!", "exact": true, "linkedFunction": "static int __init hello_init(void)" },
          { "pattern": "Goodbye from kernel!", "exact": true, "linkedFunction": "static void __exit hello_exit(void)" }
        ]
      }
    ]
  }
}
