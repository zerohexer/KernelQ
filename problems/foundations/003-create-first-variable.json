{
  "id": 3,
  "title": "Create Your First Variable",
  "phase": "foundations",
  "difficulty": 1,
  "xp": 15,
  "description": "Learn to create variables in kernel modules using proper file structure. You'll work with separate header and C files - a fundamental practice in professional kernel development that builds good coding habits from day one.",
  "mainFile": "variables.c",
  "files": [
    {
      "name": "variables.h",
      "content": "#ifndef VARIABLES_H\n#define VARIABLES_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\n/* TODO: Declare your variable here */\n/* extern int my_number; */\n\n#endif /* VARIABLES_H */",
      "readOnly": false,
      "language": "h"
    },
    {
      "name": "variables.c",
      "content": "#include \"variables.h\"\n\n/* TODO: Define your variable here with value 42 */\n/* int my_number = 42; */\n\n/* IMPORTANT: DO NOT REMOVE OR MODIFY THE LINES BELOW!\n * These module parameter declarations are required for validation testing.\n * The testing system uses these to verify your variable is declared correctly.\n * Removing them will cause test failures.\n */\nmodule_param(my_number, int, 0644);\nMODULE_PARM_DESC(my_number, \"Variable for testing proper declaration\");\n/* END OF REQUIRED MODULE PARAMETER SECTION */\n\nstatic int __init variables_init(void)\n{\n    printk(KERN_INFO \"Variables module loaded\\n\");\n    /* TODO: Print the variable value to show it exists */\n    /* printk(KERN_INFO \"Variable value: %d\\n\", my_number); */\n    return 0;\n}\n\nstatic void __exit variables_exit(void)\n{\n    printk(KERN_INFO \"Variables module unloaded\\n\");\n}\n\nmodule_init(variables_init);\nmodule_exit(variables_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Learning variables with proper file structure\");\nMODULE_VERSION(\"1.0\");",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "Makefile",
      "content": "# Variables module Makefile\nobj-m += variables.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "concepts": [
    "variable declaration",
    "variable definition", 
    "header files",
    "extern keyword",
    "file structure"
  ],
  "skills": [
    "Proper file organization",
    "Header/C file separation",
    "Variable management",
    "Professional coding habits"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": ["variables_init", "variables_exit"],
      "variables_declarations": [
        { "name": "my_number", "type": "int", "storageClass": "extern" }
      ],
      "variables": [
        { "name": "my_number", "type": "int", "value": 42, "storageClass": "none" }
      ],
      "outputMessages": [
        "Variables module loaded"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h", 
        "linux/init.h"
      ],
      "mustContain": [
        "#ifndef VARIABLES_H",
        "#define VARIABLES_H",
        "extern int my_number",
        "int my_number = 42",
        "#include \"variables.h\""
      ],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "header_guards",
        "name": "Proper Header Guards",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["#ifndef VARIABLES_H", "#define VARIABLES_H", "#endif"],
        "prohibitedSymbols": []
      },
      {
        "id": "variable_declaration",
        "name": "Variable Declaration in Header",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["extern int my_number"],
        "prohibitedSymbols": []
      },
      {
        "id": "variable_definition",
        "name": "Variable Definition in C File",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["int my_number = 42"],
        "prohibitedSymbols": []
      },
      {
        "id": "function_signatures_source",
        "name": "Function Signatures in Source File",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "static int __init variables_init(void)",
          "static void __exit variables_exit(void)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "variable_functionality_test",
        "name": "Variable Declaration and Definition Test",
        "type": "kernel_project_test",
        "critical": true,
        "testScenario": {
          "userspaceApps": [
            {
              "name": "variable_param_tester",
              "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <time.h>\\n\\nint main() {\\n    printf(\\\"=== Variable Parameter Validation Test ===\\\\n\\\");\\n    \\n    // Seed random number generator\\n    srand(time(NULL));\\n    \\n    // Generate random test values\\n    int test_val1 = (rand() % 50) + 10;  // 10-59\\n    int test_val2 = (rand() % 50) + 60;  // 60-109\\n    \\n    printf(\\\"Test 1: Loading with my_number=%d\\\\n\\\", test_val1);\\n    char cmd1[256];\\n    snprintf(cmd1, sizeof(cmd1), \\\"insmod /lib/modules/variables.ko my_number=%d\\\", test_val1);\\n    system(\\\"rmmod variables 2>/dev/null\\\");\\n    system(cmd1);\\n    \\n    printf(\\\"Test 2: Loading with my_number=%d\\\\n\\\", test_val2);\\n    char cmd2[256];\\n    snprintf(cmd2, sizeof(cmd2), \\\"insmod /lib/modules/variables.ko my_number=%d\\\", test_val2);\\n    system(\\\"rmmod variables\\\");\\n    system(cmd2);\\n    \\n    printf(\\\"SUCCESS: Variable parameter test completed\\\\n\\\");\\n    return 0;\\n}"
            }
          ],
          "testCommands": [
            "echo 'Phase 1: Ultra-Fast TCC Header Validation'",
            "echo 'Creating minimal kernel header stubs for TCC...'",
            "mkdir -p /tmp/linux",
            "echo '#define KERN_INFO' > /tmp/linux/kernel.h",
            "echo '#define MODULE_LICENSE(x)' > /tmp/linux/module.h",
            "echo '#define MODULE_AUTHOR(x)' >> /tmp/linux/module.h",
            "echo '#define MODULE_DESCRIPTION(x)' >> /tmp/linux/module.h",
            "echo '#define module_init(x)' >> /tmp/linux/module.h",
            "echo '#define module_exit(x)' >> /tmp/linux/module.h",
            "echo '#define module_param(name, type, perm)' >> /tmp/linux/module.h",
            "echo '#define MODULE_PARM_DESC(var, desc)' >> /tmp/linux/module.h",
            "echo '#define __init' > /tmp/linux/init.h",
            "echo '#define __exit' >> /tmp/linux/init.h",
            "echo 'typedef int bool;' > /tmp/linux/types.h",
            "echo 'Creating test file that validates extern variable declaration...'",
            "echo '#include \"/lib/modules/variables.h\"' > /tmp/test.c",
            "echo 'int main() { my_number = 42; return my_number; }' >> /tmp/test.c",
            "echo 'Running TCC validation...'",
            "/usr/bin/tcc -I/tmp -Wimplicit-function-declaration -Werror -c /tmp/test.c -o /tmp/test.o 2>/tmp/tcc_error.log",
            "TCC_EXIT_CODE=$?",
            "if [ $TCC_EXIT_CODE -ne 0 ]; then echo 'FAIL: extern int my_number not properly declared in header'; echo 'TCC Error Details:'; cat /tmp/tcc_error.log; exit 1; fi",
            "echo 'PASS: extern int my_number found in header file'",
            "echo 'Phase 2: Dynamic Parameter Testing'",
            "/bin/variable_param_tester > /tmp/test_output.log",
            "cat /tmp/test_output.log",
            "echo 'Adding delay to ensure dmesg messages are written...'",
            "sleep 1",
            "echo 'Phase 2.1: Variable parameter extraction...'",
            "TEST_VAL1=$(grep -o 'Test 1: Loading with my_number=[0-9]*' /tmp/test_output.log | cut -d'=' -f2)",
            "TEST_VAL2=$(grep -o 'Test 2: Loading with my_number=[0-9]*' /tmp/test_output.log | cut -d'=' -f2)",
            "echo 'Test value 1: '$TEST_VAL1",
            "echo 'Test value 2: '$TEST_VAL2",
            "echo 'Phase 2.2: Module parameter validation...'",
            "dmesg | grep 'Variables module loaded' && echo 'PASS: Module loads with parameter' || echo 'FAIL: Module loading failed'",
            "echo 'Phase 3: Default value validation (must be 42)...'",
            "rmmod variables 2>/dev/null",
            "insmod /lib/modules/variables.ko",
            "sleep 1",
            "DEFAULT_VALUE=$(cat /sys/module/variables/parameters/my_number 2>/dev/null || echo 'ERROR')",
            "echo 'Default value from parameter: '$DEFAULT_VALUE",
            "if [ \"$DEFAULT_VALUE\" = \"42\" ]; then",
            "    echo 'PASS: Variable initialized to 42 correctly'",
            "else",
            "    echo 'FAIL: Variable not initialized to 42 (got: '$DEFAULT_VALUE')'",
            "fi",
            "echo 'Phase 4: Value reassignment test (ensuring variable is mutable)...'",
            "echo 99 > /sys/module/variables/parameters/my_number 2>/dev/null",
            "NEW_VALUE=$(cat /sys/module/variables/parameters/my_number 2>/dev/null || echo 'ERROR')",
            "echo 'Value after reassignment: '$NEW_VALUE",
            "if [ \"$NEW_VALUE\" = \"99\" ]; then",
            "    echo 'PASS: Variable is mutable and reassignable'",
            "else",
            "    echo 'FAIL: Variable is not properly mutable (expected 99, got: '$NEW_VALUE')'",
            "fi",
            "echo 'Phase 5: Parameter accessibility validation...'",
            "ls /sys/module/variables/parameters/my_number >/dev/null 2>&1 && echo 'PASS: Variable exposed as module parameter' || echo 'FAIL: Variable not declared as module parameter'",
            "echo 'PASS: All variable validation tests completed'"
          ],
          "expected": {
            "dmesg": [
              "Variables module loaded",
              "Variables module unloaded"
            ],
            "stdout": [
              "PASS: extern int my_number found in header file",
              "Variable Parameter Validation Test",
              "SUCCESS: Variable parameter test completed",
              "PASS: Variable initialized to 42 correctly",
              "PASS: Variable is mutable and reassignable",
              "PASS: All variable validation tests completed"
            ]
          },
          "timeout": 10
        }
      },
      {
        "id": "exact_output",
        "name": "Exact Output Message",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Variables module loaded", "exact": true, "linkedFunction": "static int __init variables_init(void)" }
        ]
      }
    ]
  }
}
