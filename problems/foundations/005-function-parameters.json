{
  "id": 5,
  "title": "Function Parameters and Return Values", 
  "phase": "foundations",
  "difficulty": 3,
  "xp": 30,
  "description": "Learn to create functions that accept parameters and return values. This introduces function design patterns commonly used in kernel development, building towards more complex kernel programming concepts.",
  "mainFile": "functions.c",
  "files": [
    {
      "name": "functions.h",
      "content": "#ifndef FUNCTIONS_H\n#define FUNCTIONS_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/types.h>\n\n/* TODO: Declare functions with parameters */\n/* int add_numbers(int a, int b); */\n/* void print_calculation(int num1, int num2, int result); */\n/* bool is_even(int number); */\n\n#endif /* FUNCTIONS_H */",
      "readOnly": false,
      "language": "h"
    },
    {
      "name": "functions.c",
      "content": "#include \"functions.h\"\n\n/* TODO: Implement add_numbers function */\n/* int add_numbers(int a, int b) {\n *     return a + b;\n * } */\n\n/* TODO: Implement print_calculation function */\n/* void print_calculation(int num1, int num2, int result) {\n *     printk(KERN_INFO \"%d + %d = %d\\n\", num1, num2, result);\n * } */\n\n/* TODO: Implement is_even function */\n/* bool is_even(int number) {\n *     return (number % 2 == 0);\n * } */\n\nstatic int __init functions_init(void)\n{\n    int first = 15;\n    int second = 25;\n    int sum;\n    bool even_check;\n    \n    printk(KERN_INFO \"Function parameters module loaded\\n\");\n    \n    /* TODO: Call add_numbers and store result */\n    /* sum = add_numbers(first, second); */\n    \n    /* TODO: Call print_calculation to display result */\n    /* print_calculation(first, second, sum); */\n    \n    /* TODO: Check if sum is even and print result */\n    /* even_check = is_even(sum); */\n    /* printk(KERN_INFO \"Sum is even: %d\\n\", even_check); */\n    \n    return 0;\n}\n\nstatic void __exit functions_exit(void)\n{\n    printk(KERN_INFO \"Function parameters module unloaded\\n\");\n}\n\nmodule_init(functions_init);\nmodule_exit(functions_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Learning function parameters and return values\");\nMODULE_VERSION(\"1.0\");",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "Makefile",
      "content": "# Functions module Makefile\nobj-m += functions.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "concepts": [
    "function parameters",
    "return values", 
    "function calls with arguments",
    "local variables",
    "modulo operator",
    "boolean logic"
  ],
  "skills": [
    "Writing functions with parameters",
    "Understanding return values",
    "Function composition", 
    "Mathematical operations in kernel space",
    "Boolean operations and logic"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": ["functions_init", "functions_exit", "add_numbers", "print_calculation", "is_even"],
      "variables": [
        { "name": "first", "type": "int", "value": 15 },
        { "name": "second", "type": "int", "value": 25 }
      ],
      "outputMessages": [
        "Function parameters module loaded",
        "15 + 25 = 40",
        "Sum is even: 1"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/types.h"
      ],
      "mustContain": [
        "int add_numbers(int a, int b)",
        "void print_calculation(int num1, int num2, int result)",
        "bool is_even(int number)",
        "return a + b",
        "number % 2 == 0",
        "add_numbers(first, second)"
      ],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "function_declarations",
        "name": "Function Declarations in Header",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["int add_numbers(int a, int b)", "void print_calculation(int num1, int num2, int result)", "bool is_even(int number)"],
        "prohibitedSymbols": []
      },
      {
        "id": "function_implementations",
        "name": "Function Implementations",
        "type": "code_analysis", 
        "critical": true,
        "expectedSymbols": ["return a + b", "return (number % 2 == 0)"],
        "prohibitedSymbols": []
      },
      {
        "id": "function_calls",
        "name": "Proper Function Calls",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["add_numbers(first, second)", "print_calculation(first, second, sum)", "is_even(sum)"],
        "prohibitedSymbols": []
      },
      {
        "id": "modulo_operator",
        "name": "Modulo Operator Usage", 
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["number % 2"],
        "prohibitedSymbols": []
      },
      {
        "id": "return_values",
        "name": "Proper Return Value Usage",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["sum = add_numbers", "even_check = is_even"],
        "prohibitedSymbols": []
      },
      {
        "id": "exact_output",
        "name": "Exact Output Messages",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Function parameters module loaded", "exact": true },
          { "pattern": "15 + 25 = 40", "exact": true },
          { "pattern": "Sum is even: 1", "exact": true }
        ]
      }
    ]
  }
}