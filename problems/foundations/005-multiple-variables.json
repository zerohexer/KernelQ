{
  "id": 5,
  "title": "Multiple Variables - Study Complete Example", 
  "phase": "foundations",
  "difficulty": 2,
  "xp": 25,
  "description": "Study a complete working example with multiple data types. See how int, char, and bool variables work together with proper format specifiers. This example includes advanced module parameter support that will be used in later problems.",
  "mainFile": "multi_vars.c",
  "files": [
    {
      "name": "multi_vars.h",
      "content": "#ifndef MULTI_VARS_H\n#define MULTI_VARS_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/types.h>\n\n/* Function to print student information */\nvoid print_student_info(void);\n\n#endif /* MULTI_VARS_H */",
      "readOnly": false,
      "language": "h"
    },
    {
      "name": "multi_vars.c",
      "content": "#include \"multi_vars.h\"\n\n/* Complete working example\n * Study how these three different data types work together\n * Notice the different format specifiers for each type\n */\n\n/* Variable definitions with different data types */\nint student_id = 12345;      // Integer variable\nchar student_grade = 'A';    // Character variable  \nbool student_passed = true;  // Boolean variable\n\n/* Module parameters for advanced testing */\nmodule_param(student_id, int, 0644);\nMODULE_PARM_DESC(student_id, \"Student ID number\");\n/* Note: char and bool parameters need special handling */\n\n/* Complete function implementation - study the pattern */\nvoid print_student_info(void)\n{\n    printk(KERN_INFO \"=== Student Information ===\\n\");\n    printk(KERN_INFO \"Student ID: %d\\n\", student_id);        // %d for int\n    printk(KERN_INFO \"Student Grade: %c\\n\", student_grade);   // %c for char\n    printk(KERN_INFO \"Student Passed: %d\\n\", student_passed); // %d for bool (shows 0/1)\n}\n\nstatic int __init multi_vars_init(void)\n{\n    printk(KERN_INFO \"Multi-variable module loaded\\n\");\n    print_student_info();\n    return 0;\n}\n\nstatic void __exit multi_vars_exit(void)\n{\n    printk(KERN_INFO \"Multi-variable module unloaded\\n\");\n}\n\nmodule_init(multi_vars_init);\nmodule_exit(multi_vars_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Complete example: multiple variables and data types\");\nMODULE_VERSION(\"1.0\");",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "Makefile",
      "content": "# Multi-variable module Makefile\nobj-m += multi_vars.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "concepts": [
    "multiple data types",
    "integer variables",
    "character variables", 
    "boolean variables",
    "format specifiers for different types"
  ],
  "skills": [
    "Managing multiple variables",
    "Understanding data type differences",
    "Using appropriate format specifiers",
    "Code organization with multiple variables"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": ["multi_vars_init", "multi_vars_exit", "print_student_info"],
      "variables": [
        { "name": "student_id", "type": "int", "value": 12345 },
        { "name": "student_grade", "type": "char", "value": "'A'" },
        { "name": "student_passed", "type": "bool", "value": true }
      ],
      "outputMessages": [
        "Multi-variable module loaded",
        "Student ID: 12345",
        "Student Grade: A",
        "Student Passed: 1"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/types.h"
      ],
      "mustContain": [
        "int student_id = 12345",
        "char student_grade = 'A'",
        "bool student_passed = true",
        "void print_student_info(void)"
      ],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "multiple_definitions", 
        "name": "Multiple Variable Definitions",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["int student_id = 12345", "char student_grade = 'A'", "bool student_passed = true"],
        "prohibitedSymbols": []
      },
      {
        "id": "function_structure",
        "name": "Print Function Implementation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["void print_student_info(void)"],
        "prohibitedSymbols": []
      },
      {
        "id": "function_signatures_source",
        "name": "Function Signatures in Source File",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void print_student_info(void)",
          "static int __init multi_vars_init(void)",
          "static void __exit multi_vars_exit(void)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "exact_output",
        "name": "Basic Output Messages",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Multi-variable module loaded", "exact": true, "linkedFunction": "static int __init multi_vars_init(void)" },
          { "pattern": "Student Information", "exact": true, "linkedFunction": "void print_student_info(void)" },
          { "pattern": "Student ID: 12345", "exact": true, "linkedFunction": "void print_student_info(void)" },
          { "pattern": "Student Grade: A", "exact": true, "linkedFunction": "void print_student_info(void)" },
          { "pattern": "Student Passed: 1", "exact": true, "linkedFunction": "void print_student_info(void)" }
        ]
      },
      {
        "id": "demonstration_test",
        "name": "Study Example with Dynamic Testing",
        "type": "kernel_project_test",
        "critical": false,
        "testScenario": {
          "userspaceApps": [
            {
              "name": "demo_tester",
              "source": "#include <stdio.h>\\n#include <stdlib.h>\\n\\nint main() {\\n    printf(\"=== Part A Demo Test ===\\\\n\");\\n    printf(\"Demonstrating dynamic module parameters\\\\n\");\\n    \\n    printf(\"Test: Loading with student_id=99999\\\\n\");\\n    system(\"rmmod multi_vars 2>/dev/null\");\\n    system(\"insmod /lib/modules/multi_vars.ko student_id=99999\");\\n    \\n    printf(\"SUCCESS: Demo completed\\\\n\");\\n    return 0;\\n}"
            }
          ],
          "setupCommands": [
            "echo 'Demonstrating module parameter functionality'"
          ],
          "testCommands": [
            "/bin/demo_tester",
            "echo 'Check: Module parameter works'",
            "dmesg | grep 'Student ID: 99999' && echo 'DEMO: Parameter worked!' || echo 'INFO: Using default value'"
          ],
          "expected": {
            "dmesg": [
              "Multi-variable module loaded"
            ],
            "stdout": [
              "Part A Demo Test",
              "SUCCESS: Demo completed"
            ]
          },
          "timeout": 30
        }
      }
    ]
  }
}
