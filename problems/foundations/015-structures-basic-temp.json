{
  "id": 15,
  "title": "Basic Structures - Organizing Related Data",
  "phase": "foundations",
  "difficulty": 4,
  "xp": 40,
  "description": "Learn to create and use basic structures to organize related data together. This introduces simple data modeling patterns essential for kernel development where structures represent system information.",
  "mainFile": "structures.c",
  "files": [
    {
      "name": "structures.h",
      "content": "#ifndef STRUCTURES_H\n#define STRUCTURES_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/types.h>\n\n#define MAX_NAME_LEN 32\n\n/* PATTERN SCAFFOLDING: How to define and use basic structures in C */\n/* Basic pattern for organizing related data together:\n *\n * struct type_name {\n *     data_type field_name;\n *     data_type another_field;\n * };\n *\n * This groups related information together instead of separate variables\n */\n\n/* WHAT A STRUCTURE DEFINITION CONTAINS: */\n\n/* 1. struct keyword - Tells compiler this is a structure definition */\n/*    Usage: struct starts the definition */\n/*    Example: struct student means \"define a student structure type\" */\n\n/* 2. Structure name - The type name for this structure */\n/*    Usage: Used when creating variables of this type */\n/*    Example: student becomes the type name, like int or char */\n\n/* 3. Field definitions - The data members inside the structure */\n/*    Usage: Each field has a type and name */\n/*    Example: int id; means \"this structure has an integer field called id\" */\n\n/* 4. Closing brace and semicolon - Required to end the definition */\n/*    Usage: }; closes the structure definition */\n/*    Example: Always end structure definitions with }; */\n\n/* STRUCTURE VS SEPARATE VARIABLES COMPARISON: */\n/* Without structures (messy): */\n/* int student_id; */\n/* char student_name[32]; */\n/* int student_grade; */\n/* bool student_passed; */\n/* \n/* With structures (organized): */\n/* struct student { */\n/*     int id; */\n/*     char name[32]; */\n/*     int grade; */\n/*     bool passed; */\n/* }; */\n/* Same data, but grouped logically! */\n\n/* TODO: Define student structure with these fields: */\n/* - int id: Student identification number (like 12345) */\n/* - char name[MAX_NAME_LEN]: Student's full name (like \"Alice Smith\") */\n/* - int grade: Student's current grade percentage (0-100) */\n/* - bool passed: Whether student passed (true) or failed (false) */\n/* Remember: Use struct keyword, then student as type name, then { fields } */\nstruct student {\n    // Your structure definition here\n    // Format: data_type field_name;\n};\n\nextern struct student my_student;\n\n/* TODO: Declare your functions */\n/* Function to print all student information */\nvoid print_student_info(void);\n\n/* Function to check and print student pass/fail status */\nvoid check_student_status(void);\n\n#endif /* STRUCTURES_H */",
      "readOnly": false,
      "language": "h"
    },
    {
      "name": "structures.c",
      "content": "#include \"structures.h\"\n\n/* PATTERN SCAFFOLDING: How to initialize and use structures in C */\n/* Basic pattern for creating and initializing a structure variable:\n *\n * struct type_name variable_name = {\n *     .field_name = value,\n *     .another_field = another_value\n * };\n *\n * This creates a variable of the structure type with initial values\n */\n\n/* WHAT STRUCTURE INITIALIZATION CONTAINS: */\n\n/* 1. struct type_name - The structure type we defined in the header */\n/*    Usage: Tells compiler what type of structure this is */\n/*    Example: struct student means \"this is a student structure variable\" */\n\n/* 2. variable_name - The actual variable name */\n/*    Usage: This becomes the variable we can use in our code */\n/*    Example: my_student becomes the variable name */\n\n/* 3. Designated initializers - The .field = value syntax */\n/*    Usage: Sets specific fields to specific values */\n/*    Example: .id = 12345 means \"set the id field to 12345\" */\n/*    Why this way? Clear, readable, and order-independent! */\n\n/* DOT OPERATOR EXPLAINED IN DETAIL: */\n/* variable.field_name means \"access field_name inside variable\" */\n\n/* HOW DOT OPERATOR WORKS: */\n/* 1. my_student.id - Gets the id field from my_student */\n/*    Contains: The integer value stored in the id field */\n/*    Usage: Can read or write: my_student.id = 99999; */\n/*    Example: printk(\"%d\", my_student.id) prints the student's ID */\n\n/* 2. my_student.name - Gets the name array from my_student */\n/*    Contains: The character array (string) stored in name field */\n/*    Usage: Can read: printk(\"%s\", my_student.name) */\n/*    Note: String fields need special handling for assignment */\n\n/* 3. my_student.grade - Gets the grade field from my_student */\n/*    Contains: The integer percentage stored in grade field */\n/*    Usage: Can read or write: my_student.grade = 95; */\n\n/* 4. my_student.passed - Gets the boolean field from my_student */\n/*    Contains: true (1) or false (0) */\n/*    Usage: Can use in if statements: if (my_student.passed) */\n\n/* MEMORY LAYOUT VISUALIZATION: */\n/* my_student variable in memory: */\n/* ┌─────────────────────────────────────────────────────┐ */\n/* │ [id: 12345][name: \"Alice Smith\"][grade: 85][passed: true] │ */\n/* └─────────────────────────────────────────────────────┘ */\n/* my_student.id points here ↑                             */\n/* my_student.name points here      ↑                      */\n/* my_student.grade points here           ↑                */\n/* my_student.passed points here              ↑            */\n\n/* DESIGNATED INITIALIZER SYNTAX EXPLAINED: */\n/* .field_name = value means \"initialize field_name with value\" */\n/* Examples: */\n/* .id = 12345        - Set id field to integer 12345 */\n/* .name = \"Alice\"    - Set name field to string \"Alice\" */\n/* .grade = 85        - Set grade field to integer 85 */\n/* .passed = true     - Set passed field to boolean true */\n\n/* TODO: Initialize student structure using designated initializers */\n/* Use the pattern: struct student variable_name = { .field = value, ... } */\n/* Set these values: */\n/* - id: 12345 */\n/* - name: \"Alice Smith\" */\n/* - grade: 85 */\n/* - passed: true */\nstruct student my_student = {\n    // Your initialization here using .field_name = value syntax\n};\n\n/* IMPORTANT: DO NOT REMOVE OR MODIFY THE LINES BELOW!\n * These module parameter declarations are required for validation testing.\n * The testing system uses these to verify your structure member access works\n * with different input values. Removing them will cause test failures.\n */\nmodule_param_named(student_id, my_student.id, int, 0644);\nMODULE_PARM_DESC(student_id, \"Student ID for testing structure member access\");\nmodule_param_named(student_grade, my_student.grade, int, 0644);\nMODULE_PARM_DESC(student_grade, \"Student grade for testing structure member access\");\n/* Note: string and bool module params need special handling for structures */\n/* END OF REQUIRED MODULE PARAMETER SECTION */\n\n/* TODO: Implement function to print student information using dot operator */\n/* Use my_student.field_name to access each field */\n/* Print format examples: */\n/* - \"Student ID: %d\" for integer fields */\n/* - \"Student Name: %s\" for string fields */\n/* Remember: my_student.id, my_student.name, my_student.grade */\nvoid print_student_info(void) {\n    // Your implementation here\n    // Use printk(KERN_INFO, \"format\", my_student.field_name);\n}\n\n/* TODO: Implement function to check student status using conditional logic */\n/* Use if statement with my_student.passed field */\n/* Boolean fields can be used directly in if conditions */\n/* Print \"Student Status: Passed\" if true, \"Student Status: Failed\" if false */\nvoid check_student_status(void) {\n    // Your implementation here\n    // Remember: my_student.passed is boolean (true/false)\n    // Use: if (my_student.passed) { ... } else { ... }\n}\n\nstatic int __init structures_init(void)\n{\n    printk(KERN_INFO \"Basic structures module loaded\\n\");\n    \n    /* TODO: Call your functions to demonstrate structure usage */\n    /* Call print_student_info() to show all student data */\n    /* Call check_student_status() to show pass/fail status */\n    \n    return 0;\n}\n\nstatic void __exit structures_exit(void)\n{\n    printk(KERN_INFO \"Basic structures module unloaded\\n\");\n}\n\nmodule_init(structures_init);\nmodule_exit(structures_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Learning basic structures and data organization\");\nMODULE_VERSION(\"1.0\");",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "Makefile",
      "content": "# Basic structures module Makefile\nobj-m += structures.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "concepts": [
    "structure definition",
    "structure initialization", 
    "structure member access",
    "designated initializers",
    "dot notation"
  ],
  "skills": [
    "Defining custom data types",
    "Organizing related data",
    "Direct structure access",
    "Structure member usage",
    "Basic data modeling"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": ["structures_init", "structures_exit", "print_student_info", "check_student_status"],
      "function_declarations": [
        { "name": "print_student_info", "returnType": "void", "parameters": [] },
        { "name": "check_student_status", "returnType": "void", "parameters": [] }
      ],
      "variables_declarations": [
        { "name": "student", "type": "struct", "value": "{int id; char name[MAX_NAME_LEN]; int grade; bool passed;}", "storageClass": "none" },
        { "name": "my_student", "type": "struct student", "storageClass": "extern" }
      ],
      "variables": [
        { "name": "my_student", "type": "struct student", "value": "{.id = 12345, .name = \"Alice Smith\", .grade = 85, .passed = true}", "storageClass": "none" }
      ],
      "outputMessages": [
        "Basic structures module loaded",
        "Student ID: 12345",
        "Student Name: Alice Smith",
        "Student Grade: 85",
        "Student Status: Passed"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/types.h"
      ],
      "mustContain": [
        "struct student {",
        "extern struct student my_student",
        "struct student my_student = {",
        ".id = 12345",
        ".name = \"Alice Smith\"",
        ".grade = 85",
        ".passed = true",
        "module_param_named(student_id, my_student.id, int, 0644)",
        "module_param_named(student_grade, my_student.grade, int, 0644)"
      ],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "function_declarations",
        "name": "Function Declarations in Header",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void print_student_info(void)",
          "void check_student_status(void)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "function_signatures_source",
        "name": "Function Signatures in Source File",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void print_student_info(void)",
          "void check_student_status(void)",
          "static int __init structures_init(void)",
          "static void __exit structures_exit(void)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "exact_output",
        "name": "Exact Output Messages",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Basic structures module loaded", "exact": true, "linkedFunction": "static int __init structures_init(void)" },
          { "pattern": "Student ID: 12345", "exact": true, "linkedFunction": "void print_student_info(void)" },
          { "pattern": "Student Name: Alice Smith", "exact": true, "linkedFunction": "void print_student_info(void)" },
          { "pattern": "Student Grade: 85", "exact": true, "linkedFunction": "void print_student_info(void)" },
          { "pattern": "Student Status: Passed", "exact": true, "linkedFunction": "void check_student_status(void)" }
        ]
      },
      {
        "id": "advanced_structure_implementation_validation",
        "name": "Advanced Structure Implementation with TCC Header Validation",
        "type": "kernel_project_test",
        "critical": true,
        "testScenario": {
          "userspaceApps": [
            {
              "name": "structure_impl_tester",
              "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <time.h>\\n#include <string.h>\\n\\nint main() {\\n    printf(\\\"=== Dynamic Structure Implementation Test ===\\\\n\\\");\\n    \\n    // Seed random number generator\\n    srand(time(NULL));\\n    \\n    // Generate random student data\\n    int test_id1 = (rand() % 9000) + 10000;  // 10000-18999\\n    int test_grade1 = (rand() % 20) + 80;    // 80-99\\n    int test_id2 = (rand() % 9000) + 20000;  // 20000-28999\\n    int test_grade2 = (rand() % 30) + 60;    // 60-89\\n    \\n    printf(\\\"Test 1: Testing with student_id=%d, student_grade=%d\\\\n\\\", test_id1, test_grade1);\\n    char cmd1[256];\\n    snprintf(cmd1, sizeof(cmd1), \\\"insmod /lib/modules/structures.ko student_id=%d student_grade=%d\\\", test_id1, test_grade1);\\n    system(\\\"rmmod structures 2>/dev/null\\\");\\n    system(cmd1);\\n    \\n    printf(\\\"Test 2: Testing with student_id=%d, student_grade=%d\\\\n\\\", test_id2, test_grade2);\\n    char cmd2[256];\\n    snprintf(cmd2, sizeof(cmd2), \\\"insmod /lib/modules/structures.ko student_id=%d student_grade=%d\\\", test_id2, test_grade2);\\n    system(\\\"rmmod structures\\\");\\n    system(cmd2);\\n    \\n    printf(\\\"SUCCESS: Dynamic structure test completed\\\\n\\\");\\n    return 0;\\n}"
            }
          ],
          "setupCommands": [
            "echo 'Starting advanced structure implementation validation'"
          ],
          "testCommands": [
            "echo 'Phase 1: Ultra-Fast TCC Header Validation'",
            "echo 'Creating minimal kernel header stubs for TCC...'",
            "mkdir -p /tmp/linux",
            "echo '#define KERN_INFO' > /tmp/linux/kernel.h",
            "echo 'int printk(const char *fmt, ...);' >> /tmp/linux/kernel.h",
            "echo '#define MODULE_LICENSE(x)' > /tmp/linux/module.h",
            "echo '#define MODULE_AUTHOR(x)' >> /tmp/linux/module.h",
            "echo '#define MODULE_DESCRIPTION(x)' >> /tmp/linux/module.h",
            "echo '#define MODULE_VERSION(x)' >> /tmp/linux/module.h",
            "echo '#define module_init(x)' >> /tmp/linux/module.h",
            "echo '#define module_exit(x)' >> /tmp/linux/module.h",
            "echo '#define module_param_named(name, var, type, perm)' >> /tmp/linux/module.h",
            "echo '#define MODULE_PARM_DESC(var, desc)' >> /tmp/linux/module.h",
            "echo '#define __init' > /tmp/linux/init.h",
            "echo '#define __exit' >> /tmp/linux/init.h",
            "echo 'typedef int bool;' > /tmp/linux/types.h",
            "echo '#define true 1' >> /tmp/linux/types.h",
            "echo '#define false 0' >> /tmp/linux/types.h",
            "echo '#define MAX_NAME_LEN 32' >> /tmp/linux/types.h",
            "echo 'Creating test file that includes student header...'",
            "echo '#include \"/lib/modules/structures.h\"' > /tmp/test.c",
            "echo 'int main() { my_student.id = 999; print_student_info(); check_student_status(); return 0; }' >> /tmp/test.c",
            "echo 'Running TCC validation...'",
            "/usr/bin/tcc -I/tmp -Wimplicit-function-declaration -Werror -c /tmp/test.c -o /tmp/test.o 2>/tmp/tcc_error.log",
            "TCC_EXIT_CODE=$?",
            "if [ $TCC_EXIT_CODE -ne 0 ]; then echo 'FAIL: Function or variable declaration missing or commented in header'; echo 'TCC Error Details:'; cat /tmp/tcc_error.log; else echo 'PASS: All function and variable declarations found in header file'; fi",
            "echo 'Phase 2: Dynamic Structure Implementation Testing'",
            "/bin/structure_impl_tester > /tmp/test_output.log",
            "cat /tmp/test_output.log",
            "echo 'Phase 3: Dynamic Value Extraction and Validation'",
            "echo 'Adding delay to ensure dmesg messages are written...'",
            "sleep 1",
            "echo 'Extracting random test values from output...'",
            "TEST1_ID=$(grep -o 'Test 1: Testing with student_id=[0-9]*' /tmp/test_output.log | cut -d'=' -f2 | cut -d',' -f1)",
            "TEST1_GRADE=$(grep -o 'student_grade=[0-9]*' /tmp/test_output.log | head -1 | cut -d'=' -f2)",
            "TEST2_ID=$(grep -o 'Test 2: Testing with student_id=[0-9]*' /tmp/test_output.log | cut -d'=' -f2 | cut -d',' -f1)",
            "TEST2_GRADE=$(grep -o 'student_grade=[0-9]*' /tmp/test_output.log | tail -1 | cut -d'=' -f2)",
            "echo 'Test values: ID1='$TEST1_ID', Grade1='$TEST1_GRADE', ID2='$TEST2_ID', Grade2='$TEST2_GRADE",
            "echo 'Validating structure member access with dynamic values'",
            "dmesg | grep 'Student ID: '$TEST1_ID && echo 'PASS: Structure id member access working with '$TEST1_ID || echo 'FAIL: Structure id member access broken for '$TEST1_ID",
            "dmesg | grep 'Student Name: Alice Smith' && echo 'PASS: Structure name member access working' || echo 'FAIL: Structure name member access broken'",
            "dmesg | grep 'Student Grade: '$TEST1_GRADE && echo 'PASS: Structure grade member access working with '$TEST1_GRADE || echo 'FAIL: Structure grade member access broken for '$TEST1_GRADE",
            "dmesg | grep 'Student ID: '$TEST2_ID && echo 'PASS: Structure id member access working with '$TEST2_ID || echo 'FAIL: Structure id member access broken for '$TEST2_ID",
            "dmesg | grep 'Student Grade: '$TEST2_GRADE && echo 'PASS: Structure grade member access working with '$TEST2_GRADE || echo 'FAIL: Structure grade member access broken for '$TEST2_GRADE",
            "dmesg | grep 'Student Status: Passed' && echo 'PASS: Structure passed member conditional logic working' || echo 'FAIL: Structure passed member conditional logic broken'",
            "echo 'Phase 4: Structure Definition Validation'",
            "dmesg | grep 'Basic structures module loaded' && echo 'PASS: Module initialization working' || echo 'FAIL: Module initialization broken'",
            "echo 'All structure implementation validations completed'"
          ],
          "expected": {
            "dmesg": [
              "Basic structures module loaded",
              "Student ID: .*",
              "Student Name: Alice Smith",
              "Student Grade: .*",
              "Student Status: Passed"
            ],
            "stdout": [
              "PASS: All function and variable declarations found in header file",
              "SUCCESS: Dynamic structure test completed",
              "PASS: Structure id member access working with .*",
              "PASS: Structure name member access working",
              "PASS: Structure grade member access working with .*",
              "PASS: Structure passed member conditional logic working"
            ]
          },
          "timeout": 30
        }
      }
    ]
  }
}
