{
  "id": 18,
  "title": "String Manipulation and Character Arrays",
  "phase": "foundations",
  "difficulty": 4,
  "xp": 35,
  "description": "Master string handling in kernel space using character arrays and kernel string functions. Learn the difference between string literals, character arrays, and pointers to strings.",
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/string.h>\n#include <linux/slab.h>\n\nstatic int __init strings_init(void) {\n    char str1[50] = \"Hello\";\n    char str2[50] = \"World\";\n    char result[100];\n    char *dynamic_str;\n    const char *literal = \"Kernel Programming\";\n    int len1, len2, total_len;\n    int cmp_result;\n    \n    // TODO: Get string lengths using strlen\n    // len1 = strlen(str1)\n    // len2 = strlen(str2)\n    // total_len = strlen(literal)\n    \n    // TODO: String concatenation using strcat\n    // strcpy(result, str1)  // Copy \"Hello\" to result\n    // strcat(result, \" \")   // Append space\n    // strcat(result, str2)  // Append \"World\"\n    \n    // TODO: String comparison using strcmp\n    // cmp_result = strcmp(str1, str2)\n    \n    // TODO: Dynamic string allocation and copy\n    // dynamic_str = kstrdup(literal, GFP_KERNEL)\n    \n    // TODO: Character manipulation\n    // Convert first character of str1 to lowercase if uppercase\n    // if (str1[0] >= 'A' && str1[0] <= 'Z') str1[0] += 32\n    \n    // Print results:\n    // \"String Operations:\"\n    // \"str1 length: 5\"\n    // \"str2 length: 5\"\n    // \"literal length: 18\"\n    // \"Concatenated: Hello World\"\n    // \"strcmp(\\\"Hello\\\", \\\"World\\\"): -15\" (or negative value)\n    // \"Dynamic string: Kernel Programming\"\n    // \"First char converted: hello\"\n    \n    // TODO: Clean up dynamic allocation\n    if (dynamic_str)\n        kfree(dynamic_str);\n    \n    return 0;\n}\n\nstatic void __exit strings_exit(void) {\n    printk(KERN_INFO \"String manipulation module unloaded\\n\");\n}\n\nmodule_init(strings_init);\nmodule_exit(strings_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Your Name\");\nMODULE_DESCRIPTION(\"String manipulation and character arrays module\");",
  "concepts": [
    "character arrays",
    "string literals",
    "strlen function",
    "strcpy function", 
    "strcat function",
    "strcmp function",
    "dynamic strings",
    "character manipulation"
  ],
  "skills": [
    "String processing",
    "Memory-safe string operations",
    "Character array handling",
    "Dynamic string management"
  ],
  "inputOutput": {
    "expectedOutput": [
      "String Operations:",
      "str1 length: 5",
      "str2 length: 5", 
      "literal length: 18",
      "Concatenated: Hello World",
      "strcmp(\"Hello\", \"World\"): -15",
      "Dynamic string: Kernel Programming",
      "First char converted: hello"
    ],
    "requirements": [
      "Use required function names: strings_init, strings_exit",
      "Include linux/string.h for string functions",
      "Use exact string values: str1=\"Hello\", str2=\"World\", literal=\"Kernel Programming\"",
      "Use kernel string functions: strlen, strcpy, strcat, strcmp",
      "Use kstrdup for dynamic string allocation with GFP_KERNEL",
      "Perform character manipulation using array indexing",
      "Use proper memory cleanup with kfree",
      "Print results in exact format shown above"
    ]
  },
  "validation": {
    "exactRequirements": {
      "functionNames": ["strings_init", "strings_exit"],
      "variables": [
        { "name": "str1", "type": "char[]", "value": "Hello" },
        { "name": "str2", "type": "char[]", "value": "World" },
        { "name": "result", "type": "char[]", "value": "calculated" },
        { "name": "dynamic_str", "type": "char*", "value": "kstrdup_result" },
        { "name": "literal", "type": "const char*", "value": "Kernel Programming" }
      ],
      "outputMessages": [
        "String Operations:",
        "str1 length: 5",
        "str2 length: 5",
        "literal length: 18",
        "Concatenated: Hello World",
        "strcmp\\(\\\"Hello\\\", \\\"World\\\"\\): -15",
        "Dynamic string: Kernel Programming",
        "First char converted: hello"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/string.h",
        "linux/slab.h"
      ],
      "mustContain": ["strlen", "strcpy", "strcat", "strcmp", "kstrdup", "kfree", "str1[0]"],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "string_function_usage",
        "name": "All String Functions Used",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["strlen(", "strcpy(", "strcat(", "strcmp("],
        "prohibitedSymbols": ["len1 = 5", "len2 = 5", "total_len = 18"]
      },
      {
        "id": "dynamic_allocation",
        "name": "Dynamic String Allocation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["kstrdup(", "GFP_KERNEL", "kfree("],
        "prohibitedSymbols": ["malloc", "free", "strdup"]
      },
      {
        "id": "character_manipulation",
        "name": "Character Array Manipulation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["str1[0]", ">= 'A'", "<= 'Z'", "+= 32"],
        "prohibitedSymbols": []
      },
      {
        "id": "string_concatenation",
        "name": "Proper String Concatenation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["strcpy(result", "strcat(result"],
        "prohibitedSymbols": ["result = \"Hello World\""]
      },
      {
        "id": "correct_string_lengths",
        "name": "Correct String Length Calculations",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "str1 length: 5", "exact": true },
          { "pattern": "str2 length: 5", "exact": true },
          { "pattern": "literal length: 18", "exact": true }
        ]
      },
      {
        "id": "string_operations_result",
        "name": "String Operations Results",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Concatenated: Hello World", "exact": true },
          { "pattern": "Dynamic string: Kernel Programming", "exact": true },
          { "pattern": "First char converted: hello", "exact": true }
        ]
      },
      {
        "id": "strcmp_result",
        "name": "strcmp Function Result",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "strcmp\\(\\\"Hello\\\", \\\"World\\\"\\): -15", "exact": false }
        ]
      },
      {
        "id": "memory_cleanup",
        "name": "Proper Memory Cleanup",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["if (dynamic_str)", "kfree(dynamic_str)"],
        "prohibitedSymbols": []
      },
      {
        "id": "no_hardcoded_strings",
        "name": "No Hardcoded String Results",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["strlen(", "strcat(", "strcmp("],
        "prohibitedSymbols": ["\"Hello World\"", "cmp_result = -15"]
      }
    ]
  }
}