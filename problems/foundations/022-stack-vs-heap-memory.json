{
  "id": 22,
  "title": "Stack vs Heap Memory Concepts",
  "phase": "foundations",
  "difficulty": 3,
  "xp": 25,
  "description": "Learn the fundamental difference between stack and heap memory allocation in kernel programming. Understand when to use each type and their limitations. This bridges the gap between simple variables and dynamic memory allocation.",
  "concepts": ["stack_memory", "heap_memory", "memory_types", "variable_scope", "memory_limitations"],
  "skills": ["memory_management_basics", "variable_lifetime", "memory_concepts"],
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\n// CONCEPT: Stack vs Heap Memory\n// Stack Memory:\n// - Automatic allocation/deallocation\n// - Limited size (usually 8KB in kernel)\n// - Fast allocation/deallocation\n// - Local variables, function parameters\n// - Memory is automatically freed when function exits\n//\n// Heap Memory:\n// - Manual allocation/deallocation\n// - Larger size available\n// - Slower allocation/deallocation\n// - Survives function calls\n// - Must be explicitly freed\n//\n// WHY: Understanding this is crucial before learning kmalloc/kfree\n\n// TODO: Demonstrate stack memory usage\nstatic void demonstrate_stack_memory(void)\n{\n    // Stack variables - automatically managed\n    int local_var = 42;           // On stack\n    char local_array[256];        // On stack - limited size\n    \n    // Stack memory is automatically freed when function exits\n    printk(KERN_INFO \"Stack variable: %d\\n\", local_var);\n    printk(KERN_INFO \"Stack array size: %zu bytes\\n\", sizeof(local_array));\n    \n    // TODO: Show stack limitations\n    // Large arrays can cause stack overflow\n    // char huge_array[8192];  // This might cause problems!\n    \n    printk(KERN_INFO \"Stack memory: automatic, limited, fast\\n\");\n}\n\n// TODO: Demonstrate stack limitations\nstatic void demonstrate_stack_limitations(void)\n{\n    // Stack has limited size (usually 8KB in kernel)\n    // Large data structures need heap allocation\n    \n    printk(KERN_INFO \"Stack limitations:\\n\");\n    printk(KERN_INFO \"- Limited size (typically 8KB)\\n\");\n    printk(KERN_INFO \"- Automatic cleanup\\n\");\n    printk(KERN_INFO \"- Fast allocation\\n\");\n    printk(KERN_INFO \"- Local scope only\\n\");\n}\n\n// TODO: Explain when heap is needed\nstatic void explain_heap_necessity(void)\n{\n    printk(KERN_INFO \"Heap memory needed when:\\n\");\n    printk(KERN_INFO \"- Large data structures\\n\");\n    printk(KERN_INFO \"- Data must survive function calls\\n\");\n    printk(KERN_INFO \"- Dynamic size requirements\\n\");\n    printk(KERN_INFO \"- Sharing data between functions\\n\");\n    \n    // Next problem will show how to use heap memory\n    printk(KERN_INFO \"Next: Learn kmalloc for heap allocation\\n\");\n}\n\nstatic int __init memory_concepts_init(void)\n{\n    printk(KERN_INFO \"Memory concepts module loaded\\n\");\n    printk(KERN_INFO \"Understanding Stack vs Heap Memory\\n\");\n    \n    demonstrate_stack_memory();\n    demonstrate_stack_limitations();\n    explain_heap_necessity();\n    \n    return 0;\n}\n\nstatic void __exit memory_concepts_exit(void)\n{\n    printk(KERN_INFO \"Memory concepts module unloaded\\n\");\n    printk(KERN_INFO \"Remember: Stack=automatic, Heap=manual\\n\");\n}\n\nmodule_init(memory_concepts_init);\nmodule_exit(memory_concepts_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Kernel Academy Student\");\nMODULE_DESCRIPTION(\"Understanding stack vs heap memory concepts\");\nMODULE_VERSION(\"1.0\");",
  "validation": {
    "exactRequirements": {
      "functionNames": [
        "memory_concepts_init",
        "memory_concepts_exit",
        "demonstrate_stack_memory",
        "demonstrate_stack_limitations",
        "explain_heap_necessity"
      ],
      "variables": [],
      "outputMessages": [
        "Memory concepts module loaded",
        "Understanding Stack vs Heap Memory",
        "Stack variable: 42",
        "Stack memory: automatic, limited, fast",
        "Stack limitations:",
        "Heap memory needed when:",
        "Next: Learn kmalloc for heap allocation",
        "Memory concepts module unloaded"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h"
      ],
      "mustContain": [
        "local_var",
        "local_array",
        "sizeof(local_array)"
      ]
    },
    "testCases": [
      {
        "id": "stack_demonstration",
        "name": "Stack Memory Demonstration",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "int local_var = 42",
          "char local_array[256]",
          "sizeof(local_array)"
        ],
        "prohibitedSymbols": ["kmalloc", "kfree", "malloc"]
      },
      {
        "id": "concept_explanation",
        "name": "Memory Concept Explanation",
        "type": "output_match",
        "critical": true,
        "expected": [
          {"pattern": "Stack memory: automatic, limited, fast", "exact": true},
          {"pattern": "Heap memory needed when:", "exact": true}
        ]
      },
      {
        "id": "educational_comments",
        "name": "Educational Comments Present",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "// Stack Memory:",
          "// Heap Memory:",
          "// WHY: Understanding this is crucial"
        ],
        "prohibitedSymbols": []
      }
    ]
  }
}