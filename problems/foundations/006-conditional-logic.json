{
  "id": 6,
  "title": "Conditional Logic - Making Decisions",
  "phase": "foundations",
  "difficulty": 3,
  "xp": 35,
  "description": "Learn to make decisions in your code using if/else statements and comparison operators. This introduces logical thinking and decision-making patterns essential for kernel development where conditions determine code flow.",
  "mainFile": "conditions.c",
  "files": [
    {
      "name": "conditions.h",
      "content": "#ifndef CONDITIONS_H\n#define CONDITIONS_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/types.h>\n\nextern int test_number;\n\n/* TODO: Declare your function */\n/* void check_number_status(int number); */\n\n#endif /* CONDITIONS_H */",
      "readOnly": false,
      "language": "h"
    },
    {
      "name": "conditions.c",
      "content": "#include \"conditions.h\"\n\nint test_number = 42;\nmodule_param(test_number, int, 0644);\nMODULE_PARM_DESC(test_number, \"Number to test with conditional logic\");\n\n/* TODO: Implement the function to check if number is positive, negative, or zero */\n/* void check_number_status(int number) {\n *     if (number > 0) {\n *         printk(KERN_INFO \"Number %d is positive\\n\", number);\n *     } else if (number < 0) {\n *         printk(KERN_INFO \"Number %d is negative\\n\", number);\n *     } else {\n *         printk(KERN_INFO \"Number %d is zero\\n\", number);\n *     }\n * } */\n\nstatic int __init conditions_init(void)\n{\n    printk(KERN_INFO \"Conditional logic module loaded\\n\");\n    \n    /* TODO: Test with positive number */\n    /* check_number_status(test_number); */\n    \n    /* TODO: Test with negative number */\n    /* check_number_status(-15); */\n    \n    /* TODO: Test with zero */\n    /* check_number_status(0); */\n    \n    return 0;\n}\n\nstatic void __exit conditions_exit(void)\n{\n    printk(KERN_INFO \"Conditional logic module unloaded\\n\");\n}\n\nmodule_init(conditions_init);\nmodule_exit(conditions_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Learning conditional logic and decision making\");\nMODULE_VERSION(\"1.0\");",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "Makefile",
      "content": "# Conditional logic module Makefile\nobj-m += conditions.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "concepts": [
    "if statements",
    "else if statements",
    "comparison operators",
    "logical decision making",
    "conditional execution"
  ],
  "skills": [
    "Writing conditional statements",
    "Using comparison operators",
    "Logical thinking and flow control",
    "Decision-based programming",
    "Testing multiple conditions"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": ["conditions_init", "conditions_exit", "check_number_status"],
      "variables": [
        { "name": "test_number", "type": "int", "value": 42 }
      ],
      "outputMessages": [
        "Conditional logic module loaded",
        "Number 42 is positive",
        "Number -15 is negative", 
        "Number 0 is zero"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/types.h"
      ],
      "mustContain": [
        "extern int test_number",
        "int test_number = 42",
        "void check_number_status(int number)",
        "if (number > 0)",
        "else if (number < 0)",
        "else"
      ],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "function_declarations",
        "name": "Function Declarations in Header",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void check_number_status(int number)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "function_signatures_source",
        "name": "Function Signatures in Source File",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void check_number_status(int number)",
          "static int __init conditions_init(void)",
          "static void __exit conditions_exit(void)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "direct_function_test",
        "name": "Direct Function Testing",
        "type": "kernel_project_test",
        "critical": true,
        "testScenario": {
          "userspaceApps": [
            {
              "name": "conditional_tester",
              "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <fcntl.h>\\n#include <unistd.h>\\n#include <string.h>\\n\\nint main() {\\n    printf(\"=== Dynamic Function Test ===\\\\n\");\\n    \\n    // Method 1: Test by reloading module with different parameters\\n    printf(\"Test 1: Testing positive number (99)\\\\n\");\\n    system(\"rmmod conditions 2>/dev/null\");\\n    system(\"insmod /lib/modules/conditions.ko test_number=99\");\\n    \\n    printf(\"Test 2: Testing negative number (-88)\\\\n\");\\n    system(\"rmmod conditions\");\\n    system(\"insmod /lib/modules/conditions.ko test_number=-88\");\\n    \\n    printf(\"Test 3: Testing zero (0)\\\\n\");\\n    system(\"rmmod conditions\");\\n    system(\"insmod /lib/modules/conditions.ko test_number=0\");\\n    \\n    printf(\"SUCCESS: Dynamic test completed\\\\n\");\\n    printf(\"PASS: Conditional logic detected\\\\n\");\\n    printf(\"PASS: Module parameter exists\\\\n\");\\n    return 0;\\n}"
            }
          ],
          "setupCommands": [
            "echo 'Starting direct function testing'"
          ],
          "testCommands": [
            "/bin/conditional_tester",
            "echo 'Checking kernel output for all test values'",
            "dmesg | grep 'Number 99' && echo 'PASS: 99 test worked' || echo 'FAIL: 99 test failed'",
            "dmesg | grep 'Number -88' && echo 'PASS: -88 test worked' || echo 'FAIL: -88 test failed'",
            "dmesg | grep 'Number 0' && echo 'PASS: 0 test worked' || echo 'FAIL: 0 test worked'"
          ],
          "expected": {
            "dmesg": [
              "Conditional logic module loaded",
              "Number 99 is positive",
              "Number -88 is negative",
              "Number 0 is zero"
            ],
            "stdout": [
              "Dynamic Function Test",
              "SUCCESS: Dynamic test completed",
              "PASS: Conditional logic detected",
              "PASS: Module parameter exists"
            ]
          },
          "timeout": 45
        }
      }
    ]
  }
}