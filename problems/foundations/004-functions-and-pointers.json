{
  "id": 4,
  "title": "Functions and Pointers Basics",
  "phase": "foundations",
  "difficulty": 4,
  "xp": 30,
  "description": "Learn to work with functions and basic pointers in kernel space. Create functions that take parameters, return values, and manipulate data through pointers. This introduces fundamental C programming concepts essential for kernel development.",
  "mainFile": "functions.c",
  "files": [
    {
      "name": "functions.h",
      "content": "#ifndef FUNCTIONS_H\n#define FUNCTIONS_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\n/* TODO: Declare function prototypes:\n * int add_numbers(int a, int b);\n * void swap_values(int *x, int *y);\n * void print_result(const char *operation, int result);\n */\n\n#endif /* FUNCTIONS_H */",
      "readOnly": false,
      "language": "h"
    },
    {
      "name": "functions.c",
      "content": "#include \"functions.h\"\n\n/* TODO: Implement add_numbers function:\n * int add_numbers(int a, int b)\n * {\n *     return a + b;\n * }\n */\n\n/* TODO: Implement swap_values function:\n * void swap_values(int *x, int *y)\n * {\n *     int temp = *x;\n *     *x = *y;\n *     *y = temp;\n * }\n */\n\n/* TODO: Implement print_result function:\n * void print_result(const char *operation, int result)\n * {\n *     printk(KERN_INFO \"%s result: %d\\n\", operation, result);\n * }\n */\n\nstatic int __init functions_init(void)\n{\n    int num1 = 15;\n    int num2 = 25;\n    int sum;\n    \n    printk(KERN_INFO \"Functions module loaded\\n\");\n    \n    /* TODO: Call add_numbers and print result */\n    /* sum = add_numbers(num1, num2); */\n    /* print_result(\"Addition\", sum); */\n    \n    /* TODO: Print values before swap */\n    /* printk(KERN_INFO \"Before swap: num1=%d, num2=%d\\n\", num1, num2); */\n    \n    /* TODO: Call swap_values function */\n    /* swap_values(&num1, &num2); */\n    \n    /* TODO: Print values after swap */\n    /* printk(KERN_INFO \"After swap: num1=%d, num2=%d\\n\", num1, num2); */\n    \n    return 0;\n}\n\nstatic void __exit functions_exit(void)\n{\n    printk(KERN_INFO \"Functions module unloaded\\n\");\n}\n\nmodule_init(functions_init);\nmodule_exit(functions_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Functions and pointers demonstration module\");\nMODULE_VERSION(\"1.0\");",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "Makefile",
      "content": "# Functions module Makefile\nobj-m += functions.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "concepts": [
    "function declarations",
    "function definitions",
    "parameters and return values",
    "pointers",
    "pointer dereferencing",
    "address-of operator",
    "function calls"
  ],
  "skills": [
    "Function implementation",
    "Pointer manipulation",
    "Parameter passing",
    "Return value handling",
    "Memory address understanding"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": ["functions_init", "functions_exit", "add_numbers", "swap_values", "print_result"],
      "outputMessages": [
        "Functions module loaded",
        "Addition result: 40",
        "Before swap: num1=15, num2=25",
        "After swap: num1=25, num2=15"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h"
      ],
      "mustContain": ["int *x", "int *y", "&num1", "&num2", "return a + b"],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "function_prototypes",
        "name": "Function Prototypes in Header",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["int add_numbers", "void swap_values", "void print_result"],
        "prohibitedSymbols": []
      },
      {
        "id": "pointer_usage",
        "name": "Pointer Usage",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["int *x", "int *y", "*x", "*y", "&num1", "&num2"],
        "prohibitedSymbols": []
      },
      {
        "id": "function_implementations",
        "name": "Function Implementations",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["return a + b", "int temp = *x", "*x = *y", "*y = temp"],
        "prohibitedSymbols": ["int add_numbers.*{.*functions\\.h", "void swap_values.*{.*functions\\.h", "void print_result.*{.*functions\\.h"]
      },
      {
        "id": "exact_output",
        "name": "Exact Output Format",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Functions module loaded", "exact": true },
          { "pattern": "Addition result: 40", "exact": true },
          { "pattern": "Before swap: num1=15, num2=25", "exact": true },
          { "pattern": "After swap: num1=25, num2=15", "exact": true }
        ]
      },
      {
        "id": "header_inclusion",
        "name": "Header File Inclusion",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["#include \"functions.h\""],
        "prohibitedSymbols": []
      }
    ]
  }
}