{
  "id": 25,
  "title": "Kernel Memory Management - Part 1: kmalloc and kfree",
  "phase": "foundations",
  "difficulty": 5,
  "xp": 45,
  "description": "Learn kernel memory allocation using kmalloc and kfree. Understand the difference between kernel and userspace memory management. This is the first part of kernel memory series.",
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/slab.h>\n\n// TODO: Allocate memory for an array of 5 integers using kmalloc\n// TODO: Initialize the array with values [10, 20, 30, 40, 50]\n// TODO: Print each value\n// TODO: Free the memory using kfree\n\nstatic int __init kmalloc_init(void) {\n    // TODO: Declare a pointer to int called 'arr'\n    // TODO: Allocate memory: arr = kmalloc(5 * sizeof(int), GFP_KERNEL)\n    // TODO: Check if allocation succeeded (arr != NULL)\n    // TODO: Initialize and print values\n    // TODO: Free memory before returning\n    \n    return 0;\n}\n\nstatic void __exit kmalloc_exit(void) {\n    printk(KERN_INFO \"Kernel memory module unloaded\\n\");\n}\n\nmodule_init(kmalloc_init);\nmodule_exit(kmalloc_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Your Name\");\nMODULE_DESCRIPTION(\"Kernel memory management demonstration module\");",
  "concepts": [
    "kmalloc",
    "kfree", 
    "GFP_KERNEL",
    "kernel memory allocation",
    "memory leak prevention"
  ],
  "skills": [
    "Kernel memory management",
    "Dynamic allocation",
    "Memory safety",
    "Resource cleanup"
  ],
  "multiPart": {
    "part": 1,
    "totalParts": 3,
    "nextProblemId": 13,
    "previousProblemId": null
  },
  "inputOutput": {
    "expectedOutput": [
      "Memory allocated successfully",
      "arr[0] = 10",
      "arr[1] = 20", 
      "arr[2] = 30",
      "arr[3] = 40",
      "arr[4] = 50",
      "Memory freed successfully"
    ],
    "requirements": [
      "Use required function names: kmalloc_init, kmalloc_exit",
      "Include linux/slab.h for memory allocation functions",
      "Declare pointer 'arr' of type int*",
      "Use kmalloc(5 * sizeof(int), GFP_KERNEL) for allocation",
      "Check for allocation failure (NULL pointer)",
      "Initialize array with exact values [10, 20, 30, 40, 50]",
      "Print each element in format 'arr[i] = value'",
      "Use kfree(arr) to free memory",
      "Print allocation and free success messages"
    ]
  },
  "validation": {
    "exactRequirements": {
      "functionNames": ["kmalloc_init", "kmalloc_exit"],
      "variables": [
        { "name": "arr", "type": "int*", "value": "kmalloc_result" }
      ],
      "outputMessages": [
        "Memory allocated successfully",
        "arr\\[0\\] = 10",
        "arr\\[1\\] = 20",
        "arr\\[2\\] = 30", 
        "arr\\[3\\] = 40",
        "arr\\[4\\] = 50",
        "Memory freed successfully"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/slab.h"
      ],
      "mustContain": ["kmalloc", "kfree", "GFP_KERNEL", "sizeof(int)", "arr != NULL"],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "memory_allocation",
        "name": "Proper Memory Allocation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["kmalloc", "5 * sizeof(int)", "GFP_KERNEL"],
        "prohibitedSymbols": ["malloc"]
      },
      {
        "id": "null_check",
        "name": "NULL Pointer Check",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["arr != NULL", "if"],
        "prohibitedSymbols": []
      },
      {
        "id": "memory_free",
        "name": "Proper Memory Cleanup",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["kfree", "arr"],
        "prohibitedSymbols": ["free"]
      },
      {
        "id": "correct_output",
        "name": "Correct Array Values",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Memory allocated successfully", "exact": true },
          { "pattern": "arr\\[0\\] = 10", "exact": false },
          { "pattern": "arr\\[1\\] = 20", "exact": false },
          { "pattern": "arr\\[2\\] = 30", "exact": false },
          { "pattern": "arr\\[3\\] = 40", "exact": false },
          { "pattern": "arr\\[4\\] = 50", "exact": false },
          { "pattern": "Memory freed successfully", "exact": true }
        ]
      }
    ]
  }
}