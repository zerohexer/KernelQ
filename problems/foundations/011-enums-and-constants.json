{
  "id": 11,
  "title": "Enums, Constants, and Symbolic Values",
  "phase": "foundations",
  "difficulty": 3,
  "xp": 30,
  "description": "Learn to use enums for named constants and symbolic values. Understand const keyword, #define macros, and proper constant management in kernel programming.",
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\n// TODO: Define preprocessor constants\n#define MAX_DEVICES 10\n#define DEVICE_NAME_LEN 32\n#define VERSION_MAJOR 2\n#define VERSION_MINOR 1\n\n// TODO: Define enum for device states\nenum device_state {\n    DEVICE_OFFLINE,\n    DEVICE_INITIALIZING,\n    DEVICE_READY, \n    DEVICE_BUSY,\n    DEVICE_ERROR\n};\n\n// TODO: Define enum for operation types\nenum operation_type {\n    OP_READ = 1,\n    OP_WRITE = 2,\n    OP_IOCTL = 4,\n    OP_MMAP = 8\n};\n\nstatic int __init enums_init(void) {\n    const int buffer_size = 1024;\n    const char *driver_name = \"test_driver\";\n    enum device_state current_state = DEVICE_READY;\n    enum operation_type allowed_ops = OP_READ | OP_WRITE;\n    int device_count = 5;\n    \n    // TODO: Print constant values\n    // \"Constants:\"\n    // \"MAX_DEVICES: 10\"\n    // \"DEVICE_NAME_LEN: 32\" \n    // \"Version: 2.1\"\n    // \"Buffer size: 1024\"\n    // \"Driver name: test_driver\"\n    \n    // TODO: Print enum values and their integer representations\n    // \"Device States:\"\n    // \"DEVICE_OFFLINE = 0\"\n    // \"DEVICE_READY = 2\" \n    // \"Current state: DEVICE_READY (2)\"\n    \n    // TODO: Use enums in conditional logic\n    // if (current_state == DEVICE_READY) print \"Device is ready\"\n    // if (device_count < MAX_DEVICES) print \"Can add more devices\"\n    // if (allowed_ops & OP_READ) print \"Read operation allowed\"\n    \n    return 0;\n}\n\nstatic void __exit enums_exit(void) {\n    printk(KERN_INFO \"Enums and constants module unloaded\\n\");\n}\n\nmodule_init(enums_init);\nmodule_exit(enums_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Your Name\");\nMODULE_DESCRIPTION(\"Enums and constants demonstration module\");",
  "concepts": [
    "enums",
    "#define macros",
    "const keyword",
    "symbolic constants",
    "enum values",
    "bitfield operations"
  ],
  "skills": [
    "Constant management",
    "Symbolic programming", 
    "Type-safe constants",
    "Code maintainability"
  ],
  "inputOutput": {
    "expectedOutput": [
      "Constants:",
      "MAX_DEVICES: 10",
      "DEVICE_NAME_LEN: 32",
      "Version: 2.1",
      "Buffer size: 1024",
      "Driver name: test_driver",
      "Device States:",
      "DEVICE_OFFLINE = 0", 
      "DEVICE_READY = 2",
      "Current state: DEVICE_READY (2)",
      "Device is ready",
      "Can add more devices",
      "Read operation allowed"
    ],
    "requirements": [
      "Use required function names: enums_init, enums_exit",
      "Define preprocessor constants: MAX_DEVICES=10, DEVICE_NAME_LEN=32, VERSION_MAJOR=2, VERSION_MINOR=1",
      "Define enum device_state with exact values: DEVICE_OFFLINE, DEVICE_INITIALIZING, DEVICE_READY, DEVICE_BUSY, DEVICE_ERROR",
      "Define enum operation_type with exact values: OP_READ=1, OP_WRITE=2, OP_IOCTL=4, OP_MMAP=8",
      "Use const variables: buffer_size=1024, driver_name=\"test_driver\"",
      "Use enums in variables: current_state=DEVICE_READY, allowed_ops=OP_READ|OP_WRITE",
      "Print exact format shown above with enum values and their integer representations"
    ]
  },
  "validation": {
    "exactRequirements": {
      "functionNames": ["enums_init", "enums_exit"],
      "variables": [
        { "name": "buffer_size", "type": "const int", "value": 1024 },
        { "name": "driver_name", "type": "const char*", "value": "test_driver" },
        { "name": "current_state", "type": "enum device_state", "value": "DEVICE_READY" },
        { "name": "allowed_ops", "type": "enum operation_type", "value": "OP_READ | OP_WRITE" },
        { "name": "device_count", "type": "int", "value": 5 }
      ],
      "outputMessages": [
        "Constants:",
        "MAX_DEVICES: 10",
        "DEVICE_NAME_LEN: 32",
        "Version: 2\\.1",
        "Buffer size: 1024",
        "Driver name: test_driver",
        "Device States:",
        "DEVICE_OFFLINE = 0",
        "DEVICE_READY = 2",
        "Current state: DEVICE_READY \\(2\\)",
        "Device is ready",
        "Can add more devices",
        "Read operation allowed"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h"
      ],
      "mustContain": ["#define MAX_DEVICES", "enum device_state", "enum operation_type", "const int", "const char"],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "preprocessor_defines",
        "name": "Preprocessor Constant Definitions",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["#define MAX_DEVICES 10", "#define DEVICE_NAME_LEN 32", "#define VERSION_MAJOR 2"],
        "prohibitedSymbols": []
      },
      {
        "id": "enum_definitions",
        "name": "Proper Enum Definitions",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["enum device_state", "enum operation_type", "DEVICE_OFFLINE", "DEVICE_READY", "OP_READ = 1"],
        "prohibitedSymbols": []
      },
      {
        "id": "const_variables",
        "name": "Const Variable Usage",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["const int buffer_size", "const char *driver_name"],
        "prohibitedSymbols": []
      },
      {
        "id": "enum_assignments",
        "name": "Enum Variable Assignments",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["= DEVICE_READY", "= OP_READ | OP_WRITE"],
        "prohibitedSymbols": ["= 2", "= 3"]
      },
      {
        "id": "enum_comparisons",
        "name": "Enum Comparisons and Logic",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["== DEVICE_READY", "< MAX_DEVICES", "& OP_READ"],
        "prohibitedSymbols": ["== 2", "< 10"]
      },
      {
        "id": "correct_enum_values",
        "name": "Correct Enum Integer Values",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "DEVICE_OFFLINE = 0", "exact": true },
          { "pattern": "DEVICE_READY = 2", "exact": true },
          { "pattern": "Current state: DEVICE_READY \\(2\\)", "exact": false }
        ]
      },
      {
        "id": "constant_usage",
        "name": "Proper Constant Usage",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "MAX_DEVICES: 10", "exact": true },
          { "pattern": "Version: 2\\.1", "exact": false },
          { "pattern": "Buffer size: 1024", "exact": true }
        ]
      },
      {
        "id": "bitwise_enum_ops",
        "name": "Bitwise Operations with Enums",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["OP_READ | OP_WRITE", "allowed_ops & OP_READ"],
        "prohibitedSymbols": []
      }
    ]
  }
}