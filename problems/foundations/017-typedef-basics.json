{
  "id": 17,
  "title": "Typedef - Cleaner Type Definitions",
  "phase": "foundations",
  "difficulty": 3,
  "xp": 35,
  "description": "Learn to create cleaner, more readable code using typedef. Instead of writing 'struct device_info my_device', you can simply write 'Device my_device'. This introduces type aliasing - a fundamental concept for writing professional, maintainable kernel code.",
  "mainFile": "typedef_basics.c",
  "files": [
    {
      "name": "typedef_basics.h",
      "content": "#ifndef TYPEDEF_BASICS_H\n#define TYPEDEF_BASICS_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/types.h>\n\n#define MAX_NAME_LEN 32\n\n/* TODO: Define Device typedef */\n/* typedef struct {\n *     int device_id;\n *     char name[MAX_NAME_LEN];\n *     int status_code;\n *     bool is_active;\n * } Device; */\n\nextern Device my_device;\n\n/* TODO: Declare your functions using the typedef */\n/* void print_device_details(void); */\n/* void update_device_status(int new_status); */\n/* void check_device_state(void); */\n\n#endif /* TYPEDEF_BASICS_H */",
      "readOnly": false,
      "language": "h"
    },
    {
      "name": "typedef_basics.c",
      "content": "#include \"typedef_basics.h\"\n\n/* TODO: Initialize device using clean typedef syntax */\n/* Device my_device = {\n *     .device_id = 12345,\n *     .name = \"sensor01\",\n *     .status_code = 200,\n *     .is_active = true\n * }; */\n\n/* IMPORTANT: DO NOT REMOVE OR MODIFY THE LINES BELOW!\n * These module parameter declarations are required for validation testing.\n * The testing system uses these to verify your typedef operations work\n * with different input values. Removing them will cause test failures.\n */\nmodule_param_named(device_id, my_device.device_id, int, 0644);\nMODULE_PARM_DESC(device_id, \"Device ID for testing typedef member access\");\nmodule_param_named(status_code, my_device.status_code, int, 0644);\nMODULE_PARM_DESC(status_code, \"Device status code for testing typedef operations\");\n/* Note: string and bool module params need special handling for typedefs */\n/* END OF REQUIRED MODULE PARAMETER SECTION */\n\n/* TODO: Implement function to print device details */\n/* void print_device_details(void) {\n *     printk(KERN_INFO \"Device ID: %d\\n\", my_device.device_id);\n *     printk(KERN_INFO \"Device Name: %s\\n\", my_device.name);\n *     printk(KERN_INFO \"Status Code: %d\\n\", my_device.status_code);\n * } */\n\n/* TODO: Implement function to update device status */\n/* void update_device_status(int new_status) {\n *     my_device.status_code = new_status;\n *     my_device.is_active = (new_status == 200) ? true : false;\n *     printk(KERN_INFO \"Status updated to: %d\\n\", new_status);\n * } */\n\n/* TODO: Implement function to check device state */\n/* void check_device_state(void) {\n *     if (my_device.is_active) {\n *         printk(KERN_INFO \"Device State: ACTIVE\\n\");\n *     } else {\n *         printk(KERN_INFO \"Device State: INACTIVE\\n\");\n *     }\n * } */\n\nstatic int __init typedef_basics_init(void)\n{\n    printk(KERN_INFO \"Typedef basics module loaded\\n\");\n    \n    /* TODO: Print initial device details */\n    /* printk(KERN_INFO \"Initial Device Information:\\n\"); */\n    /* print_device_details(); */\n    /* check_device_state(); */\n    \n    /* TODO: Update status and show changes */\n    /* update_device_status(404); */\n    /* printk(KERN_INFO \"After status update:\\n\"); */\n    /* print_device_details(); */\n    /* check_device_state(); */\n    \n    return 0;\n}\n\nstatic void __exit typedef_basics_exit(void)\n{\n    printk(KERN_INFO \"Typedef basics module unloaded\\n\");\n}\n\nmodule_init(typedef_basics_init);\nmodule_exit(typedef_basics_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Learning typedef for cleaner code structure\");\nMODULE_VERSION(\"1.0\");",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "Makefile",
      "content": "# Typedef basics module Makefile\nobj-m += typedef_basics.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "concepts": [
    "typedef keyword",
    "type aliasing", 
    "struct typedef pattern",
    "cleaner syntax",
    "code readability",
    "professional coding style"
  ],
  "skills": [
    "Creating type aliases with typedef",
    "Using typedef for struct definitions",
    "Writing cleaner, more readable code",
    "Understanding type abstraction",
    "Professional kernel coding practices"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": ["typedef_basics_init", "typedef_basics_exit", "print_device_details", "update_device_status", "check_device_state"],
      "function_declarations": [
        { "name": "print_device_details", "returnType": "void", "parameters": [] },
        { "name": "update_device_status", "returnType": "void", "parameters": ["int new_status"] },
        { "name": "check_device_state", "returnType": "void", "parameters": [] }
      ],
      "variables_declarations": [
        { "name": "Device", "type": "typedef struct", "value": "{int device_id; char name[MAX_NAME_LEN]; int status_code; bool is_active;}", "storageClass": "none" },
        { "name": "my_device", "type": "Device", "storageClass": "extern" }
      ],
      "variables": [
        { "name": "my_device", "type": "Device", "value": "{.device_id = 12345, .name = \"sensor01\", .status_code = 200, .is_active = true}", "storageClass": "none" }
      ],
      "outputMessages": [
        "Typedef basics module loaded",
        "Initial Device Information:",
        "Device ID: 12345",
        "Device Name: sensor01",
        "Status Code: 200",
        "Device State: ACTIVE",
        "Status updated to: 404",
        "After status update:",
        "Device ID: 12345",
        "Device Name: sensor01",
        "Status Code: 404",
        "Device State: INACTIVE"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/types.h"
      ],
      "mustContain": [
        "typedef struct {",
        "} Device;",
        "extern Device my_device",
        "Device my_device = {",
        "module_param_named(device_id, my_device.device_id, int, 0644)",
        "module_param_named(status_code, my_device.status_code, int, 0644)"
      ],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "function_declarations",
        "name": "Function Declarations in Header",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void print_device_details(void)",
          "void update_device_status(int new_status)",
          "void check_device_state(void)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "function_signatures_source",
        "name": "Function Signatures in Source File",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void print_device_details(void)",
          "void update_device_status(int new_status)",
          "void check_device_state(void)",
          "static int __init typedef_basics_init(void)",
          "static void __exit typedef_basics_exit(void)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "exact_output",
        "name": "Exact Output Messages",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Typedef basics module loaded", "exact": true, "linkedFunction": "static int __init typedef_basics_init(void)" },
          { "pattern": "Initial Device Information:", "exact": true, "linkedFunction": "static int __init typedef_basics_init(void)" },
          { "pattern": "Device ID: 12345", "exact": true, "linkedFunction": "void print_device_details(void)" },
          { "pattern": "Device Name: sensor01", "exact": true, "linkedFunction": "void print_device_details(void)" },
          { "pattern": "Status Code: 200", "exact": true, "linkedFunction": "void print_device_details(void)" },
          { "pattern": "Device State: ACTIVE", "exact": true, "linkedFunction": "void check_device_state(void)" },
          { "pattern": "Status updated to: 404", "exact": true, "linkedFunction": "void update_device_status(int new_status)" },
          { "pattern": "After status update:", "exact": true, "linkedFunction": "static int __init typedef_basics_init(void)" },
          { "pattern": "Device ID: 12345", "exact": true, "linkedFunction": "void print_device_details(void)" },
          { "pattern": "Device Name: sensor01", "exact": true, "linkedFunction": "void print_device_details(void)" },
          { "pattern": "Status Code: 404", "exact": true, "linkedFunction": "void print_device_details(void)" },
          { "pattern": "Device State: INACTIVE", "exact": true, "linkedFunction": "void check_device_state(void)" }
        ]
      },
      {
        "id": "advanced_typedef_implementation_validation",
        "name": "Advanced Typedef Implementation with TCC Header Validation",
        "type": "kernel_project_test",
        "critical": true,
        "testScenario": {
          "userspaceApps": [
            {
              "name": "typedef_dynamic_tester",
              "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <time.h>\\n#include <string.h>\\n\\nint main() {\\n    printf(\\\"=== Dynamic Typedef Implementation Test ===\\\\n\\\");\\n    \\n    // Seed random number generator\\n    srand(time(NULL));\\n    \\n    // Generate random device data\\n    int test_id1 = (rand() % 9000) + 10000;     // 10000-18999\\n    int test_status1 = (rand() % 2) ? 200 : 404; // 200 or 404\\n    int test_id2 = (rand() % 9000) + 20000;     // 20000-28999\\n    int test_status2 = (rand() % 2) ? 200 : 500; // 200 or 500\\n    \\n    printf(\\\"Test 1: Testing with device_id=%d, status_code=%d\\\\n\\\", test_id1, test_status1);\\n    char cmd1[256];\\n    snprintf(cmd1, sizeof(cmd1), \\\"insmod /lib/modules/typedef_basics.ko device_id=%d status_code=%d\\\", test_id1, test_status1);\\n    system(\\\"rmmod typedef_basics 2>/dev/null\\\");\\n    system(cmd1);\\n    \\n    printf(\\\"Test 2: Testing with device_id=%d, status_code=%d\\\\n\\\", test_id2, test_status2);\\n    char cmd2[256];\\n    snprintf(cmd2, sizeof(cmd2), \\\"insmod /lib/modules/typedef_basics.ko device_id=%d status_code=%d\\\", test_id2, test_status2);\\n    system(\\\"rmmod typedef_basics\\\");\\n    system(cmd2);\\n    \\n    printf(\\\"SUCCESS: Dynamic typedef test completed\\\\n\\\");\\n    return 0;\\n}"
            }
          ],
          "setupCommands": [
            "echo 'Starting advanced typedef implementation validation'"
          ],
          "testCommands": [
            "echo 'Phase 1: Ultra-Fast TCC Header Validation'",
            "echo 'Creating minimal kernel header stubs for TCC...'",
            "mkdir -p /tmp/linux",
            "echo '#define KERN_INFO' > /tmp/linux/kernel.h",
            "echo 'int printk(const char *fmt, ...);' >> /tmp/linux/kernel.h",
            "echo '#define MODULE_LICENSE(x)' > /tmp/linux/module.h",
            "echo '#define MODULE_AUTHOR(x)' >> /tmp/linux/module.h",
            "echo '#define MODULE_DESCRIPTION(x)' >> /tmp/linux/module.h",
            "echo '#define MODULE_VERSION(x)' >> /tmp/linux/module.h",
            "echo '#define module_init(x)' >> /tmp/linux/module.h",
            "echo '#define module_exit(x)' >> /tmp/linux/module.h",
            "echo '#define module_param_named(name, var, type, perm)' >> /tmp/linux/module.h",
            "echo '#define MODULE_PARM_DESC(var, desc)' >> /tmp/linux/module.h",
            "echo '#define __init' > /tmp/linux/init.h",
            "echo '#define __exit' >> /tmp/linux/init.h",
            "echo 'typedef int bool;' > /tmp/linux/types.h",
            "echo '#define true 1' >> /tmp/linux/types.h",
            "echo '#define false 0' >> /tmp/linux/types.h",
            "echo '#define MAX_NAME_LEN 32' >> /tmp/linux/types.h",
            "echo 'Creating test file that includes typedef header...'",
            "echo '#include \"/lib/modules/typedef_basics.h\"' > /tmp/test.c",
            "echo 'int main() { my_device.device_id = 999; print_device_details(); update_device_status(500); check_device_state(); return 0; }' >> /tmp/test.c",
            "echo 'Running TCC validation...'",
            "/usr/bin/tcc -I/tmp -Wimplicit-function-declaration -Werror -c /tmp/test.c -o /tmp/test.o 2>/tmp/tcc_error.log",
            "TCC_EXIT_CODE=$?",
            "if [ $TCC_EXIT_CODE -ne 0 ]; then echo 'FAIL: Function or typedef declaration missing or commented in header'; echo 'TCC Error Details:'; cat /tmp/tcc_error.log; else echo 'PASS: All function and typedef declarations found in header file'; fi",
            "echo 'Phase 2: Dynamic Typedef Implementation Testing'",
            "/bin/typedef_dynamic_tester > /tmp/test_output.log",
            "cat /tmp/test_output.log",
            "echo 'Phase 3: Dynamic Value Extraction and Validation'",
            "echo 'Adding delay to ensure dmesg messages are written...'",
            "sleep 1",
            "echo 'Extracting random test values from output...'",
            "TEST1_ID=$(grep -o 'Test 1: Testing with device_id=[0-9]*' /tmp/test_output.log | cut -d'=' -f2 | cut -d',' -f1)",
            "TEST1_STATUS=$(grep -o 'status_code=[0-9]*' /tmp/test_output.log | head -1 | cut -d'=' -f2)",
            "TEST2_ID=$(grep -o 'Test 2: Testing with device_id=[0-9]*' /tmp/test_output.log | cut -d'=' -f2 | cut -d',' -f1)",
            "TEST2_STATUS=$(grep -o 'status_code=[0-9]*' /tmp/test_output.log | tail -1 | cut -d'=' -f2)",
            "echo 'Test values: ID1='$TEST1_ID', Status1='$TEST1_STATUS', ID2='$TEST2_ID', Status2='$TEST2_STATUS",
            "echo 'Validating typedef-based structure member access with dynamic values'",
            "dmesg | grep 'Device ID: '$TEST1_ID && echo 'PASS: Typedef structure member access working with '$TEST1_ID || echo 'FAIL: Typedef structure member access broken for '$TEST1_ID",
            "dmesg | grep 'Device Name: sensor01' && echo 'PASS: Typedef string member access working' || echo 'FAIL: Typedef string member access broken'",
            "dmesg | grep 'Status Code: '$TEST1_STATUS && echo 'PASS: Typedef status member access working with '$TEST1_STATUS || echo 'FAIL: Typedef status member access broken for '$TEST1_STATUS",
            "dmesg | grep 'Device ID: '$TEST2_ID && echo 'PASS: Typedef structure member access working with '$TEST2_ID || echo 'FAIL: Typedef structure member access broken for '$TEST2_ID",
            "dmesg | grep 'Status Code: '$TEST2_STATUS && echo 'PASS: Typedef status member access working with '$TEST2_STATUS || echo 'FAIL: Typedef status member access broken for '$TEST2_STATUS",
            "echo 'Phase 3.1: Function Logic Validation'",
            "dmesg | grep 'Status updated to: 404' && echo 'PASS: update_device_status function message works' || echo 'FAIL: update_device_status message broken'",
            "dmesg | grep 'Status Code: 404' && echo 'PASS: update_device_status actually modified typedef structure member' || echo 'FAIL: update_device_status function logic broken - structure not modified'",
            "dmesg | grep 'Device State: INACTIVE' && echo 'PASS: check_device_state function using typedef member correctly' || echo 'FAIL: check_device_state not using typedef structure member'",
            "echo 'Phase 3.2: Final State Validation'",
            "dmesg | grep 'After status update:' && echo 'PASS: Final print_device_details called' || echo 'FAIL: Final print_device_details not called'",
            "dmesg | grep 'Status Code: 404' && echo 'PASS: Final state shows correct typedef member modification' || echo 'FAIL: Final state typedef member modification broken'",
            "dmesg | grep 'Device State: INACTIVE' && echo 'PASS: Final state shows correct conditional logic' || echo 'FAIL: Final state conditional logic broken'",
            "echo 'Phase 4: Typedef Definition Validation'",
            "dmesg | grep 'Typedef basics module loaded' && echo 'PASS: Module initialization working' || echo 'FAIL: Module initialization broken'",
            "echo 'All typedef implementation validations completed'"
          ],
          "expected": {
            "dmesg": [
              "Typedef basics module loaded",
              "Device ID: .*",
              "Device Name: sensor01",
              "Status Code: .*",
              "Device State: ACTIVE",
              "Status updated to: 404"
            ],
            "stdout": [
              "PASS: All function and typedef declarations found in header file",
              "SUCCESS: Dynamic typedef test completed",
              "PASS: Typedef structure member access working with .*",
              "PASS: Typedef string member access working",
              "PASS: Typedef status member access working with .*",
              "PASS: update_device_status function message works",
              "PASS: update_device_status actually modified typedef structure member",
              "PASS: check_device_state function using typedef member correctly",
              "PASS: Final print_device_details called",
              "PASS: Final state shows correct typedef member modification",
              "PASS: Final state shows correct conditional logic"
            ]
          },
          "timeout": 15
        }
      }
    ]
  }
}