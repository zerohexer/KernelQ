{
  "id": 4,
  "title": "Use Your Variable",
  "phase": "foundations", 
  "difficulty": 2,
  "xp": 20,
  "description": "Learn to use variables by printing them with proper format specifiers. Build on your knowledge of header/C file structure while introducing printk formatting - a crucial skill for kernel debugging.",
  "mainFile": "use_vars.c",
  "files": [
    {
      "name": "use_vars.h",
      "content": "#ifndef USE_VARS_H\n#define USE_VARS_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n\nextern int my_number;\n\n#endif /* USE_VARS_H */",
      "readOnly": false,
      "language": "h"
    },
    {
      "name": "use_vars.c",
      "content": "#include \"use_vars.h\"\n\nint my_number = 42;\n\n/* IMPORTANT: DO NOT REMOVE OR MODIFY THE LINES BELOW!\n * These module parameter declarations are required for validation testing.\n * The testing system uses these to verify your variable usage works\n * with different input values. Removing them will cause test failures.\n */\nmodule_param(my_number, int, 0644);\nMODULE_PARM_DESC(my_number, \"Number to print for testing variable usage\");\n/* END OF REQUIRED MODULE PARAMETER SECTION */\n\nstatic int __init use_vars_init(void)\n{\n    printk(KERN_INFO \"Variable usage module loaded\\n\");\n    /* TODO: Print the variable using printk */\n    /* printk(KERN_INFO \"My number is: %d\\n\", my_number); */\n    return 0;\n}\n\nstatic void __exit use_vars_exit(void)\n{\n    printk(KERN_INFO \"Variable usage module unloaded\\n\");\n}\n\nmodule_init(use_vars_init);\nmodule_exit(use_vars_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Learning to use variables with printk formatting\");\nMODULE_VERSION(\"1.0\");",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "Makefile",
      "content": "# Variable usage module Makefile\nobj-m += use_vars.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "concepts": [
    "variable usage",
    "printk formatting",
    "format specifiers",
    "integer printing",
    "debugging output"
  ],
  "skills": [
    "Using variables in printk",
    "printk with format specifiers", 
    "Variable access in kernel modules",
    "Debugging output"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": ["use_vars_init", "use_vars_exit"],
      "variables_declarations": [
        { "name": "my_number", "type": "int", "storageClass": "extern" }
      ],
      "variables": [
        { "name": "my_number", "type": "int", "value": 42, "storageClass": "none" }
      ],
      "outputMessages": [
        "Variable usage module loaded",
        "My number is: 42"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h"
      ],
      "mustContain": [
        "printk(KERN_INFO \"My number is: %d\\n\", my_number)"
      ],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "function_signatures_source",
        "name": "Function Signatures in Source File",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "static int __init use_vars_init(void)",
          "static void __exit use_vars_exit(void)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "variable_usage_test",
        "name": "Variable Usage and Formatting Test",
        "type": "kernel_project_test",
        "critical": true,
        "testScenario": {
          "userspaceApps": [
            {
              "name": "variable_usage_dynamic_tester",
              "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <time.h>\\n\\nint main() {\\n    printf(\\\"=== Variable Usage Dynamic Validation Test ===\\\\n\\\");\\n    \\n    // Seed random number generator\\n    srand(time(NULL));\\n    \\n    // Generate random test values\\n    int test_val1 = (rand() % 50) + 10;  // 10-59\\n    int test_val2 = (rand() % 50) + 60;  // 60-109\\n    int test_val3 = (rand() % 20) + 1;   // 1-20\\n    \\n    printf(\\\"Test 1: Testing with my_number=%d\\\\n\\\", test_val1);\\n    char cmd1[256];\\n    snprintf(cmd1, sizeof(cmd1), \\\"insmod /lib/modules/use_vars.ko my_number=%d\\\", test_val1);\\n    system(\\\"rmmod use_vars 2>/dev/null\\\");\\n    system(cmd1);\\n    \\n    printf(\\\"Test 2: Testing with my_number=%d\\\\n\\\", test_val2);\\n    char cmd2[256];\\n    snprintf(cmd2, sizeof(cmd2), \\\"insmod /lib/modules/use_vars.ko my_number=%d\\\", test_val2);\\n    system(\\\"rmmod use_vars\\\");\\n    system(cmd2);\\n    \\n    printf(\\\"Test 3: Testing with my_number=%d\\\\n\\\", test_val3);\\n    char cmd3[256];\\n    snprintf(cmd3, sizeof(cmd3), \\\"insmod /lib/modules/use_vars.ko my_number=%d\\\", test_val3);\\n    system(\\\"rmmod use_vars\\\");\\n    system(cmd3);\\n    \\n    printf(\\\"SUCCESS: Variable usage dynamic test completed\\\\n\\\");\\n    return 0;\\n}"
            }
          ],
          "testCommands": [
            "echo 'Phase 1: Ultra-Fast TCC Header Validation'",
            "echo 'Creating minimal kernel header stubs for TCC...'",
            "mkdir -p /tmp/linux",
            "echo '#define KERN_INFO' > /tmp/linux/kernel.h",
            "echo '#define MODULE_LICENSE(x)' > /tmp/linux/module.h",
            "echo '#define MODULE_AUTHOR(x)' >> /tmp/linux/module.h",
            "echo '#define MODULE_DESCRIPTION(x)' >> /tmp/linux/module.h",
            "echo '#define module_init(x)' >> /tmp/linux/module.h",
            "echo '#define module_exit(x)' >> /tmp/linux/module.h",
            "echo '#define module_param(name, type, perm)' >> /tmp/linux/module.h",
            "echo '#define MODULE_PARM_DESC(var, desc)' >> /tmp/linux/module.h",
            "echo '#define __init' > /tmp/linux/init.h",
            "echo '#define __exit' >> /tmp/linux/init.h",
            "echo 'typedef int bool;' > /tmp/linux/types.h",
            "echo 'Creating test file that validates extern variable declaration...'",
            "echo '#include \"/lib/modules/use_vars.h\"' > /tmp/test.c",
            "echo 'int main() { my_number = 99; return my_number; }' >> /tmp/test.c",
            "echo 'Running TCC validation...'",
            "/usr/bin/tcc -I/tmp -Wimplicit-function-declaration -Werror -c /tmp/test.c -o /tmp/test.o 2>/tmp/tcc_error.log",
            "TCC_EXIT_CODE=$?",
            "if [ $TCC_EXIT_CODE -ne 0 ]; then echo 'FAIL: extern int my_number not properly declared in header'; echo 'TCC Error Details:'; cat /tmp/tcc_error.log; exit 1; fi",
            "echo 'PASS: extern int my_number found in header file'",
            "echo 'Phase 2: Dynamic Variable Usage Testing'",
            "/bin/variable_usage_dynamic_tester > /tmp/test_output.log",
            "cat /tmp/test_output.log",
            "echo 'Adding delay to ensure dmesg messages are written...'",
            "sleep 1",
            "echo 'Phase 2.1: Dynamic test value extraction...'",
            "TEST_VAL1=$(grep -o 'Test 1: Testing with my_number=[0-9]*' /tmp/test_output.log | cut -d'=' -f2)",
            "TEST_VAL2=$(grep -o 'Test 2: Testing with my_number=[0-9]*' /tmp/test_output.log | cut -d'=' -f2)",
            "TEST_VAL3=$(grep -o 'Test 3: Testing with my_number=[0-9]*' /tmp/test_output.log | cut -d'=' -f2)",
            "echo 'Test values: '$TEST_VAL1', '$TEST_VAL2', '$TEST_VAL3",
            "echo 'Phase 2.2: Basic module functionality check...'",
            "dmesg | grep 'Variable usage module loaded' && echo 'PASS: use_vars_init function working' || echo 'FAIL: use_vars_init function missing'",
            "echo 'Phase 3: Dynamic variable usage validation...'",
            "dmesg | grep \"My number is: $TEST_VAL1\" && echo \"PASS: Variable correctly prints value $TEST_VAL1\" || echo \"FAIL: Variable not used or wrong value (expected $TEST_VAL1)\"",
            "dmesg | grep \"My number is: $TEST_VAL2\" && echo \"PASS: Variable correctly prints value $TEST_VAL2\" || echo \"FAIL: Variable not used or wrong value (expected $TEST_VAL2)\"",
            "dmesg | grep \"My number is: $TEST_VAL3\" && echo \"PASS: Variable correctly prints value $TEST_VAL3\" || echo \"FAIL: Variable not used or wrong value (expected $TEST_VAL3)\"",
            "echo 'Phase 4: Default value validation (must be 42)...'",
            "rmmod use_vars 2>/dev/null",
            "insmod /lib/modules/use_vars.ko",
            "sleep 1",
            "dmesg | grep 'My number is: 42' && echo 'PASS: Default value 42 correctly displayed' || echo 'FAIL: Default value not 42 or not printed'",
            "echo 'Phase 5: Module unload check...'",
            "dmesg | grep 'Variable usage module unloaded' && echo 'PASS: use_vars_exit function working' || echo 'FAIL: use_vars_exit function missing'",
            "echo 'PASS: All variable usage dynamic validation tests completed'"
          ],
          "expected": {
            "dmesg": [
              "Variable usage module loaded",
              "My number is: .*",
              "Variable usage module unloaded"
            ],
            "stdout": [
              "PASS: extern int my_number found in header file",
              "Variable Usage Dynamic Validation Test",
              "SUCCESS: Variable usage dynamic test completed",
              "PASS: Default value 42 correctly displayed",
              "PASS: All variable usage dynamic validation tests completed"
            ]
          },
          "timeout": 10
        }
      },
      {
        "id": "exact_output",
        "name": "Exact Output Messages",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Variable usage module loaded", "exact": true, "linkedFunction": "static int __init use_vars_init(void)" },
          { "pattern": "My number is: 42", "exact": true, "linkedFunction": "static int __init use_vars_init(void)" }
        ]
      }
    ]
  }
}
