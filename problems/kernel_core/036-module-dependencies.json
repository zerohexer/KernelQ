{
  "id": 36,
  "title": "Module Dependencies and Symbols",
  "difficulty": 8,
  "xp": 80,
  "phase": "kernel_core",
  "description": "Create a kernel module that depends on other modules and exports symbols for use by other modules. This teaches symbol export/import, module dependencies, and inter-module communication patterns used in large kernel subsystems at enterprise companies.",
  "concepts": ["EXPORT_SYMBOL", "EXPORT_SYMBOL_GPL", "module_dependencies", "symbol_lookup", "inter_module_communication"],
  "skills": ["symbol_management", "module_architecture", "dependency_resolution", "kernel_apis"],
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/slab.h>\n#include <linux/string.h>\n\n// TODO: Define a structure for our exported data\nstruct demo_device {\n    char name[32];\n    int id;\n    bool active;\n    unsigned long created_jiffies;\n};\n\n// TODO: Static variables for this module\nstatic struct demo_device *global_device = NULL;\nstatic int device_counter = 0;\nstatic DEFINE_MUTEX(device_mutex);\n\n// TODO: Implement function to create a new device\n// This will be exported for other modules to use\nstruct demo_device *create_demo_device(const char *name)\n{\n    struct demo_device *dev;\n    \n    // TODO: Validate input\n    // TODO: Allocate memory for device\n    // TODO: Initialize device fields\n    // TODO: Use mutex for thread safety\n    // TODO: Increment device counter\n    // TODO: Log device creation\n    \n    return NULL;\n}\n\n// TODO: Implement function to destroy a device\nvoid destroy_demo_device(struct demo_device *dev)\n{\n    // TODO: Validate input\n    // TODO: Use mutex for thread safety\n    // TODO: Log device destruction\n    // TODO: Free device memory\n    // TODO: Decrement device counter\n}\n\n// TODO: Implement function to get device info\nint get_device_info(struct demo_device *dev, char *buffer, size_t size)\n{\n    // TODO: Validate inputs\n    // TODO: Format device information into buffer\n    // TODO: Return number of bytes written\n    return 0;\n}\n\n// TODO: Implement function to get global statistics\nint get_global_stats(void)\n{\n    // TODO: Return current device counter\n    return device_counter;\n}\n\n// TODO: Export symbols for other modules\n// Use EXPORT_SYMBOL_GPL for GPL-only access\n// Use EXPORT_SYMBOL for general access\n\nstatic int __init dependency_module_init(void)\n{\n    int ret = 0;\n    \n    // TODO: Initialize global device\n    global_device = create_demo_device(\"global_device\");\n    if (!global_device) {\n        printk(KERN_ERR \"Failed to create global device\\n\");\n        return -ENOMEM;\n    }\n    \n    printk(KERN_INFO \"Module dependencies demo loaded\\n\");\n    printk(KERN_INFO \"Exported symbols: create_demo_device, destroy_demo_device\\n\");\n    printk(KERN_INFO \"Device counter: %d\\n\", device_counter);\n    \n    return ret;\n}\n\nstatic void __exit dependency_module_exit(void)\n{\n    // TODO: Clean up global device\n    if (global_device) {\n        destroy_demo_device(global_device);\n        global_device = NULL;\n    }\n    \n    printk(KERN_INFO \"Module dependencies demo unloaded\\n\");\n    printk(KERN_INFO \"Final device counter: %d\\n\", device_counter);\n}\n\nmodule_init(dependency_module_init);\nmodule_exit(dependency_module_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Kernel Academy Student\");\nMODULE_DESCRIPTION(\"Module dependencies and symbol export demonstration\");\nMODULE_VERSION(\"1.0\");",
  "validation": {
    "exactRequirements": {
      "functionNames": [
        "dependency_module_init", 
        "dependency_module_exit",
        "create_demo_device",
        "destroy_demo_device", 
        "get_device_info",
        "get_global_stats"
      ],
      "variables": [
        {"name": "global_device", "type": "struct demo_device*"},
        {"name": "device_counter", "type": "int"},
        {"name": "device_mutex", "type": "struct mutex"}
      ],
      "outputMessages": [
        "Module dependencies demo loaded",
        "Exported symbols: create_demo_device, destroy_demo_device", 
        "Device counter: 1",
        "Module dependencies demo unloaded",
        "Final device counter: 0"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h", 
        "linux/init.h",
        "linux/slab.h"
      ],
      "mustContain": [
        "EXPORT_SYMBOL",
        "EXPORT_SYMBOL_GPL",
        "DEFINE_MUTEX",
        "mutex_lock",
        "mutex_unlock",
        "kmalloc",
        "kfree"
      ]
    },
    "testCases": [
      {
        "id": "structure_definition",
        "name": "Structure Definition",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "struct demo_device",
          "char name[32]",
          "int id",
          "bool active",
          "unsigned long created_jiffies"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "symbol_exports",
        "name": "Symbol Exports",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "EXPORT_SYMBOL_GPL(create_demo_device)",
          "EXPORT_SYMBOL_GPL(destroy_demo_device)",
          "EXPORT_SYMBOL(get_device_info)",
          "EXPORT_SYMBOL(get_global_stats)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "mutex_usage",
        "name": "Mutex Usage for Thread Safety",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "DEFINE_MUTEX(device_mutex)",
          "mutex_lock(&device_mutex)",
          "mutex_unlock(&device_mutex)"
        ],
        "prohibitedSymbols": ["spin_lock", "raw_spin_lock"]
      },
      {
        "id": "memory_management",
        "name": "Memory Management",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "kmalloc(sizeof(struct demo_device)",
          "kfree(dev)",
          "GFP_KERNEL"
        ],
        "prohibitedSymbols": ["malloc", "free"]
      },
      {
        "id": "input_validation",
        "name": "Input Validation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "if (!name)",
          "if (!dev)",
          "if (!buffer)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "device_initialization",
        "name": "Device Initialization",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "strncpy(dev->name",
          "dev->id = ++device_counter",
          "dev->active = true",
          "dev->created_jiffies = jiffies"
        ],
        "prohibitedSymbols": ["strcpy"]
      },
      {
        "id": "exported_symbols_message",
        "name": "Exported Symbols Message",
        "type": "output_match",
        "critical": true,
        "expected": [
          {"pattern": "Exported symbols: create_demo_device, destroy_demo_device", "exact": true}
        ]
      }
    ]
  }
}