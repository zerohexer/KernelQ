{
  "id": 80,
  "title": "Simple Driver - File Creation Challenge",
  "phase": "drivers",
  "difficulty": 5,
  "xp": 60,
  "description": "Create a simple kernel driver by implementing missing files. You are given a partial driver structure and need to create the missing source and header files to complete the driver implementation.",
  "mainFile": "driver_main.c",
  "files": [
    {
      "name": "driver_main.c",
      "content": "#include \"driver_main.h\"\n#include \"device_ops.h\"\n\n/* Main driver structure */\nstruct simple_driver_data *driver_data = NULL;\n\nstatic int __init simple_driver_init(void)\n{\n    int result;\n    \n    pr_info(\"simple_driver: initializing\\n\");\n    \n    /* TODO: Allocate driver data structure */\n    driver_data = kzalloc(sizeof(struct simple_driver_data), GFP_KERNEL);\n    if (!driver_data) {\n        pr_err(\"simple_driver: failed to allocate driver data\\n\");\n        return -ENOMEM;\n    }\n    \n    /* TODO: Initialize the device */\n    result = device_init(driver_data);\n    if (result < 0) {\n        pr_err(\"simple_driver: device initialization failed\\n\");\n        kfree(driver_data);\n        return result;\n    }\n    \n    pr_info(\"simple_driver: loaded successfully\\n\");\n    return 0;\n}\n\nstatic void __exit simple_driver_exit(void)\n{\n    pr_info(\"simple_driver: unloading\\n\");\n    \n    if (driver_data) {\n        /* TODO: Clean up the device */\n        device_cleanup(driver_data);\n        kfree(driver_data);\n    }\n    \n    pr_info(\"simple_driver: unloaded\\n\");\n}\n\nmodule_init(simple_driver_init);\nmodule_exit(simple_driver_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Simple Driver Creation Challenge\");\nMODULE_VERSION(\"1.0\");",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "driver_main.h",
      "content": "#ifndef DRIVER_MAIN_H\n#define DRIVER_MAIN_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/fs.h>\n#include <linux/cdev.h>\n#include <linux/device.h>\n#include <linux/slab.h>\n#include <linux/uaccess.h>\n\n#define DRIVER_NAME \"simple_driver\"\n#define DEVICE_NAME \"simpledev\"\n#define CLASS_NAME \"simple_class\"\n\n/* Driver data structure */\nstruct simple_driver_data {\n    dev_t device_number;\n    struct cdev cdev;\n    struct class *device_class;\n    struct device *device_struct;\n    char *buffer;\n    size_t buffer_size;\n};\n\n/* Global driver data */\nextern struct simple_driver_data *driver_data;\n\n#endif /* DRIVER_MAIN_H */",
      "readOnly": false,
      "language": "h"
    },
    {
      "name": "Makefile",
      "content": "# Simple driver Makefile\nobj-m += simple_driver.o\n\n# Object files that make up this module\nsimple_driver-objs := driver_main.o device_ops.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "requiredFiles": [
    {
      "name": "device_ops.h",
      "description": "Header file containing device operation declarations",
      "hints": [
        "Should include function declarations for device_init() and device_cleanup()",
        "Should include any necessary includes for device operations",
        "Should define any constants needed for device operations"
      ]
    },
    {
      "name": "device_ops.c",
      "description": "Implementation file containing device operations",
      "hints": [
        "Should implement device_init() function that sets up character device",
        "Should implement device_cleanup() function that cleans up resources",
        "Should include file operations structure with basic read/write functions"
      ]
    }
  ],
  "displayRequirements": {
    "summary": "Create missing device operation files to complete the driver",
    "setup": [
      "Create device_ops.h with function declarations",
      "Create device_ops.c with complete implementation",
      "Ensure all required kernel APIs are used"
    ],
    "qemuArgs": [],
    "userspaceApps": [
      "Basic device testing will be performed automatically"
    ]
  },
  "concepts": [
    "file creation",
    "multi-file architecture",
    "character devices",
    "device operations",
    "kernel module structure"
  ],
  "skills": [
    "Creating header files",
    "Implementing device operations",
    "Character device management",
    "Resource management",
    "Multi-file project organization"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": [
        "device_init",
        "device_cleanup",
        "simple_driver_init",
        "simple_driver_exit"
      ],
      "variables": [
        { "name": "device_init", "type": "function", "value": "int device_init(struct simple_driver_data *data)" },
        { "name": "device_cleanup", "type": "function", "value": "void device_cleanup(struct simple_driver_data *data)" }
      ],
      "outputMessages": [
        "simple_driver: loaded successfully",
        "simple_driver: unloaded"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/fs.h",
        "linux/cdev.h"
      ],
      "mustContain": [
        "alloc_chrdev_region",
        "cdev_init",
        "cdev_add",
        "class_create",
        "device_create"
      ],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "driver_functionality",
        "name": "Driver Functionality Test",
        "type": "kernel_project_test",
        "critical": true,
        "testScenario": {
          "userspaceApps": [
            {
              "name": "device_tester",
              "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <fcntl.h>\\n#include <unistd.h>\\n#include <string.h>\\n\\n#define DEVICE_PATH \"/dev/simpledev\"\\n\\nint main() {\\n    int fd;\\n    char buffer[256];\\n    ssize_t bytes;\\n    \\n    printf(\"=== Simple Driver Test ===\\\\n\");\\n    \\n    fd = open(DEVICE_PATH, O_RDWR);\\n    if (fd < 0) {\\n        printf(\"INFO: Device not found (this is expected in basic test)\\\\n\");\\n        return 0;\\n    }\\n    \\n    printf(\"SUCCESS: Device opened\\\\n\");\\n    \\n    bytes = write(fd, \"test\", 4);\\n    if (bytes > 0) {\\n        printf(\"SUCCESS: Written %zd bytes\\\\n\", bytes);\\n    }\\n    \\n    close(fd);\\n    printf(\"SUCCESS: Driver test completed\\\\n\");\\n    return 0;\\n}"
            }
          ],
          "setupCommands": [
            "echo 'Setting up simple driver test'",
            "mkdir -p /dev"
          ],
          "testCommands": [
            "echo 'Creating device node...'",
            "major=$(grep simpledev /proc/devices | cut -d' ' -f1)",
            "if [ -z \"$major\" ]; then echo 'ERROR: simpledev not found'; exit 1; fi",
            "mknod /dev/simpledev c $major 0",
            "chmod 666 /dev/simpledev",
            "echo 'Running driver test'",
            "/bin/device_tester",
            "echo 'Checking driver registration'",
            "grep simple_driver /proc/modules 2>/dev/null || echo 'Driver loaded successfully'"
          ],
          "expected": {
            "dmesg": [
              "simple_driver.*loaded successfully",
              "simple_driver.*unloaded"
            ],
            "stdout": [
              "Simple Driver Test",
              "SUCCESS: Driver test completed"
            ]
          },
          "timeout": 30
        }
      }
    ]
  }
}