{
  "id": 33,
  "title": "Module Parameters and Configuration",
  "difficulty": 4,
  "xp": 40,
  "phase": "kernel_core",
  "description": "Implement a kernel module that accepts runtime parameters to configure its behavior. This teaches parameter validation, default values, and runtime configuration - essential skills for production kernel modules used at companies like NVIDIA and Intel.",
  "concepts": ["module_param", "MODULE_PARM_DESC", "parameter_validation", "runtime_configuration"],
  "skills": ["parameter_handling", "input_validation", "configuration_management", "production_practices"],
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/moduleparam.h>\n\n// TODO: Declare module parameters:\n// - debug_level (int, default 1, range 0-3)\n// - device_name (string, default \"mydevice\")\n// - enable_feature (bool, default true)\n// - buffer_size (int, default 1024, must be power of 2)\n\n// TODO: Add parameter descriptions\n// TODO: Add parameter validation in init function\n\nstatic int __init param_module_init(void)\n{\n    // TODO: Validate parameters\n    // TODO: Print current configuration\n    // TODO: Return appropriate error codes for invalid params\n    \n    printk(KERN_INFO \"Module loaded with parameters:\\n\");\n    // TODO: Print all parameter values\n    \n    return 0;\n}\n\nstatic void __exit param_module_exit(void)\n{\n    printk(KERN_INFO \"Module with parameters unloaded\\n\");\n}\n\nmodule_init(param_module_init);\nmodule_exit(param_module_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Kernel Academy Student\");\nMODULE_DESCRIPTION(\"Module parameter demonstration\");\nMODULE_VERSION(\"1.0\");",
  "validation": {
    "exactRequirements": {
      "functionNames": ["param_module_init", "param_module_exit"],
      "variables": [
        {"name": "debug_level", "type": "int", "value": 1},
        {"name": "device_name", "type": "char*", "value": "mydevice"},
        {"name": "enable_feature", "type": "bool", "value": true},
        {"name": "buffer_size", "type": "int", "value": 1024}
      ],
      "outputMessages": [
        "Module loaded with parameters:",
        "Debug level: 1",
        "Device name: mydevice",
        "Feature enabled: 1",
        "Buffer size: 1024",
        "Module with parameters unloaded"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/moduleparam.h"
      ],
      "mustContain": [
        "module_param",
        "MODULE_PARM_DESC",
        "S_IRUGO"
      ]
    },
    "testCases": [
      {
        "id": "parameter_declarations",
        "name": "Parameter Declarations",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "static int debug_level",
          "static char *device_name", 
          "static bool enable_feature",
          "static int buffer_size"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "parameter_registration",
        "name": "Parameter Registration",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "module_param(debug_level",
          "module_param(device_name",
          "module_param(enable_feature",
          "module_param(buffer_size"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "parameter_descriptions",
        "name": "Parameter Descriptions",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "MODULE_PARM_DESC(debug_level",
          "MODULE_PARM_DESC(device_name",
          "MODULE_PARM_DESC(enable_feature",
          "MODULE_PARM_DESC(buffer_size"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "parameter_validation",
        "name": "Parameter Validation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "if (debug_level",
          "if (buffer_size"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "parameter_output",
        "name": "Parameter Value Output",
        "type": "output_match",
        "critical": true,
        "expected": [
          {"pattern": "Debug level: 1", "exact": true},
          {"pattern": "Device name: mydevice", "exact": true},
          {"pattern": "Feature enabled: 1", "exact": true},
          {"pattern": "Buffer size: 1024", "exact": true}
        ]
      },
      {
        "id": "power_of_two_validation",
        "name": "Buffer Size Power-of-2 Validation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": ["is_power_of_2", "&", "buffer_size - 1"],
        "prohibitedSymbols": []
      }
    ]
  }
}