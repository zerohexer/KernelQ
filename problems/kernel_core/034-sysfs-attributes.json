{
  "id": 34,
  "title": "Sysfs Attributes and Kobjects",
  "difficulty": 7,
  "xp": 70,
  "phase": "kernel_core",
  "description": "Create a kernel module that exposes configuration and status information through sysfs attributes. This teaches the sysfs interface used extensively in production systems for device configuration, monitoring, and debugging at enterprise kernel development companies.",
  "concepts": ["sysfs", "kobject", "device_attributes", "show_store_functions", "kernel_userspace_interface"],
  "skills": ["sysfs_interface", "attribute_management", "kernel_objects", "userspace_communication"],
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/kobject.h>\n#include <linux/sysfs.h>\n#include <linux/string.h>\n#include <linux/slab.h>\n\n#define MAX_BUFFER_SIZE 64\n\nstatic struct kobject *sysfs_kobj;\nstatic char device_name[MAX_BUFFER_SIZE] = \"default_device\";\nstatic int debug_level = 1;\nstatic bool device_enabled = true;\nstatic unsigned long operation_count = 0;\n\n// TODO: Implement show function for device_name attribute\nstatic ssize_t device_name_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)\n{\n    // TODO: Return current device name\n    return 0;\n}\n\n// TODO: Implement store function for device_name attribute\nstatic ssize_t device_name_store(struct kobject *kobj, struct kobj_attribute *attr,\n                                const char *buf, size_t count)\n{\n    // TODO: Validate input length\n    // TODO: Copy new device name (strip newline)\n    // TODO: Increment operation count\n    // TODO: Log the change\n    return count;\n}\n\n// TODO: Implement show function for debug_level attribute\nstatic ssize_t debug_level_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)\n{\n    // TODO: Return current debug level\n    return 0;\n}\n\n// TODO: Implement store function for debug_level attribute\nstatic ssize_t debug_level_store(struct kobject *kobj, struct kobj_attribute *attr,\n                                const char *buf, size_t count)\n{\n    // TODO: Parse integer from buffer\n    // TODO: Validate range (0-3)\n    // TODO: Update debug_level\n    // TODO: Increment operation count\n    return count;\n}\n\n// TODO: Implement show function for device_enabled attribute\nstatic ssize_t device_enabled_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)\n{\n    // TODO: Return device enabled status (0 or 1)\n    return 0;\n}\n\n// TODO: Implement store function for device_enabled attribute\nstatic ssize_t device_enabled_store(struct kobject *kobj, struct kobj_attribute *attr,\n                                   const char *buf, size_t count)\n{\n    // TODO: Parse boolean from buffer\n    // TODO: Update device_enabled\n    // TODO: Log state change\n    // TODO: Increment operation count\n    return count;\n}\n\n// TODO: Implement read-only show function for operation_count\nstatic ssize_t operation_count_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)\n{\n    // TODO: Return current operation count\n    return 0;\n}\n\n// TODO: Define kobj_attribute structures\nstatic struct kobj_attribute device_name_attr = __ATTR(device_name, 0664, device_name_show, device_name_store);\nstatic struct kobj_attribute debug_level_attr = __ATTR(debug_level, 0664, debug_level_show, debug_level_store);\nstatic struct kobj_attribute device_enabled_attr = __ATTR(device_enabled, 0664, device_enabled_show, device_enabled_store);\nstatic struct kobj_attribute operation_count_attr = __ATTR_RO(operation_count);\n\n// TODO: Create attribute group\nstatic struct attribute *attrs[] = {\n    // TODO: Add all attributes\n    NULL,\n};\n\nstatic struct attribute_group attr_group = {\n    .attrs = attrs,\n};\n\nstatic int __init sysfs_module_init(void)\n{\n    int ret;\n    \n    // TODO: Create kobject under /sys/kernel/\n    // TODO: Create sysfs group\n    // TODO: Handle creation failures\n    \n    printk(KERN_INFO \"Sysfs module loaded successfully\\n\");\n    printk(KERN_INFO \"Sysfs interface created at /sys/kernel/demo_device\\n\");\n    return 0;\n}\n\nstatic void __exit sysfs_module_exit(void)\n{\n    // TODO: Remove sysfs group\n    // TODO: Put kobject\n    \n    printk(KERN_INFO \"Sysfs module unloaded\\n\");\n}\n\nmodule_init(sysfs_module_init);\nmodule_exit(sysfs_module_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Kernel Academy Student\");\nMODULE_DESCRIPTION(\"Sysfs attributes demonstration\");\nMODULE_VERSION(\"1.0\");",
  "validation": {
    "exactRequirements": {
      "functionNames": [
        "sysfs_module_init", 
        "sysfs_module_exit",
        "device_name_show",
        "device_name_store",
        "debug_level_show", 
        "debug_level_store",
        "device_enabled_show",
        "device_enabled_store",
        "operation_count_show"
      ],
      "variables": [
        {"name": "sysfs_kobj", "type": "struct kobject*"},
        {"name": "device_name", "type": "char[]"},
        {"name": "debug_level", "type": "int"},
        {"name": "device_enabled", "type": "bool"},
        {"name": "operation_count", "type": "unsigned long"}
      ],
      "outputMessages": [
        "Sysfs module loaded successfully",
        "Sysfs interface created at /sys/kernel/demo_device",
        "Sysfs module unloaded"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/kobject.h",
        "linux/sysfs.h"
      ],
      "mustContain": [
        "kobject_create_and_add",
        "sysfs_create_group",
        "sysfs_remove_group",
        "kobject_put",
        "__ATTR",
        "__ATTR_RO"
      ]
    },
    "testCases": [
      {
        "id": "kobject_creation",
        "name": "Kobject Creation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "kobject_create_and_add",
          "kernel_kobj"
        ],
        "prohibitedSymbols": ["kobject_init"]
      },
      {
        "id": "attribute_definitions",
        "name": "Attribute Definitions",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "__ATTR(device_name",
          "__ATTR(debug_level",
          "__ATTR(device_enabled",
          "__ATTR_RO(operation_count"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "sysfs_group_management",
        "name": "Sysfs Group Management",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "sysfs_create_group",
          "sysfs_remove_group",
          "attr_group"
        ],
        "prohibitedSymbols": ["sysfs_create_file"]
      },
      {
        "id": "show_store_functions",
        "name": "Show/Store Function Implementation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "sprintf(buf",
          "sscanf(buf",
          "operation_count++",
          "strncpy"
        ],
        "prohibitedSymbols": ["strcpy"]
      },
      {
        "id": "input_validation",
        "name": "Input Validation",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "if (count >",
          "if (val <",
          "if (val >"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "resource_cleanup",
        "name": "Resource Cleanup",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "kobject_put(sysfs_kobj)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "sysfs_creation_message",
        "name": "Sysfs Creation Message",
        "type": "output_match",
        "critical": true,
        "expected": [
          {"pattern": "Sysfs interface created at /sys/kernel/demo_device", "exact": true}
        ]
      }
    ]
  }
}