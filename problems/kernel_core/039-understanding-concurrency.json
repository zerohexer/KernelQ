{
  "id": 39,
  "title": "Understanding Concurrency in Kernel",
  "phase": "kernel_core",
  "difficulty": 5,
  "xp": 45,
  "description": "Learn what concurrency means in kernel programming and why synchronization is critical. Understand multiple execution contexts, race conditions, and the problems that arise when multiple threads access shared data simultaneously.",
  "concepts": ["concurrency", "race_conditions", "shared_data", "execution_contexts", "synchronization_need"],
  "skills": ["concurrency_concepts", "race_condition_identification", "synchronization_awareness"],
  "starter": "#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/kthread.h>\n#include <linux/delay.h>\n\n// CONCEPT: Concurrency and Race Conditions\n// Concurrency = Multiple things happening at the same time\n// Race Condition = Unpredictable results when multiple threads access shared data\n// \n// In kernel:\n// - Multiple processes can call your module simultaneously\n// - Interrupt handlers can run while your code is executing\n// - SMP systems have multiple CPUs running code in parallel\n//\n// WHY: Without proper synchronization, data corruption and crashes occur\n\n// Shared data that multiple threads will access\nstatic int shared_counter = 0;\nstatic int final_expected_value = 0;\n\n// TODO: Demonstrate race condition (unsafe)\nstatic int unsafe_thread_function(void *data)\n{\n    int thread_id = (long)data;\n    int i;\n    \n    printk(KERN_INFO \"Thread %d started\\n\", thread_id);\n    \n    // Each thread increments counter 1000 times\n    for (i = 0; i < 1000; i++) {\n        // DANGEROUS: No synchronization!\n        // Multiple threads can read/modify shared_counter simultaneously\n        shared_counter++;\n        \n        // Small delay to increase chance of race condition\n        if (i % 100 == 0) {\n            msleep(1);\n        }\n    }\n    \n    printk(KERN_INFO \"Thread %d finished\\n\", thread_id);\n    return 0;\n}\n\n// TODO: Demonstrate what happens without synchronization\nstatic void demonstrate_race_condition(void)\n{\n    struct task_struct *thread1, *thread2;\n    \n    printk(KERN_INFO \"=== Demonstrating Race Condition ===\");\n    printk(KERN_INFO \"Starting 2 threads, each incrementing counter 1000 times\\n\");\n    printk(KERN_INFO \"Expected final value: 2000\\n\");\n    \n    shared_counter = 0;\n    final_expected_value = 2000;\n    \n    // Create two threads that will compete for shared_counter\n    thread1 = kthread_run(unsafe_thread_function, (void *)1, \"unsafe_thread1\");\n    thread2 = kthread_run(unsafe_thread_function, (void *)2, \"unsafe_thread2\");\n    \n    if (IS_ERR(thread1) || IS_ERR(thread2)) {\n        printk(KERN_ERR \"Failed to create threads\\n\");\n        return;\n    }\n    \n    // Wait for threads to complete\n    msleep(3000);\n    \n    printk(KERN_INFO \"Threads completed\\n\");\n    printk(KERN_INFO \"Final counter value: %d\\n\", shared_counter);\n    printk(KERN_INFO \"Expected value: %d\\n\", final_expected_value);\n    \n    if (shared_counter != final_expected_value) {\n        printk(KERN_WARNING \"RACE CONDITION DETECTED!\\n\");\n        printk(KERN_WARNING \"Counter value is incorrect due to unsynchronized access\\n\");\n    } else {\n        printk(KERN_INFO \"No race condition detected this time (but it's still unsafe!)\\n\");\n    }\n}\n\n// TODO: Explain different types of execution contexts\nstatic void explain_execution_contexts(void)\n{\n    printk(KERN_INFO \"=== Kernel Execution Contexts ===\");\n    printk(KERN_INFO \"1. Process Context:\\n\");\n    printk(KERN_INFO \"   - System calls, kernel threads\\n\");\n    printk(KERN_INFO \"   - Can sleep, use mutexes\\n\");\n    printk(KERN_INFO \"   - Most kernel code runs here\\n\");\n    \n    printk(KERN_INFO \"2. Interrupt Context:\\n\");\n    printk(KERN_INFO \"   - Hardware interrupts, softirqs\\n\");\n    printk(KERN_INFO \"   - Cannot sleep, atomic only\\n\");\n    printk(KERN_INFO \"   - Must be very fast\\n\");\n    \n    printk(KERN_INFO \"3. Multiple CPUs (SMP):\\n\");\n    printk(KERN_INFO \"   - Code can run simultaneously on different CPUs\\n\");\n    printk(KERN_INFO \"   - Shared data needs protection\\n\");\n}\n\n// TODO: Explain why synchronization is needed\nstatic void explain_synchronization_need(void)\n{\n    printk(KERN_INFO \"=== Why Synchronization is Critical ===\");\n    printk(KERN_INFO \"Problems without synchronization:\\n\");\n    printk(KERN_INFO \"- Data corruption (lost updates)\\n\");\n    printk(KERN_INFO \"- Inconsistent state\\n\");\n    printk(KERN_INFO \"- System crashes\\n\");\n    printk(KERN_INFO \"- Unpredictable behavior\\n\");\n    \n    printk(KERN_INFO \"Solutions (next problems will teach):\\n\");\n    printk(KERN_INFO \"- Mutexes (for process context)\\n\");\n    printk(KERN_INFO \"- Spinlocks (for interrupt context)\\n\");\n    printk(KERN_INFO \"- Atomic operations\\n\");\n    printk(KERN_INFO \"- RCU (Read-Copy-Update)\\n\");\n}\n\nstatic int __init concurrency_init(void)\n{\n    printk(KERN_INFO \"Concurrency concepts module loaded\\n\");\n    printk(KERN_INFO \"Learning about race conditions and synchronization\\n\");\n    \n    explain_execution_contexts();\n    explain_synchronization_need();\n    demonstrate_race_condition();\n    \n    return 0;\n}\n\nstatic void __exit concurrency_exit(void)\n{\n    printk(KERN_INFO \"Concurrency concepts module unloaded\\n\");\n    printk(KERN_INFO \"Remember: Shared data needs synchronization!\\n\");\n}\n\nmodule_init(concurrency_init);\nmodule_exit(concurrency_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Kernel Academy Student\");\nMODULE_DESCRIPTION(\"Understanding concurrency and race conditions\");\nMODULE_VERSION(\"1.0\");",
  "validation": {
    "exactRequirements": {
      "functionNames": [
        "concurrency_init",
        "concurrency_exit",
        "unsafe_thread_function",
        "demonstrate_race_condition",
        "explain_execution_contexts",
        "explain_synchronization_need"
      ],
      "variables": [
        {"name": "shared_counter", "type": "int"},
        {"name": "final_expected_value", "type": "int"}
      ],
      "outputMessages": [
        "Concurrency concepts module loaded",
        "Learning about race conditions and synchronization",
        "=== Demonstrating Race Condition ===",
        "Expected final value: 2000",
        "RACE CONDITION DETECTED!",
        "=== Kernel Execution Contexts ===",
        "=== Why Synchronization is Critical ===",
        "Remember: Shared data needs synchronization!"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/kthread.h",
        "linux/delay.h"
      ],
      "mustContain": [
        "shared_counter++",
        "kthread_run",
        "msleep",
        "IS_ERR"
      ]
    },
    "testCases": [
      {
        "id": "race_condition_demo",
        "name": "Race Condition Demonstration",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "shared_counter++",
          "kthread_run(unsafe_thread_function",
          "msleep(1)"
        ],
        "prohibitedSymbols": ["mutex", "spinlock", "atomic"]
      },
      {
        "id": "execution_contexts",
        "name": "Execution Context Explanation",
        "type": "output_match",
        "critical": true,
        "expected": [
          {"pattern": "=== Kernel Execution Contexts ===", "exact": true},
          {"pattern": "Process Context:", "exact": false},
          {"pattern": "Interrupt Context:", "exact": false}
        ]
      },
      {
        "id": "synchronization_explanation",
        "name": "Synchronization Need Explanation",
        "type": "output_match",
        "critical": true,
        "expected": [
          {"pattern": "=== Why Synchronization is Critical ===", "exact": true},
          {"pattern": "Data corruption", "exact": false},
          {"pattern": "Mutexes", "exact": false}
        ]
      },
      {
        "id": "educational_comments",
        "name": "Educational Comments Present",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "// CONCEPT: Concurrency and Race Conditions",
          "// DANGEROUS: No synchronization!",
          "// WHY: Without proper synchronization"
        ],
        "prohibitedSymbols": []
      }
    ]
  }
}