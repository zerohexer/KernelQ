{
  "id": 16,
  "title": "Structure Pointers - Advanced Data Manipulation",
  "phase": "foundations",
  "difficulty": 5,
  "xp": 45,
  "description": "Learn essential pointer concepts by working with pointers to structures. Focus on arrow operator (->), address-of operator (&), and passing structures to functions by reference.",
  "mainFile": "struct_pointers.c",
  "files": [
    {
      "name": "struct_pointers.h",
      "content": "#ifndef STRUCT_POINTERS_H\n#define STRUCT_POINTERS_H\n\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/types.h>\n\n#define MAX_NAME_LEN 32\n\n/* TODO: Define device_info structure */\n/* struct device_info {\n *     char device_name[MAX_NAME_LEN];\n *     int device_id;\n *     bool is_active;\n *     int data_count;\n * }; */\n\nextern struct device_info my_device;\n\n/* TODO: Declare your functions that work with pointers */\n/* void print_device_info(struct device_info *dev); */\n/* void update_device_count(struct device_info *dev, int new_count); */\n/* void activate_device(struct device_info *dev); */\n\n#endif /* STRUCT_POINTERS_H */",
      "readOnly": false,
      "language": "h"
    },
    {
      "name": "struct_pointers.c",
      "content": "#include \"struct_pointers.h\"\n\n/* TODO: Initialize device structure */\n/* struct device_info my_device = {\n *     .device_name = \"sensor01\",\n *     .device_id = 1001,\n *     .is_active = false,\n *     .data_count = 0\n * }; */\n\n/* IMPORTANT: DO NOT REMOVE OR MODIFY THE LINES BELOW!\n * These module parameter declarations are required for validation testing.\n * The testing system uses these to verify your pointer operations work\n * with different input values. Removing them will cause test failures.\n */\nmodule_param_named(device_id, my_device.device_id, int, 0644);\nMODULE_PARM_DESC(device_id, \"Device ID for testing pointer member access\");\nmodule_param_named(data_count, my_device.data_count, int, 0644);\nMODULE_PARM_DESC(data_count, \"Initial data count for testing pointer operations\");\n/* Note: string and bool module params need special handling for structures */\n/* END OF REQUIRED MODULE PARAMETER SECTION */\n\n/* TODO: Implement function to print device info using pointer */\n/* void print_device_info(struct device_info *dev) {\n *     printk(KERN_INFO \"Device Name: %s\\n\", dev->device_name);\n *     printk(KERN_INFO \"Device ID: %d\\n\", dev->device_id);\n *     printk(KERN_INFO \"Device Active: %d\\n\", dev->is_active);\n *     printk(KERN_INFO \"Data Count: %d\\n\", dev->data_count);\n * } */\n\n/* TODO: Implement function to update device count via pointer */\n/* void update_device_count(struct device_info *dev, int new_count) {\n *     dev->data_count = new_count;\n *     printk(KERN_INFO \"Device %s count updated to: %d\\n\", dev->device_name, new_count);\n * } */\n\n/* TODO: Implement function to activate device via pointer */\n/* void activate_device(struct device_info *dev) {\n *     dev->is_active = true;\n *     printk(KERN_INFO \"Device %s activated\\n\", dev->device_name);\n * } */\n\nstatic int __init struct_pointers_init(void)\n{\n    printk(KERN_INFO \"Structure pointers module loaded\\n\");\n    \n    /* TODO: Print initial device info using pointer */\n    /* printk(KERN_INFO \"Initial Device Information:\\n\"); */\n    /* print_device_info(&my_device); */\n    \n    /* TODO: Update device count through pointer */\n    /* update_device_count(&my_device, 5); */\n    \n    /* TODO: Activate device through pointer */\n    /* activate_device(&my_device); */\n    \n    /* TODO: Print final information using pointer */\n    /* printk(KERN_INFO \"Final Device Information:\\n\"); */\n    /* print_device_info(&my_device); */\n    \n    return 0;\n}\n\nstatic void __exit struct_pointers_exit(void)\n{\n    printk(KERN_INFO \"Structure pointers module unloaded\\n\");\n}\n\nmodule_init(struct_pointers_init);\nmodule_exit(struct_pointers_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Student\");\nMODULE_DESCRIPTION(\"Learning structure pointers and basic operations\");\nMODULE_VERSION(\"1.0\");",
      "readOnly": false,
      "language": "c"
    },
    {
      "name": "Makefile",
      "content": "# Structure pointers module Makefile\nobj-m += struct_pointers.o\n\n# Kernel build directory\nKDIR := /lib/modules/$(shell uname -r)/build\n\n# Default target\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\n\nclean:\n\tmake -C $(KDIR) M=$(PWD) clean\n\ninstall: all\n\tmake -C $(KDIR) M=$(PWD) modules_install\n\nhelp:\n\tmake -C $(KDIR) M=$(PWD) help\n\n.PHONY: all clean install help",
      "readOnly": true,
      "language": "makefile"
    }
  ],
  "concepts": [
    "structure pointers",
    "pointer dereferencing", 
    "arrow operator (->)",
    "address-of operator (&)",
    "structure modification via pointers"
  ],
  "skills": [
    "Working with structure pointers",
    "Using arrow operator for member access",
    "Passing structures to functions by reference",
    "Modifying structures through pointers",
    "Understanding pointer-based data manipulation"
  ],
  "validation": {
    "exactRequirements": {
      "functionNames": ["struct_pointers_init", "struct_pointers_exit", "print_device_info", "update_device_count", "activate_device"],
      "function_declarations": [
        { "name": "print_device_info", "returnType": "void", "parameters": ["struct device_info *dev"] },
        { "name": "update_device_count", "returnType": "void", "parameters": ["struct device_info *dev", "int new_count"] },
        { "name": "activate_device", "returnType": "void", "parameters": ["struct device_info *dev"] }
      ],
      "variables_declarations": [
        { "name": "device_info", "type": "struct", "value": "{char device_name[MAX_NAME_LEN]; int device_id; bool is_active; int data_count;}", "storageClass": "none" },
        { "name": "my_device", "type": "struct device_info", "storageClass": "extern" }
      ],
      "variables": [
        { "name": "my_device", "type": "struct device_info", "value": "{.device_name = \"sensor01\", .device_id = 1001, .is_active = false, .data_count = 0}", "storageClass": "none" }
      ],
      "outputMessages": [
        "Structure pointers module loaded",
        "Initial Device Information:",
        "Device Name: sensor01",
        "Device ID: 1001",
        "Device Active: 0",
        "Data Count: 0",
        "Device sensor01 count updated to: 5",
        "Device sensor01 activated",
        "Final Device Information:",
        "Device Name: sensor01",
        "Device ID: 1001",
        "Device Active: 1",
        "Data Count: 5"
      ],
      "requiredIncludes": [
        "linux/module.h",
        "linux/kernel.h",
        "linux/init.h",
        "linux/types.h"
      ],
      "mustContain": [
        "struct device_info {",
        "extern struct device_info my_device",
        "struct device_info my_device = {",
        "&my_device",
        "module_param_named(device_id, my_device.device_id, int, 0644)",
        "module_param_named(data_count, my_device.data_count, int, 0644)"
      ],
      "moduleInfo": {
        "license": "GPL"
      }
    },
    "testCases": [
      {
        "id": "function_declarations",
        "name": "Function Declarations in Header",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void print_device_info(struct device_info *dev)",
          "void update_device_count(struct device_info *dev, int new_count)",
          "void activate_device(struct device_info *dev)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "function_signatures_source",
        "name": "Function Signatures in Source File",
        "type": "code_analysis",
        "critical": true,
        "expectedSymbols": [
          "void print_device_info(struct device_info *dev)",
          "void update_device_count(struct device_info *dev, int new_count)",
          "void activate_device(struct device_info *dev)",
          "static int __init struct_pointers_init(void)",
          "static void __exit struct_pointers_exit(void)"
        ],
        "prohibitedSymbols": []
      },
      {
        "id": "exact_output",
        "name": "Exact Output Messages",
        "type": "output_match",
        "critical": true,
        "expected": [
          { "pattern": "Structure pointers module loaded", "exact": true, "linkedFunction": "static int __init struct_pointers_init(void)" },
          { "pattern": "Initial Device Information:", "exact": true, "linkedFunction": "static int __init struct_pointers_init(void)" },
          { "pattern": "Device Name: sensor01", "exact": true, "linkedFunction": "void print_device_info(struct device_info *dev)" },
          { "pattern": "Device ID: 1001", "exact": true, "linkedFunction": "void print_device_info(struct device_info *dev)" },
          { "pattern": "Device Active: 0", "exact": true, "linkedFunction": "void print_device_info(struct device_info *dev)" },
          { "pattern": "Data Count: 0", "exact": true, "linkedFunction": "void print_device_info(struct device_info *dev)" },
          { "pattern": "Device sensor01 count updated to: 5", "exact": true, "linkedFunction": "void update_device_count(struct device_info *dev, int new_count)" },
          { "pattern": "Device sensor01 activated", "exact": true, "linkedFunction": "void activate_device(struct device_info *dev)" },
          { "pattern": "Final Device Information:", "exact": true, "linkedFunction": "static int __init struct_pointers_init(void)" },
          { "pattern": "Device Name: sensor01", "exact": true, "linkedFunction": "void print_device_info(struct device_info *dev)" },
          { "pattern": "Device ID: 1001", "exact": true, "linkedFunction": "void print_device_info(struct device_info *dev)" },
          { "pattern": "Device Active: 1", "exact": true, "linkedFunction": "void print_device_info(struct device_info *dev)" },
          { "pattern": "Data Count: 5", "exact": true, "linkedFunction": "void print_device_info(struct device_info *dev)" }
        ]
      },
      {
        "id": "advanced_pointer_structure_validation",
        "name": "Advanced Pointer Structure Implementation with TCC Header Validation",
        "type": "kernel_project_test",
        "critical": true,
        "testScenario": {
          "userspaceApps": [
            {
              "name": "pointer_struct_tester",
              "source": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <time.h>\\n#include <string.h>\\n\\nint main() {\\n    printf(\\\"=== Dynamic Pointer Structure Implementation Test ===\\\\n\\\");\\n    \\n    // Seed random number generator\\n    srand(time(NULL));\\n    \\n    // Generate random device data\\n    int test_id1 = (rand() % 9000) + 2000;  // 2000-10999\\n    int test_count1 = (rand() % 10) + 1;    // 1-10\\n    int test_id2 = (rand() % 9000) + 5000;  // 5000-13999\\n    int test_count2 = (rand() % 20) + 5;    // 5-24\\n    \\n    printf(\\\"Test 1: Testing with device_id=%d, data_count=%d\\\\n\\\", test_id1, test_count1);\\n    char cmd1[256];\\n    snprintf(cmd1, sizeof(cmd1), \\\"insmod /lib/modules/struct_pointers.ko device_id=%d data_count=%d\\\", test_id1, test_count1);\\n    system(\\\"rmmod struct_pointers 2>/dev/null\\\");\\n    system(cmd1);\\n    \\n    printf(\\\"Test 2: Testing with device_id=%d, data_count=%d\\\\n\\\", test_id2, test_count2);\\n    char cmd2[256];\\n    snprintf(cmd2, sizeof(cmd2), \\\"insmod /lib/modules/struct_pointers.ko device_id=%d data_count=%d\\\", test_id2, test_count2);\\n    system(\\\"rmmod struct_pointers\\\");\\n    system(cmd2);\\n    \\n    printf(\\\"SUCCESS: Dynamic pointer structure test completed\\\\n\\\");\\n    return 0;\\n}"
            }
          ],
          "setupCommands": [
            "echo 'Starting advanced pointer structure implementation validation'"
          ],
          "testCommands": [
            "echo 'Phase 1: Ultra-Fast TCC Header Validation'",
            "echo 'Creating minimal kernel header stubs for TCC...'",
            "mkdir -p /tmp/linux",
            "echo '#define KERN_INFO' > /tmp/linux/kernel.h",
            "echo 'int printk(const char *fmt, ...);' >> /tmp/linux/kernel.h",
            "echo '#define MODULE_LICENSE(x)' > /tmp/linux/module.h",
            "echo '#define MODULE_AUTHOR(x)' >> /tmp/linux/module.h",
            "echo '#define MODULE_DESCRIPTION(x)' >> /tmp/linux/module.h",
            "echo '#define MODULE_VERSION(x)' >> /tmp/linux/module.h",
            "echo '#define module_init(x)' >> /tmp/linux/module.h",
            "echo '#define module_exit(x)' >> /tmp/linux/module.h",
            "echo '#define __init' > /tmp/linux/init.h",
            "echo '#define __exit' >> /tmp/linux/init.h",
            "echo 'typedef int bool;' > /tmp/linux/types.h",
            "echo '#define true 1' >> /tmp/linux/types.h",
            "echo '#define false 0' >> /tmp/linux/types.h",
            "echo '#define MAX_NAME_LEN 32' >> /tmp/linux/types.h",
            "echo 'Creating test file that includes pointer structure header...'",
            "echo '#include \"/lib/modules/struct_pointers.h\"' > /tmp/test.c",
            "echo 'int main() { my_device.device_id = 888; print_device_info(&my_device); update_device_count(&my_device, 10); activate_device(&my_device); return 0; }' >> /tmp/test.c",
            "echo 'Running TCC validation...'",
            "/usr/bin/tcc -I/tmp -Wimplicit-function-declaration -Werror -c /tmp/test.c -o /tmp/test.o 2>/tmp/tcc_error.log",
            "TCC_EXIT_CODE=$?",
            "if [ $TCC_EXIT_CODE -ne 0 ]; then echo 'FAIL: Function or variable declaration missing or commented in header'; echo 'TCC Error Details:'; cat /tmp/tcc_error.log; else echo 'PASS: All function and variable declarations found in header file'; fi",
            "echo 'Phase 2: Dynamic Pointer Structure Implementation Testing'",
            "/bin/pointer_struct_tester > /tmp/test_output.log",
            "cat /tmp/test_output.log",
            "echo 'Phase 3: Dynamic Value Extraction and Validation'",
            "echo 'Adding delay to ensure dmesg messages are written...'",
            "sleep 1",
            "echo 'Extracting random test values from output...'",
            "TEST1_ID=$(grep -o 'Test 1: Testing with device_id=[0-9]*' /tmp/test_output.log | cut -d'=' -f2 | cut -d',' -f1)",
            "TEST1_COUNT=$(grep -o 'data_count=[0-9]*' /tmp/test_output.log | head -1 | cut -d'=' -f2)",
            "TEST2_ID=$(grep -o 'Test 2: Testing with device_id=[0-9]*' /tmp/test_output.log | cut -d'=' -f2 | cut -d',' -f1)",
            "TEST2_COUNT=$(grep -o 'data_count=[0-9]*' /tmp/test_output.log | tail -1 | cut -d'=' -f2)",
            "echo 'Test values: ID1='$TEST1_ID', Count1='$TEST1_COUNT', ID2='$TEST2_ID', Count2='$TEST2_COUNT",
            "echo 'Validating pointer-based structure member access with dynamic values'",
            "dmesg | grep 'Device ID: '$TEST1_ID && echo 'PASS: Pointer access to device_id working with '$TEST1_ID || echo 'FAIL: Pointer access to device_id broken for '$TEST1_ID",
            "dmesg | grep 'Device Name: sensor01' && echo 'PASS: Pointer access to device_name working' || echo 'FAIL: Pointer access to device_name broken'",
            "dmesg | grep 'Data Count: '$TEST1_COUNT && echo 'PASS: Initial data_count from module param '$TEST1_COUNT || echo 'FAIL: Module parameter data_count not working'",
            "dmesg | grep 'Device ID: '$TEST2_ID && echo 'PASS: Pointer access to device_id working with '$TEST2_ID || echo 'FAIL: Pointer access to device_id broken for '$TEST2_ID",
            "dmesg | grep 'Device sensor01 activated' && echo 'PASS: Pointer-based device activation working' || echo 'FAIL: Pointer-based device activation broken'",
            "dmesg | grep 'Device Active: 1' && echo 'PASS: Activation modified is_active via pointer' || echo 'FAIL: Activation is_active modification broken'",
            "echo 'Phase 4: Structure Definition Validation'",
            "dmesg | grep 'Structure pointers module loaded' && echo 'PASS: Module initialization working' || echo 'FAIL: Module initialization broken'",
            "echo 'All pointer structure implementation validations completed'"
          ],
          "expected": {
            "dmesg": [
              "Structure pointers module loaded",
              "Device Name: sensor01",
              "Device ID: .*",
              "Data Count: .*",
              "Device sensor01 count updated to: 5",
              "Device sensor01 activated",
              "Device Active: 1"
            ],
            "stdout": [
              "PASS: All function and variable declarations found in header file",
              "SUCCESS: Dynamic pointer structure test completed",
              "PASS: Pointer access to device_id working with .*",
              "PASS: Pointer access to device_name working",
              "PASS: Initial data_count from module param .*",
              "PASS: Pointer-based device activation working",
              "PASS: Activation modified is_active via pointer"
            ]
          },
          "timeout": 30
        }
      }
    ]
  }
}
